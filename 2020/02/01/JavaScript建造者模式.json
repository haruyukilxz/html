{"attributes":{"title":"JavaScript建造者模式","date":"2020-02-01T20:52:58.000Z","tags":"Javascript","categories":"设计模式"},"body":"建造者模式就是指将类的构造和其表示分离开来，调用者可以通过不同的构建过程创造出不同表示的对象。主要解决在软件系统中，有时候面临着\"一个复杂对象\"的创建工作，由于需求的变化，这个复杂对象的某些部分经常面临着剧烈的变化，一些基本部件不会变。所以需要将变与不变分离。与抽象工厂的区别：在建造者模式里，有个指导者(Director)，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造者模式可以强制实行一种分步骤进行的建造过程。\r\n##  建造者模式四要素\r\n1. 产品类Product: 一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有较多的代码。\r\n2. 抽象建造者类Builder: 将建造的具体过程交予它的子类来实现。\r\n3. 建造者类ConcreateBuilder: 组件产品，返回组件好的产品\r\n4. 指导类Director: 负责调用适当的建造者来组件产品，指导类一般不与产品类发生依赖关系，与指导类直接交互的是建造者类。\r\n##  建造者模式的优点\r\n建造者模式的封装很好，使用建造者模式可以进行有效的封装变化，在使用建造者模式的场景中，产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指导者类中对整体可以取得比较好的稳定性。\r\n建造者类也很方便扩展，如果有新的需求，只需要实现一个新的建造者类即可。\r\n产品类 product.ts\r\n```\r\nclass Product {\r\n    private _name: String;\r\n    public name(): String {\r\n        return this._name;\r\n    }\r\n    public setName(name: String) {\r\n        this._name = name;\r\n    }\r\n}\r\n```\r\n抽象建造类 builder.ts\r\n```\r\ninterface Builder {\r\n    _product: Product;\r\n    setName(name: String): Product;\r\n    build(): Product;\r\n}\r\n```\r\n建造类 concreatebuilder.ts\r\n```\r\nclass ConcreateBuilder implements Builder {\r\n    _product: Product = new Product;\r\n    public setName(name: String): Product {\r\n        this._product.setName(name);\r\n        return this._product;\r\n    }\r\n    public build(): Product {\r\n        return this._product;\r\n    }\r\n}\r\nclass HelloworldBuilder extends ConcreateBuilder {\r\n    public build(): Product {\r\n        this._product.setName(\"hello world!\");\r\n        return this._product;\r\n    }\r\n}\r\n```\r\n指导类 director.ts\r\n```\r\nclass Director {\r\n    private _defaultBuilder: ConcreateBuilder = new ConcreateBuilder;\r\n    private _helloworldBuilder: HelloworldBuilder = new HelloworldBuilder;\r\n    public buildForDefault(): Product  {\r\n        return this._defaultBuilder.build();\r\n    }\r\n    public buildForHelloworld(): Product {\r\n        return this._helloworldBuilder.build();\r\n    }\r\n}\r\n```\r\n测试运行:\r\n```\r\nlet director = new Director();\r\nconsole.log(director.buildForDefault().name());\r\nconsole.log(director.buildForHelloworld().name());\r\n```\r\n执行结果\r\n```\r\nundefined\r\nhello world!\r\n```\r\n通过不同的builder就可以构建不同的对象出来，当需求变动的时候，我们只需要扩展出不同的Builder和Director就可以满足。\r\n\r\n","id":"7c122ec6349a9ff77f023a9003000f3e","link":"/2020/02/01/JavaScript建造者模式"}