{
    "attributes": {
        "title": "JavaScript建造者模式",
        "date": "2020-02-01T20:52:58.000Z",
        "tags": "Javascript",
        "categories": "设计模式"
    },
    "body": "<p>建造者模式就是指将类的构造和其表示分离开来，调用者可以通过不同的构建过程创造出不同表示的对象。主要解决在软件系统中，有时候面临着&quot;一个复杂对象&quot;的创建工作，由于需求的变化，这个复杂对象的某些部分经常面临着剧烈的变化，一些基本部件不会变。所以需要将变与不变分离。与抽象工厂的区别：在建造者模式里，有个指导者(Director)，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造者模式可以强制实行一种分步骤进行的建造过程。</p>\n<h2>建造者模式四要素</h2>\n<ol>\n<li>产品类Product: 一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有较多的代码。</li>\n<li>抽象建造者类Builder: 将建造的具体过程交予它的子类来实现。</li>\n<li>建造者类ConcreateBuilder: 组件产品，返回组件好的产品</li>\n<li>指导类Director: 负责调用适当的建造者来组件产品，指导类一般不与产品类发生依赖关系，与指导类直接交互的是建造者类。</li>\n</ol>\n<h2>建造者模式的优点</h2>\n<p>建造者模式的封装很好，使用建造者模式可以进行有效的封装变化，在使用建造者模式的场景中，产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指导者类中对整体可以取得比较好的稳定性。\n建造者类也很方便扩展，如果有新的需求，只需要实现一个新的建造者类即可。\n产品类 product.ts</p>\n<pre><code>class Product {\n    private _name: String;\n    public name(): String {\n        return this._name;\n    }\n    public setName(name: String) {\n        this._name = name;\n    }\n}\n</code></pre>\n<p>抽象建造类 builder.ts</p>\n<pre><code>interface Builder {\n    _product: Product;\n    setName(name: String): Product;\n    build(): Product;\n}\n</code></pre>\n<p>建造类 concreatebuilder.ts</p>\n<pre><code>class ConcreateBuilder implements Builder {\n    _product: Product = new Product;\n    public setName(name: String): Product {\n        this._product.setName(name);\n        return this._product;\n    }\n    public build(): Product {\n        return this._product;\n    }\n}\nclass HelloworldBuilder extends ConcreateBuilder {\n    public build(): Product {\n        this._product.setName(&quot;hello world!&quot;);\n        return this._product;\n    }\n}\n</code></pre>\n<p>指导类 director.ts</p>\n<pre><code>class Director {\n    private _defaultBuilder: ConcreateBuilder = new ConcreateBuilder;\n    private _helloworldBuilder: HelloworldBuilder = new HelloworldBuilder;\n    public buildForDefault(): Product  {\n        return this._defaultBuilder.build();\n    }\n    public buildForHelloworld(): Product {\n        return this._helloworldBuilder.build();\n    }\n}\n</code></pre>\n<p>测试运行:</p>\n<pre><code>let director = new Director();\nconsole.log(director.buildForDefault().name());\nconsole.log(director.buildForHelloworld().name());\n</code></pre>\n<p>执行结果</p>\n<pre><code>undefined\nhello world!\n</code></pre>\n<p>通过不同的builder就可以构建不同的对象出来，当需求变动的时候，我们只需要扩展出不同的Builder和Director就可以满足。</p>\n",
    "id": "7c122ec6349a9ff77f023a9003000f3e",
    "link": "/2020/02/01/JavaScript建造者模式"
}