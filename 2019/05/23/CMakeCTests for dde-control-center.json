{"attributes":{"title":"CMake CTests for dde-control-center","date":"2019-05-23T17:16:15.000Z","tags":["CMake Linux"],"categories":"Linux"},"body":"什么是单元测试?\r\n>在计算机编程中，单元测试又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。\r\n单元测试存在的意义在于，如果程序发生了异常情况，比如接收了错误的值，从而导致结果不正确，当修正程序中的错误后，为了避免再次遇到这个问题，需要对出问题的值和函数/功能进行一次测试，确保结果符合预期。\r\n单元测试很重要，如果是新项目，请一定要刚开始就规划好单元测试。\r\n为什么说单元测试很重要呢？因为单元测试的目的是隔离其他单元，并证明当前单元是正确的。这需要开发者在设计程序的时候就要考虑很多，合理的设计和规划项目。当未来重构项目的时候，可以局部重构来优化项目，而不是从零重写。\r\n本文没有详细说明Qt的单元测试是如何编写的，编写Qt的单元测试放在以后再写(~~咕咕咕~~)。\r\n写这篇文章是因为最近在给控制中心写单元测试，控制中心的模块都是MVC的，本身就做好了大方向的隔离，每个函数也基本是拆分出来的最小功能，可以单独拿出来测试。控制中心目前存在一个问题，Worker类是从DBus上接收数据，处理完成后放入Model中，如果测试Worker类，需要做很多和DBus相关的处理，比较麻烦，所以最开始我先把重心放在了创建Tests和测试一个基本的转换函数的功能，验证单元测试的流程。\r\n>[控制中心单元测试PR](https://github.com/linuxdeepin/dde-control-center/pull/171)\r\n控制中心项目使用的CMake作为项目构建工具，所以用到了CTests，控制中心使用的Qt进行的开发，Qt也提供了自己的单元测试，我两个都做了支持。\r\n在顶层的CMakeLists.txt中添加CTests的支持：\r\n```\r\n# 启用CTest检查\r\ninclude(Dart)\r\n# 启用CTest\r\ninclude(CTest)\r\n```\r\n这两行内容需要在顶层CMakeLists.txt中添加，不然不会生效。\r\n在子项目中创建一个dcc_test.h，用来写单元测试的类。\r\n```\r\n#ifndef DCC_TEST_H\r\n#define DCC_TEST_H\r\n#include <QMap>\r\n#include <QString>\r\n#include <QTest>\r\n#include \"modules/display/displaywidget.h\"\r\nnamespace Tests {\r\nclass Tests : public QObject {\r\n    Q_OBJECT\r\nprivate Q_SLOTS:\r\n    void testSliderValue_data()\r\n    {\r\n        QTest::addColumn<float>(\"value\");\r\n        QTest::addColumn<int>(\"result\");\r\n        QMap<float, int> testMap{ { 1.0, 1 },  { 1.25, 2 }, { 1.5, 3 },\r\n                                  { 1.75, 4 }, { 2.0, 5 },  { 2.25, 6 },\r\n                                  { 2.5, 7 },  { 2.75, 8 }, { 3.0, 9 } };\r\n        for (auto it = testMap.constBegin(); it != testMap.constEnd(); ++it) {\r\n            QTest::newRow(\"converToSlider\") << it.key() << it.value();\r\n        }\r\n    }\r\n    void testSliderValue()\r\n    {\r\n        QFETCH(float, value);\r\n        QFETCH(int, result);\r\n        using namespace dcc::display;\r\n        QCOMPARE(DisplayWidget::convertToSlider(value), result);\r\n        QCOMPARE(DisplayWidget::convertToScale(result), value);\r\n    }\r\n};\r\n}  // namespace Tests\r\nQTEST_MAIN(Tests::Tests)\r\n#endif  // !DCC_TEST_H\r\n```\r\n在子项目的CMakeLists.txt中添加一个二进制，用来当作单元测试程序。\r\n```\r\n# 这个宏是Dart提供的，用来判断是否开启CTest\r\nif(BUILD_TESTING)\r\nfind_package(Qt5 COMPONENTS\r\n    Test\r\nREQUIRED)\r\nset(Qt_LIBS\r\n    ${Qt_LIBS}\r\n    Qt5::Test\r\n)\r\nset(TEST_SRCS\r\ntests/dcc_test.h\r\n${DISPLAY_FILES}\r\n${WIDGETS_FILES}\r\n${MODULE_FILES}\r\n)\r\n# 添加一个叫unit-test的二进制\r\nadd_executable(unit-test\r\n${TEST_SRCS}\r\n${PROJECT_BINARY_DIR}\r\n)\r\ntarget_include_directories(unit-test PUBLIC\r\n${TEST_SRCS}\r\n${PROJECT_BINARY_DIR}\r\n${DFrameworkDBus_INCLUDE_DIRS}\r\n${QGSettings_INCLUDE_DIRS}\r\n${Qt5Gui_PRIVATE_INCLUDE_DIRS}\r\n)\r\ntarget_link_libraries(unit-test PRIVATE\r\n${Qt_LIBS}\r\n${DFrameworkDBus_LIBRARIES}\r\n${QGSettings_LIBRARIES}\r\n${DtkWidget_LIBRARIES}\r\n${XCB_EWMH_LIBRARIES}\r\n)\r\n```\r\n到这里，直接编译启动unit-test就可以使用Qt的单元测试了，但是加上CTest的支持只需要一行：\r\n```\r\nadd_test(ctest unit-test)\r\nendif()\r\n```\r\n使用ctest -j6 -C Debug -T test --output-on-failure跑CTest，得到执行结果：\r\n```\r\n[ctest]    Site: xiaomi-air\r\n[ctest]    Build name: Linux-c++\r\n[ctest] Test project /home/justforlxz/Projects/Deepin/dde-control-center/build\r\n[ctest]     Start 1: ctest\r\n[ctest] 1/1 Test #1: ctest ............................   Passed    0.05 sec\r\n[ctest]\r\n[ctest] 100% tests passed, 0 tests failed out of 1\r\n[ctest]\r\n[ctest] Total Test time (real) =   0.06 sec\r\n[ctest] CTest finished with return code 0\r\n```\r\n如果是跑unit-test二进制，则会得到Qt打印的相关信息：\r\n```\r\n********* Start testing of Tests::Tests *********\r\nConfig: Using QtTest library 5.12.3, Qt 5.12.3 (x86_64-little_endian-lp64 shared (dynamic) release build; by GCC 8.3.0)\r\nPASS   : Tests::Tests::initTestCase()\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::testSliderValue(converToSlider)\r\nPASS   : Tests::Tests::cleanupTestCase()\r\nTotals: 11 passed, 0 failed, 0 skipped, 0 blacklisted, 0ms\r\n********* Finished testing of Tests::Tests *********\r\n```\r\n对比CTest和Qt的单元测试，Qt会告诉你详细的函数调用和执行过程，CTest更注重结果，不过在Qtcreator的单元测试面板中，会看到更好的输出。\r\n说到底，CTest支持启动了一个带有单元测试的程序，而程序自己使用了Qt提供的单元测试类进行测试。\r\n\r\n","id":"9ec35bb654ffc0cbd1277fe1e4e4b5d8","link":"/2019/05/23/CMakeCTestsfordde-control-center"}