{
    "attributes": {
        "title": "如何在Deepin上使用LNMP",
        "date": "2019-02-21T10:11:15.000Z",
        "tags": [
            "LNMP",
            "Linux",
            "Deepin",
            "Web"
        ],
        "categories": [
            "Linux"
        ],
        "author": "Lorem Ipsum",
        "url": "http://generator.lorem-ipsum.info"
    },
    "body": "<p>为了节省读者的时间，我先简述一下阅读这篇文章需要了解的知识。\n这篇文章将基于Docker来构建nginx、php和mysql来搭建LNMP环境，和其他教程有所不同的是，需要有一定的Docker基础。\nDocker是一个不错的工具，使我们不需要虚拟机那样的庞然大物就可以轻松的隔离运行的程序，这要感谢Linux的资源分离机制，避免启动一个虚拟机造成了大量资源浪费。\n首先需要在Deepin上安装Docker，添加Docker的deb仓库，并安装docker-ce。\n创建文件</p>\n<pre><code>sudo nano /etc/apt/sources.list.d/docker.list\n</code></pre>\n<p>写入</p>\n<pre><code>deb [arch=amd64] https://download.docker.com/linux/debian jessie edge\n</code></pre>\n<p>刷新一下仓库就可以安装了。</p>\n<pre><code>sudo apt update &amp;&amp; sudo apt install docker-ce docker-compose\n</code></pre>\n<p>安装完成后重启一下系统，准备工作就算完成了一半了。\n在家目录创建一个Projects目录，当做我们LNMP的工作目录，创建一个名叫<em>docker-compose.yaml</em>的文件，这是docker-compose的配置文件，我们通过docker-compose这个工具来管理我们的Docker容器。\n所有的镜像均采用最新版本，nginx(1.15.8)，php(7.3.2)，mysql(8.0.15)，如有需要，自行选择不同版本的镜像。\n注意PHP7已经不支持mysql扩展，使用内置的MySQLnd。\n写入以下配置文件：</p>\n<pre><code>version: '3'\nservices:\n  nginx:\n    # 设置容器名字\n    container_name: &quot;nginx&quot;\n    # 采用最新的nginx\n    image: nginx:latest\n    # 绑定80端口\n    ports:\n        - &quot;80:80&quot;\n    # 添加php容器的依赖\n    depends_on:\n        - &quot;php&quot;\n    # 绑定数据目录\n    volumes:\n        - &quot;./volumes/nginx/conf.d:/etc/nginx/conf.d&quot;\n        - &quot;./volumes/html:/usr/share/nginx/html&quot;\n    restart: always\n  php:\n    # 设置容器名字\n    container_name: &quot;php&quot;\n    # 采用最新的php\n    image: php:fpm\n    # 绑定端口\n    ports:\n        - &quot;9000:9000&quot;\n    # 绑定数据目录\n    volumes:\n        - &quot;./volumes/html:/var/www/html&quot;\n    restart: always\n  mysql:\n    # 设置容器名字\n    container_name: &quot;mysql&quot;\n    # 采用最新的mysql\n    image: mysql:latest\n    # 绑定端口\n    ports:\n        - &quot;3306:3306&quot;\n    # 设置环境变量\n    environment:\n        - MYSQL_ROOT_PASSWORD=(自己设置密码)\n    # 绑定数据目录\n    volumes:\n        - &quot;./volumes/mysql:/var/lib/mysql&quot;\n    restart: always\n</code></pre>\n<p>创建nginx的配置文件，编辑 <em>./volumes/nginx/conf.d/nginx.conf</em> ：</p>\n<pre><code>server {\n    listen       80;\n    server_name  localhost;\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm index.php;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n    location ~ \\.php$ {\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME /var/www/html/$fastcgi_script_name;\n        include        fastcgi_params;\n    }\n}\n</code></pre>\n<p>创建php测试文件，编辑 <em>./volumes/html/index.php</em> :</p>\n<pre><code>&lt;?php\nphpinfo();\n?&gt;\n</code></pre>\n<p>启动docker，第一次需要拉取一下镜像:</p>\n<pre><code>docker-compose up --build -d\n</code></pre>\n<p>等全部结束以后，就可以访问localhost看到php的信息了。\n通过Docker的方法来使用LNMP，不污染宿主机环境，不会再因为各种依赖问题而搞坏系统，这恰恰是新手容易犯的错误，使用Docker，方便你我。</p>\n",
    "id": "e1aa7dbe1a07108e48cb64584f29df65",
    "link": "/2019/02/21/如何在Deepin上使用LNMP"
}