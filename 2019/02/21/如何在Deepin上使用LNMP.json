{"attributes":{"title":"如何在Deepin上使用LNMP","date":"2019-02-21T10:11:15.000Z","tags":["LNMP","Linux","Deepin","Web"],"categories":["Linux"],"author":"Lorem Ipsum","url":"http://generator.lorem-ipsum.info"},"body":"为了节省读者的时间，我先简述一下阅读这篇文章需要了解的知识。\r\n这篇文章将基于Docker来构建nginx、php和mysql来搭建LNMP环境，和其他教程有所不同的是，需要有一定的Docker基础。\r\nDocker是一个不错的工具，使我们不需要虚拟机那样的庞然大物就可以轻松的隔离运行的程序，这要感谢Linux的资源分离机制，避免启动一个虚拟机造成了大量资源浪费。\r\n首先需要在Deepin上安装Docker，添加Docker的deb仓库，并安装docker-ce。\r\n创建文件\r\n```\r\nsudo nano /etc/apt/sources.list.d/docker.list\r\n```\r\n写入\r\n```\r\ndeb [arch=amd64] https://download.docker.com/linux/debian jessie edge\r\n```\r\n刷新一下仓库就可以安装了。\r\n```\r\nsudo apt update && sudo apt install docker-ce docker-compose\r\n```\r\n安装完成后重启一下系统，准备工作就算完成了一半了。\r\n在家目录创建一个Projects目录，当做我们LNMP的工作目录，创建一个名叫*docker-compose.yaml*的文件，这是docker-compose的配置文件，我们通过docker-compose这个工具来管理我们的Docker容器。\r\n所有的镜像均采用最新版本，nginx(1.15.8)，php(7.3.2)，mysql(8.0.15)，如有需要，自行选择不同版本的镜像。\r\n注意PHP7已经不支持mysql扩展，使用内置的MySQLnd。\r\n写入以下配置文件：\r\n```\r\nversion: '3'\r\nservices:\r\n  nginx:\r\n    # 设置容器名字\r\n    container_name: \"nginx\"\r\n    # 采用最新的nginx\r\n    image: nginx:latest\r\n    # 绑定80端口\r\n    ports:\r\n        - \"80:80\"\r\n    # 添加php容器的依赖\r\n    depends_on:\r\n        - \"php\"\r\n    # 绑定数据目录\r\n    volumes:\r\n        - \"./volumes/nginx/conf.d:/etc/nginx/conf.d\"\r\n        - \"./volumes/html:/usr/share/nginx/html\"\r\n    restart: always\r\n  php:\r\n    # 设置容器名字\r\n    container_name: \"php\"\r\n    # 采用最新的php\r\n    image: php:fpm\r\n    # 绑定端口\r\n    ports:\r\n        - \"9000:9000\"\r\n    # 绑定数据目录\r\n    volumes:\r\n        - \"./volumes/html:/var/www/html\"\r\n    restart: always\r\n  mysql:\r\n    # 设置容器名字\r\n    container_name: \"mysql\"\r\n    # 采用最新的mysql\r\n    image: mysql:latest\r\n    # 绑定端口\r\n    ports:\r\n        - \"3306:3306\"\r\n    # 设置环境变量\r\n    environment:\r\n        - MYSQL_ROOT_PASSWORD=(自己设置密码)\r\n    # 绑定数据目录\r\n    volumes:\r\n        - \"./volumes/mysql:/var/lib/mysql\"\r\n    restart: always\r\n```\r\n创建nginx的配置文件，编辑 *./volumes/nginx/conf.d/nginx.conf* ：\r\n```\r\nserver {\r\n    listen       80;\r\n    server_name  localhost;\r\n    location / {\r\n        root   /usr/share/nginx/html;\r\n        index  index.html index.htm index.php;\r\n    }\r\n    error_page   500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n        root   /usr/share/nginx/html;\r\n    }\r\n    location ~ \\.php$ {\r\n        fastcgi_pass   php:9000;\r\n        fastcgi_index  index.php;\r\n        fastcgi_param  SCRIPT_FILENAME /var/www/html/$fastcgi_script_name;\r\n        include        fastcgi_params;\r\n    }\r\n}\r\n```\r\n创建php测试文件，编辑 *./volumes/html/index.php* :\r\n```\r\n<?php\r\nphpinfo();\r\n?>\r\n```\r\n启动docker，第一次需要拉取一下镜像:\r\n```\r\ndocker-compose up --build -d\r\n```\r\n等全部结束以后，就可以访问localhost看到php的信息了。\r\n通过Docker的方法来使用LNMP，不污染宿主机环境，不会再因为各种依赖问题而搞坏系统，这恰恰是新手容易犯的错误，使用Docker，方便你我。\r\n\r\n","id":"e1aa7dbe1a07108e48cb64584f29df65","link":"/2019/02/21/如何在Deepin上使用LNMP"}