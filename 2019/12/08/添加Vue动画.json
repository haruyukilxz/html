{"attributes":{"title":"添加Vue动画","date":"2019-12-08T08:03:40.000Z","tags":"Vue","categories":"Vue"},"body":"以前一直搞不懂动画是怎么做的，它怎么这么神奇，写了一点看不懂的代码，就实现了非常丰富的效果，现在做了三年Qt开发，接触到了Qt的动画类，明白了动画是怎么一会儿事，现在来看当初的css动画代码，也明白了它是如何工作的了。本文会介绍一下Vue提供的组件过渡动画模块——transitions。\r\n## 概述\r\nVue在插入、更新和移除DOM元素时，提供了多种不同方式的应用过渡效果。包含以下工具：\r\n- 在css过渡和动画中自动应用class\r\n- 可以配合第三方动画css类，例如Animae.css\r\n- 提供钩子函数来使JS操作DOM元素\r\n- 可以配合使用第三方JavaScript动画库，例如Velocity.js\r\n## 单元素/组件过渡\r\nVue提供了 `transitions` 的封装组件，在下面的情况中，可以给任意元素或组件添加进入和离开的过渡效果。\r\n- 条件渲染 (使用 `v-show`)\r\n- 按需渲染 (使用 `v-if`)\r\n- 动态节点\r\n- 组件根元素\r\n这是一个基本的例子：\r\n```\r\n<div id=\"app\">\r\n    <button v-on:click=\"show = !show\">\r\n    Toggle\r\n    </button>\r\n    <transitions name=\"fade\">\r\n        <p v-if=\"show\"> hello! </p>\r\n    <transitions>\r\n<div>\r\n```\r\n```\r\nnew Vue({\r\n    el: \"#app\",\r\n    data: {\r\n        show: false\r\n    }\r\n});\r\n```\r\n在head中添加style：\r\n```\r\n.fade-enter-active,\r\n.fade-leave-active {\r\n  transition: opacity .5s;\r\n}\r\n.fade-enter,\r\n.fade-leave-to {\r\n  opacity: 0;\r\n}\r\n```\r\n这里有三点需要注意一下，需要动画的元素需要使用transitions节包裹起来，transitions需要一个name，css中需要使用固定的拼写来应用动画，入场动画和离场动画的状态是一致的，所以写在了一组里。\r\n当插入和删除包含在 `transitions` 组件中的元素时，Vue会做以下的事情：\r\n- 自动嗅探组件是否应用了css的过渡或动画，如果有，则在恰当的实际添加/删除css类名。\r\n- 如果 `transitions` 组件提供了钩子函数，Vue会在恰当的时机调用钩子函数。\r\n- 如果没有找到css过渡和动画，也没有找到钩子函数，则DOM的操作(插入和删除)在下一帧中立即执行。(注意是指浏览器的逐帧动画，而不是Vue的nextTick机制)\r\n### 过渡的类名\r\nVue的过渡动画一共有6个状态：\r\n1. `v-enter`: 定义进入过渡的开始状态，在元素被插入之前生效，待元素插入以后被移除。\r\n2. `v-enter-active`: 定义进入过渡生效时的状态，在整个进入过渡的阶段中应用，在元素插入之前生效，在过渡/动画完成后被移除。这个类可以定义过渡时间、延迟和动画曲线。\r\n3. `v-enter-to`: **在2.1.8版本及以上** 定义进入过渡的结束状态，在元素被插入的下一帧生效(与此同时 `v-enter` 被移除)，在过渡/动画完成后移除。\r\n4. `v-leave`: 定义离开过渡的开始状态，在离开过渡被触发时立即生效，下一帧被移除。\r\n5. `v-leave-active`: 定义离开过渡生效时的状态，在整个离开过渡的阶段中应用，在离开过渡触发时立即生效，在过渡/动画完成后立即被移除。这个类可以定义离开过渡的过程时间、延迟和动画曲线。\r\n6. `v-leave-to`: **在2.1。8版本及以上** 定义离开过渡的结束状态，在离开过渡被触发之后的下一帧被移除(与此同时`v-leave`也被删除)\r\n，在过渡/动画完成之后移除。\r\n![transitions](https://cn.vuejs.org/images/transition.png)\r\n可以看出一共两组动画，进入和离开的active。并且分别有两个状态，enter和enter-to，这6个状态控制了入场动画和离场动画。(吐槽一下Qt的动画系统，定义一个QAnimation只能做半场动画，想做到Vue这样的要定义两组，或者反向播放)\r\n对于那些正在过渡中切换的类名来说，如果使用了没有`name`属性的`transition`，Vue会使用v-当做默认前缀。为了避免多组动画冲突，我个人建议每一个`transition`组件都提供name属性。\r\n### JavaScript钩子函数\r\n`transition`也提供了钩子函数，使我们可以通过JavaScript来控制DOM元素，一共也包含了8个函数：\r\n1. beforeEnter\r\n2. enter\r\n3. afterEnter\r\n4. enterCancelled\r\n5. beforeLeave\r\n6. leave\r\n7. afterLeave\r\n8. leaveCancelled\r\n和css上要求的命名保持一致，只是增加了两个取消的接口，当动画被取消的时候被调用。\r\n这些钩子函数可以结合CSS `transition/animations` 使用，也可以单独使用。\r\n> 当只使用JavaScript过渡的时候，必须在 **enter** 和 **leave** 显式调用`done()`进行回调，否则他们将被同步调用，过渡会立即完成。\r\n> 推荐对于仅使用JavaScript过渡的元素添加`v-bind:css=\"false\"`，Vue会跳过CSS的检测，这也可以避免过渡过程中css的影响。\r\n## 列表元素的过渡\r\n以上我分享的都是单元素/组件的过渡，那么问题来了，列表这种通过v-for创建的元素该如何增加过渡效果呢？\r\nVue提供了`<transition-group>`组件，在深入了解之前，需要先介绍一下这个组件的一些特点：\r\n- 不同于`<transition>`，`<transition-group>`会创建一个真实的DOM元素，默认是<span>，可以通过tag属性切换为其他元素。\r\n- 过渡模式不再可用，因为我们不再相互切换特有的元素\r\n- 内部元素总是需要提供唯一的key值来进行区分\r\n- CSS过渡将会应用在内部的元素中，而不是这个组/容器本身\r\n### 列表的进入/离开过渡\r\n```\r\n<div id=\"app\">\r\n<button v-on:click=\"add\">add</button>\r\n<button v-on:click=\"remove\">remove</button>\r\n<transition-group name=\"group\" tag=\"ul\">\r\n<li v-for=\"item in items\" v-bind:key=\"item\">\r\n  {{ item }}\r\n</li>\r\n</transition-group>\r\n</div>\r\n```\r\n```\r\nnew Vue({\r\n\tel: \"#app\",\r\n\tdata: {\r\n\t\t\titems: [1,2,3]\r\n\t  },\r\n\t  methods: {\r\n\t  \tadd() {\r\n\t  \t\tthis.items.push(0)\r\n\t  \t}\r\n\t  }\r\n})\r\n```\r\n```\r\n.group-enter,\r\n.group-leave-to {\r\n  opacity: 0;\r\n  transform: translateY(10px)\r\n}\r\n.group-enter-active,\r\n.group-leave-active {\r\n  transition: all 1s;\r\n}\r\n```\r\n代码在[这里，点击访问](https://jsfiddle.net/justforlxz/9denwmor/20/)，只实现了添加元素的过渡效果。\r\n希望本文可以帮助你理解Vue是如何处理过渡动画，本文是基于官网的知识和demo所编写的，本文只写了一部分我觉得需要掌握的基本功能，Vue的transition组件还有很多功能等待你的挖掘，[点击前往Vue官网文档](https://cn.vuejs.org/v2/guide/transitions.html)\r\n\r\n","id":"d560b3f834af2faf3284b51e5ceaa328","link":"/2019/12/08/添加Vue动画"}