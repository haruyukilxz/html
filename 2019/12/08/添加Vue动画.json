{
    "attributes": {
        "title": "添加Vue动画",
        "date": "2019-12-08T08:03:40.000Z",
        "tags": "Vue",
        "categories": "Vue"
    },
    "body": "<p>以前一直搞不懂动画是怎么做的，它怎么这么神奇，写了一点看不懂的代码，就实现了非常丰富的效果，现在做了三年Qt开发，接触到了Qt的动画类，明白了动画是怎么一会儿事，现在来看当初的css动画代码，也明白了它是如何工作的了。本文会介绍一下Vue提供的组件过渡动画模块——transitions。</p>\n<h2>概述</h2>\n<p>Vue在插入、更新和移除DOM元素时，提供了多种不同方式的应用过渡效果。包含以下工具：</p>\n<ul>\n<li>在css过渡和动画中自动应用class</li>\n<li>可以配合第三方动画css类，例如Animae.css</li>\n<li>提供钩子函数来使JS操作DOM元素</li>\n<li>可以配合使用第三方JavaScript动画库，例如Velocity.js</li>\n</ul>\n<h2>单元素/组件过渡</h2>\n<p>Vue提供了 <code>transitions</code> 的封装组件，在下面的情况中，可以给任意元素或组件添加进入和离开的过渡效果。</p>\n<ul>\n<li>条件渲染 (使用 <code>v-show</code>)</li>\n<li>按需渲染 (使用 <code>v-if</code>)</li>\n<li>动态节点</li>\n<li>组件根元素\n这是一个基本的例子：</li>\n</ul>\n<pre><code>&lt;div id=&quot;app&quot;&gt;\n    &lt;button v-on:click=&quot;show = !show&quot;&gt;\n    Toggle\n    &lt;/button&gt;\n    &lt;transitions name=&quot;fade&quot;&gt;\n        &lt;p v-if=&quot;show&quot;&gt; hello! &lt;/p&gt;\n    &lt;transitions&gt;\n&lt;div&gt;\n</code></pre>\n<pre><code>new Vue({\n    el: &quot;#app&quot;,\n    data: {\n        show: false\n    }\n});\n</code></pre>\n<p>在head中添加style：</p>\n<pre><code>.fade-enter-active,\n.fade-leave-active {\n  transition: opacity .5s;\n}\n.fade-enter,\n.fade-leave-to {\n  opacity: 0;\n}\n</code></pre>\n<p>这里有三点需要注意一下，需要动画的元素需要使用transitions节包裹起来，transitions需要一个name，css中需要使用固定的拼写来应用动画，入场动画和离场动画的状态是一致的，所以写在了一组里。\n当插入和删除包含在 <code>transitions</code> 组件中的元素时，Vue会做以下的事情：</p>\n<ul>\n<li>自动嗅探组件是否应用了css的过渡或动画，如果有，则在恰当的实际添加/删除css类名。</li>\n<li>如果 <code>transitions</code> 组件提供了钩子函数，Vue会在恰当的时机调用钩子函数。</li>\n<li>如果没有找到css过渡和动画，也没有找到钩子函数，则DOM的操作(插入和删除)在下一帧中立即执行。(注意是指浏览器的逐帧动画，而不是Vue的nextTick机制)</li>\n</ul>\n<h3>过渡的类名</h3>\n<p>Vue的过渡动画一共有6个状态：</p>\n<ol>\n<li><code>v-enter</code>: 定义进入过渡的开始状态，在元素被插入之前生效，待元素插入以后被移除。</li>\n<li><code>v-enter-active</code>: 定义进入过渡生效时的状态，在整个进入过渡的阶段中应用，在元素插入之前生效，在过渡/动画完成后被移除。这个类可以定义过渡时间、延迟和动画曲线。</li>\n<li><code>v-enter-to</code>: <strong>在2.1.8版本及以上</strong> 定义进入过渡的结束状态，在元素被插入的下一帧生效(与此同时 <code>v-enter</code> 被移除)，在过渡/动画完成后移除。</li>\n<li><code>v-leave</code>: 定义离开过渡的开始状态，在离开过渡被触发时立即生效，下一帧被移除。</li>\n<li><code>v-leave-active</code>: 定义离开过渡生效时的状态，在整个离开过渡的阶段中应用，在离开过渡触发时立即生效，在过渡/动画完成后立即被移除。这个类可以定义离开过渡的过程时间、延迟和动画曲线。</li>\n<li><code>v-leave-to</code>: <strong>在2.1。8版本及以上</strong> 定义离开过渡的结束状态，在离开过渡被触发之后的下一帧被移除(与此同时<code>v-leave</code>也被删除)\n，在过渡/动画完成之后移除。\n<img src=\"https://cn.vuejs.org/images/transition.png\" alt=\"transitions\">\n可以看出一共两组动画，进入和离开的active。并且分别有两个状态，enter和enter-to，这6个状态控制了入场动画和离场动画。(吐槽一下Qt的动画系统，定义一个QAnimation只能做半场动画，想做到Vue这样的要定义两组，或者反向播放)\n对于那些正在过渡中切换的类名来说，如果使用了没有<code>name</code>属性的<code>transition</code>，Vue会使用v-当做默认前缀。为了避免多组动画冲突，我个人建议每一个<code>transition</code>组件都提供name属性。</li>\n</ol>\n<h3>JavaScript钩子函数</h3>\n<p><code>transition</code>也提供了钩子函数，使我们可以通过JavaScript来控制DOM元素，一共也包含了8个函数：</p>\n<ol>\n<li>beforeEnter</li>\n<li>enter</li>\n<li>afterEnter</li>\n<li>enterCancelled</li>\n<li>beforeLeave</li>\n<li>leave</li>\n<li>afterLeave</li>\n<li>leaveCancelled\n和css上要求的命名保持一致，只是增加了两个取消的接口，当动画被取消的时候被调用。\n这些钩子函数可以结合CSS <code>transition/animations</code> 使用，也可以单独使用。</li>\n</ol>\n<blockquote>\n<p>当只使用JavaScript过渡的时候，必须在 <strong>enter</strong> 和 <strong>leave</strong> 显式调用<code>done()</code>进行回调，否则他们将被同步调用，过渡会立即完成。\n推荐对于仅使用JavaScript过渡的元素添加<code>v-bind:css=&quot;false&quot;</code>，Vue会跳过CSS的检测，这也可以避免过渡过程中css的影响。</p>\n</blockquote>\n<h2>列表元素的过渡</h2>\n<p>以上我分享的都是单元素/组件的过渡，那么问题来了，列表这种通过v-for创建的元素该如何增加过渡效果呢？\nVue提供了<code>&lt;transition-group&gt;</code>组件，在深入了解之前，需要先介绍一下这个组件的一些特点：</p>\n<ul>\n<li>不同于<code>&lt;transition&gt;</code>，<code>&lt;transition-group&gt;</code>会创建一个真实的DOM元素，默认是&lt;span&gt;，可以通过tag属性切换为其他元素。</li>\n<li>过渡模式不再可用，因为我们不再相互切换特有的元素</li>\n<li>内部元素总是需要提供唯一的key值来进行区分</li>\n<li>CSS过渡将会应用在内部的元素中，而不是这个组/容器本身</li>\n</ul>\n<h3>列表的进入/离开过渡</h3>\n<pre><code>&lt;div id=&quot;app&quot;&gt;\n&lt;button v-on:click=&quot;add&quot;&gt;add&lt;/button&gt;\n&lt;button v-on:click=&quot;remove&quot;&gt;remove&lt;/button&gt;\n&lt;transition-group name=&quot;group&quot; tag=&quot;ul&quot;&gt;\n&lt;li v-for=&quot;item in items&quot; v-bind:key=&quot;item&quot;&gt;\n  {{ item }}\n&lt;/li&gt;\n&lt;/transition-group&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code>new Vue({\n\tel: &quot;#app&quot;,\n\tdata: {\n\t\t\titems: [1,2,3]\n\t  },\n\t  methods: {\n\t  \tadd() {\n\t  \t\tthis.items.push(0)\n\t  \t}\n\t  }\n})\n</code></pre>\n<pre><code>.group-enter,\n.group-leave-to {\n  opacity: 0;\n  transform: translateY(10px)\n}\n.group-enter-active,\n.group-leave-active {\n  transition: all 1s;\n}\n</code></pre>\n<p>代码在<a href=\"https://jsfiddle.net/justforlxz/9denwmor/20/\">这里，点击访问</a>，只实现了添加元素的过渡效果。\n希望本文可以帮助你理解Vue是如何处理过渡动画，本文是基于官网的知识和demo所编写的，本文只写了一部分我觉得需要掌握的基本功能，Vue的transition组件还有很多功能等待你的挖掘，<a href=\"https://cn.vuejs.org/v2/guide/transitions.html\">点击前往Vue官网文档</a></p>\n",
    "id": "d560b3f834af2faf3284b51e5ceaa328",
    "link": "/2019/12/08/添加Vue动画"
}