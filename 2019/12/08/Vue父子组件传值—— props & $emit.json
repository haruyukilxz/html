{
    "attributes": {
        "title": "Vue父子组件传值 —— props & $emit",
        "date": "2019-12-08T21:08:00.000Z",
        "tags": "Vue",
        "categories": "Vue"
    },
    "body": "<p>Vue的父子组件传值比较有意思，父组件通过属性绑定，把自身的值和子组件的一个属性绑定起来，子组件通过props属性接收，该属性类型为数组，是Vue对象中比较少有的类型，data、computer、methods等方法都是对象的形式，props则是数组的形式。父组件通过v-on来监听子组件发出的事件来接收子组件的调用。在这里我是理解成子组件发送信号来通知上层，毕竟调用的是this.$emit来做到的。\n我们假设子组件名为&lt;hello&gt;，我们通过v-bind来绑定一个值给它。</p>\n<pre><code>&lt;template&gt;\n    &lt;div id=&quot;#app&quot;&gt;\n        // 通过v-bind绑定父子组件的属性\n        &lt;hello v-bind:messageFromParent=&quot;message&quot;/&gt;\n    &lt;/div&gt;\n&lt;template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nimport Hello from './Hello.vue';\nexport default Vue.extend({\n    data: {\n        message: &quot;this message from parent&quot;\n    },\n    components: {\n        &quot;hello&quot;: Hello\n    }\n});\n&lt;/script&gt;\n</code></pre>\n<p>子组件hello.vue通过props属性接收，内容是这样的：</p>\n<pre><code>&lt;template&gt;\n    &lt;div&gt;\n        {{ messageFromParent }}\n    &lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nexport default Vue.extend({\n    // 通过props数组接收\n    props: [ &quot;messageFromParent&quot; ]\n});\n&lt;/script&gt;\n</code></pre>\n<p>这里有个需要注意的地方，父组件给子组件的数据是单向的，虽然子组件也可以修改父组件传入的数据，但是会产生一个错误，并打印在终端里。\n那么我们怎么才能修改父组件的值呢？答案是<code>this.$emit</code>。\n我们给子组件绑定上v-on，来监听子组件的事件。</p>\n<pre><code>&lt;template&gt;\n    &lt;div id=&quot;#app&quot;&gt;\n        // 通过v-bind绑定父子组件的属性，通过v-on监听子组件的属性变化\n        &lt;hello v-bind:messageFromParent=&quot;message&quot; v-on:changeParentData=&quot;changeData&quot;/&gt;\n    &lt;/div&gt;\n&lt;template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nimport Hello from './Hello.vue';\nexport default Vue.extend({\n    data: {\n        message: &quot;this message from parent&quot;\n    },\n    components: {\n        &quot;hello&quot;: Hello\n    },\n    methods: {\n        changeData: function(data: string) {\n            message = data;\n        }\n    }\n});\n&lt;/script&gt;\n</code></pre>\n<p>子组件只需要发送出修改即可：</p>\n<pre><code>&lt;template&gt;\n    &lt;div&gt;\n        &lt;button v-on:click=&quot;change&quot;&gt;修改父组件数据&lt;/button&gt;\n        {{ messageFromParent }}\n    &lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nexport default Vue.extend({\n    // 通过props数组接收\n    props: [ &quot;messageFromParent&quot; ],\n    methods: {\n        change: function() {\n            // 调用this.$emit方法第一个参数是事件的名称，后面全部都是参数。\n            // this.$emit方法其实是自定义了一个事件，通过这种方式来完成子组件向父组件传递消息。\n            this.$emit(&quot;changeParentData&quot;, &quot;change data by child&quot;);\n        }\n    }\n});\n&lt;/script&gt;\n</code></pre>\n<p>以上就是Vue父子组件传值的一种常用方法，适用于相邻组件的，如果隔代了，那么这种方式就不好用了，中间路过的组件都需要转发这个事件，处理这种情况就需要使用<code>provide/ inject</code>了，不过那就是另一篇文章啦。</p>\n",
    "id": "989a5930e5b352224e1138b2a2c7bc00",
    "link": "/2019/12/08/Vue父子组件传值——props&$emit"
}