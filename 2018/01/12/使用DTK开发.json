{
    "attributes": {
        "title": "使用DTK开发",
        "date": "2018-01-12T11:05:26.000Z",
        "tags": "Linux DTK"
    },
    "body": "<p><strong>在阅读本篇文章之前，你需要掌握基本的Qt/C++开发知识。</strong></p>\n<blockquote>\n<p><strong>注意：本篇文章基于Deepin平台，其他平台请自行补充依赖关系。</strong>\n先安装DTK的依赖关系。</p>\n</blockquote>\n<pre><code>sudo apt install libdtkwidget2 libdtkcore2\n</code></pre>\n<p>新建Qt项目，编辑pro文件，添加项目依赖。</p>\n<pre><code>CONFIG += c++14 link_pkgconfig\nPKGCONFIG += dtkwidget\n</code></pre>\n<p>DTK目前有两个组件，一个是提供库功能的core，一个是提供控件的widget。\n修改main.cpp,删除QApplication的相关内容，改为DApplication。</p>\n<blockquote>\n<p>注意： 使用DTK的组件，需要使用DTK的宏,根据使用的文件来选择对应的宏。</p>\n</blockquote>\n<pre><code>DWIDGET_USE_NAMESPACE\nDCORE_USE_NAMESPACE\n</code></pre>\n<p>DTK使用了deepin自己的qt插件，需要在DApplication前调用。</p>\n<pre><code>    DApplication::loadDXcbPlugin();\n    DApplication app(argc, argv);\n</code></pre>\n<p>DApplication中提供了很多方法来设置程序的各种信息，具体请看头文件的定义。\n主窗口由DMainWindow提供，新建类，然后添加DMainWindow的头文件和DTKWIDGET的宏。</p>\n<pre><code>#include &lt;DMainWindow&gt;\nDWIDGET_USE_NAMESPACE\n</code></pre>\n<p>然后修改继承关系，改为继承DMainWindow。DMainWindow提供了一些我们封装的方法。目前为止，该程序的界面已经符合Deepin程序的风格了，我们封装了一些其他控件，使其样式符合我们的风格，如果要在其他Qt程序中使用，也是同样的步骤，载入Qt插件，添加对应的头文件和DTK的宏。</p>\n",
    "id": "02cc5d121a7d631cc7c19bb87da53884",
    "link": "/2018/01/12/使用DTK开发"
}