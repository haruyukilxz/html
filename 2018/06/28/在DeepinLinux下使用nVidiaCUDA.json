{
    "attributes": {
        "title": "在DeepinLinux下使用nVidia CUDA",
        "date": "2018-06-28T03:21:50.000Z",
        "tags": [
            "Linux",
            "nVidia Cuda"
        ]
    },
    "body": "<p>CUDA（Compute Unified Device Architecture，统一计算架构）是由NVIDIA所推出的一种集成技术，是该公司对于GPGPU的正式名称。通过这个技术，用户可利用NVIDIA的GeForce 8以后的GPU和较新的Quadro GPU进行计算。亦是首次可以利用GPU作为C-编译器的开发环境。NVIDIA营销的时候，往往将编译器与架构混合推广，造成混乱。实际上，CUDA可以兼容OpenCL或者自家的C-编译器。无论是CUDA C-语言或是OpenCL，指令最终都会被驱动程序转换成PTX代码，交由显示核心计算。\n在论坛上看到有些用户希望在deepin下使用CUDA，但是他们采取的做法往往是手动下载nvidia的二进制文件，直接进行安装。\n但是这样会破坏一部分的glx链接，导致卸载的时候无法彻底恢复，结果就是系统因为卸载nvidia驱动而废掉，所以我推荐使用包管理器的方式安装nvidia驱动和cuda相关的东西，尽量不要手动修改。\n需要安装的很少，只有五个包，不过会依赖很多nvidia的库，总量还是有一些的。</p>\n<pre><code>sudo apt install nvidia-cuda-toolkit nvidia-profiler nvidia-visual-profiler nvidia-cuda-doc nvidia-cuda-dev\n</code></pre>\n<p>nvcc是cuda的编译器，它目前只支持g++5，所以还需要安装g++5。</p>\n<pre><code>sudo apt install g++-5\n</code></pre>\n<p>然后，重启一下计算机。\n<a href=\"https://bingliu221.gitbooks.io/learn-cuda-the-simple-way/content/chapter2.html/\">这里有个小栗子，可以用来测试cuda是否能够成功编译和运行</a>\n<strong>将以下代码保存为 main.cu</strong></p>\n<pre><code>#include &lt;stdio.h&gt;\n__global__ void vector_add(const int *a, const int *b, int *c) {\n    *c = *a + *b;\n}\nint main(void) {\n    const int a = 2, b = 5;\n    int c = 0;\n    int *dev_a, *dev_b, *dev_c;\n    cudaMalloc((void **)&amp;dev_a, sizeof(int));\n    cudaMalloc((void **)&amp;dev_b, sizeof(int));\n    cudaMalloc((void **)&amp;dev_c, sizeof(int));\n    cudaMemcpy(dev_a, &amp;a, sizeof(int), cudaMemcpyHostToDevice);\n    cudaMemcpy(dev_b, &amp;b, sizeof(int), cudaMemcpyHostToDevice);\n    vector_add&lt;&lt;&lt;1, 1&gt;&gt;&gt;(dev_a, dev_b, dev_c);\n    cudaMemcpy(&amp;c, dev_c, sizeof(int), cudaMemcpyDeviceToHost);\n    printf(&quot;%d + %d = %d, Is that right?\\n&quot;, a, b, c);\n    cudaFree(dev_a);\n    cudaFree(dev_b);\n    cudaFree(dev_c);\n    return 0;\n}\n</code></pre>\n<p>编译:</p>\n<pre><code>nvcc main.cu\n</code></pre>\n<p>运行:</p>\n<pre><code>./a.out\n</code></pre>\n<p>如果一切顺利，在编译的时候就不会有报错，不过在我的环境下nvcc会有架构被弃用的警告，本着只要不error就算没事的原则，我们无视这条警告即可。\n输出结果:</p>\n<pre><code>2 + 5 = 0, Is that right?\n</code></pre>\n",
    "id": "cc32bb7b6f83442bccb451fb05256a0d",
    "link": "/2018/06/28/在DeepinLinux下使用nVidiaCUDA"
}