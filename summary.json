[
    {
        "attributes": {
            "layout": "post",
            "title": "aria2配置",
            "subtitle": "以前总是忘了aria2的配置",
            "date": "2016-05-25 23:56",
            "author": "kirigaya",
            "header-img": "home-bg.jpg",
            "tags": [
                "教程"
            ]
        },
        "body": "<p>&lt;p&gt;安装好aria2，然后执行一下内容\n$ sudo nano /etc/systemd/user/aria2.service&lt;br&gt;\n[Unit]\nDescription=Aria2 Service\nAfter=network.target\n[Service]\nExecStart=/usr/bin/aria2c --enable-rpc --rpc-listen-all=true   --rpc-secret=secret  --rpc-allow-origin-all  --conf-path=/home/用户名字/.config/aria2/aria2.conf  --input-file /home/用户名字/.config/aria2/session.lock --disk-cache=100M --max-overall-download-limit=0  --split=10 --max-connection-per-server=10 --max-concurrent-downloads=4   --dir=/home/用户名字/Downloads/\n[Install]\nWantedBy=default.target\n&lt;!--more--&gt;&lt;/p&gt;\n&lt;h1&gt;注意&lt;/h1&gt;\n&lt;p&gt;以上内容需要把用户名字更改成自己的\n在用户目录新建三个文件\ntouch ~/.config/aria2.conf&lt;br&gt;\ntouch ~/.config/aria2.session&lt;br&gt;\ntouch ~/.config/session.lock\n~/.config/aria2.conf 里面需要填写以下内容，其他两个文件保持空。\ndir=下载目录【需要自行修改】\nenable-rpc=true\n启动服务&lt;br&gt;\nsystemctl --user enable aria2\nsystemctl --user start aria\n浏览器打开：&lt;a href=&quot;http://yaaw.qiniudn.com/&quot; title=&quot;aria2&quot;&gt;http://yaaw.qiniudn.com/&lt;/a&gt;\n将服务器地址改成\nhttp://token:secret@127.0.0.1:6800/jsonrpc\n然后应该页面的右上角就显示网速了。&lt;/p&gt;</p>\n",
        "id": "4ea9e92653417fe234dfa3b765de1114",
        "link": "/2016/05/25/aria2配置"
    },
    {
        "attributes": {
            "title": "JavaScript建造者模式",
            "date": "2020-02-01T20:52:58.000Z",
            "tags": "Javascript",
            "categories": "设计模式"
        },
        "body": "<p>&lt;p&gt;建造者模式就是指将类的构造和其表示分离开来，调用者可以通过不同的构建过程创造出不同表示的对象。主要解决在软件系统中，有时候面临着&quot;一个复杂对象&quot;的创建工作，由于需求的变化，这个复杂对象的某些部分经常面临着剧烈的变化，一些基本部件不会变。所以需要将变与不变分离。与抽象工厂的区别：在建造者模式里，有个指导者(Director)，由指导者来管理建造者，用户是与指导者联系的，指导者联系建造者最后得到产品。即建造者模式可以强制实行一种分步骤进行的建造过程。&lt;/p&gt;\n&lt;h2&gt;建造者模式四要素&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;产品类Product: 一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有较多的代码。&lt;/li&gt;\n&lt;li&gt;抽象建造者类Builder: 将建造的具体过程交予它的子类来实现。&lt;/li&gt;\n&lt;li&gt;建造者类ConcreateBuilder: 组件产品，返回组件好的产品&lt;/li&gt;\n&lt;li&gt;指导类Director: 负责调用适当的建造者来组件产品，指导类一般不与产品类发生依赖关系，与指导类直接交互的是建造者类。&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;建造者模式的优点&lt;/h2&gt;\n&lt;p&gt;建造者模式的封装很好，使用建造者模式可以进行有效的封装变化，在使用建造者模式的场景中，产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指导者类中对整体可以取得比较好的稳定性。\n建造者类也很方便扩展，如果有新的需求，只需要实现一个新的建造者类即可。\n产品类 product.ts&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;class Product {\nprivate _name: String;\npublic name(): String {\nreturn this._name;\n}\npublic setName(name: String) {\nthis._name = name;\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;抽象建造类 builder.ts&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;interface Builder {\n_product: Product;\nsetName(name: String): Product;\nbuild(): Product;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;建造类 concreatebuilder.ts&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;class ConcreateBuilder implements Builder {\n_product: Product = new Product;\npublic setName(name: String): Product {\nthis._product.setName(name);\nreturn this._product;\n}\npublic build(): Product {\nreturn this._product;\n}\n}\nclass HelloworldBuilder extends ConcreateBuilder {\npublic build(): Product {\nthis._product.setName(&quot;hello world!&quot;);\nreturn this._product;\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;指导类 director.ts&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;class Director {\nprivate _defaultBuilder: ConcreateBuilder = new ConcreateBuilder;\nprivate _helloworldBuilder: HelloworldBuilder = new HelloworldBuilder;\npublic buildForDefault(): Product  {\nreturn this._defaultBuilder.build();\n}\npublic buildForHelloworld(): Product {\nreturn this._helloworldBuilder.build();\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;测试运行:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;let director = new Director();\nconsole.log(director.buildForDefault().name());\nconsole.log(director.buildForHelloworld().name());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;执行结果&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;undefined\nhello world!\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;通过不同的builder就可以构建不同的对象出来，当需求变动的时候，我们只需要扩展出不同的Builder和Director就可以满足。&lt;/p&gt;</p>\n",
        "id": "7c122ec6349a9ff77f023a9003000f3e",
        "link": "/2020/02/01/JavaScript建造者模式"
    },
    {
        "attributes": {
            "title": "浅谈Javascript构造器模式",
            "date": "2020-01-31T23:15:23.000Z",
            "tags": "Javascript",
            "categories": "设计模式"
        },
        "body": "<p>&lt;p&gt;为了简化操作，JavaScript提供了new关键字。new关键字用于创建一个用户定义类型的实例，或者具有构造函数的内置对象的实例。\n每当我们在一个函数调用前使用new关键字，该函数便会以一种特殊模式——构造模式来运行，在此模式中，JavaScript可以自动完成一些操作。基本上它是指解释器在你的代码中嵌入几行操作代码。\n在JavaScript中，构造函数通常是认为用来实现实例的，但是JavaScript中没有类的概念，但是有特殊的构造函数，通过new关键字来调用定义的构造函数，你可以告诉JavaScript你需要创建一个新对象，并且新对象的成员声明都是构造函数里定义的。在构造函数内部，this引用的是新创建的对象。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;function People(name: String, age: Number) {\nthis.name = name;\nthis.age = age;\nthis.output = function() {\nreturn this.name + &quot;已经&quot; + this.age + &quot;岁了&quot;;\n}\n}\nlet people = new People(&quot;justforlxz&quot;, 24);\nconsole.log(people.output());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上面是个很简单的构造函数模式，我们从字面上this是people对象，但是其实并不是这样的，new运算符帮助我们生成了this的初始化代码。\nnew运算符一共做了三件事：&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;创建一个空对象&lt;/li&gt;\n&lt;li&gt;将空对象的原型赋值为构造器函数的原型&lt;/li&gt;\n&lt;li&gt;更改构造器函数内部的this，将其指向新创建的对象&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre&gt;&lt;code&gt;let tmp = new Object();\ntmp.<strong>proto</strong> = People.prototype;\nPeople.call(tmp);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;最后会经过一个判断，如果构造器函数设置了返回值，并且返回值是一个Object类型的话，就直接返回该Object，否则就会返回新创建的空对象。\n总结一下： JavaScript没有类的概念，但是为了实现OOP，就通过new关键字实现对函数进行插入代码来实现对象实例的初始化。构造器模式就是通过一个方法来new出一个对象，这个操作就叫构造器模式。&lt;/p&gt;</p>\n",
        "id": "2cdf4183246d7070b22a95cfcea9c02d",
        "link": "/2020/01/31/浅谈Javascript构造器模式"
    },
    {
        "attributes": {
            "title": "2019 Review",
            "date": "2020-01-01T21:25:54.000Z",
            "tags": 2019,
            "categories": "年度总结"
        },
        "body": "<p>&lt;p&gt;上一次写年终总结还是18年回家的动车上，可惜写了一半没发表，觉得一年了没有什么能够回想起来的，就又删除了。今年不同了，今年有好多想说的。&lt;/p&gt;\n&lt;h2&gt;脱单&lt;/h2&gt;\n&lt;p&gt;&lt;strong&gt;第一件重要的事是我遇到了生命中的她。&lt;/strong&gt;\n自从工作以后，我妈天天念叨我的就是找对象，和我预想的没错，上学的时候盼我毕业，毕业以后盼我工作，工作以后盼我找对象结婚，找对象以后盼我赶紧生个娃让她抱。&lt;s&gt;（大家的父母应该都这样）&lt;/s&gt;&lt;/p&gt;\n&lt;h2&gt;加薪&lt;/h2&gt;\n&lt;p&gt;这件事确实也令我挺开心的，我的工资在2019年成功涨到了0.375乔(1乔等于**元  &lt;a href=&quot;https://blog.nanpuyue.com&quot;&gt;@nanpuyue&lt;/a&gt;)\n涨工资谁不高兴，我估计也就马云不高兴了，毕竟他看不上钱。&lt;/p&gt;\n&lt;h2&gt;学习&lt;/h2&gt;\n&lt;p&gt;今年看了很多C++的资料，对C++和编译器都有了更深的了解。想2016年半夜&lt;a href=&quot;https://zcc.rs&quot;&gt;@zccrs&lt;/a&gt;在家教我编译原理，到现在我可以理解一门语言从设计到实现，再到使用模板完成编译时计算，我走了快三年，这三年里我一直没停下学习的脚步，在学习各种知识，从各种编程语言到各种框架原理，到图形界面的实现。还学习了单元测试，并且&lt;a href=&quot;https://hualet.org&quot;&gt;@hualet&lt;/a&gt;大佬给我讲了单元测试是什么，以及单元测试的重要性，从那以后我才算真正的了解单元测试的重要性，也使我在写代码的时候注重通过单元测试来保障我的功能。\n去年对深度学习进行了一波学习，今年对Web工程化和TypeScript也学习了一下，也算是对目前最热门的两个领域进行了一定的了解。&lt;/p&gt;\n&lt;h2&gt;读书&lt;/h2&gt;\n&lt;p&gt;去年买的TensorFlow看了没一半，今年倒是没买书，开始在微信读书上读书，利用一些空余时间读一点，我也推荐大家多利用空闲时间读读书，少刷抖音和bilibili。&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;《TensorFlow》未读完&lt;/li&gt;\n&lt;li&gt;《TypeScript实战》正在读&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;博客&lt;/h2&gt;\n&lt;p&gt;2019年我一共水了15篇文章。&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;12-26 &lt;a href=&quot;https://blog.justforlxz.com/2019/12/26/use-serial-port-debug-deepin-on-archlinux/&quot;&gt;在ArchLinux通过串口调试VMware虚拟机中的deepin&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;12-26 &lt;a href=&quot;https://blog.justforlxz.com/2019/12/26/cpp-sort/&quot;&gt;使用标准库std::sort函数进行排序&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;12-09 &lt;a href=&quot;https://blog.justforlxz.com/2019/12/09/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%9D%91%E7%88%B9%E7%9A%84usb%E7%BD%91%E5%8D%A1/&quot;&gt;记录一个坑爹的usb网卡&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;12-09 &lt;a href=&quot;https://blog.justforlxz.com/2019/12/09/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%AA%E5%9D%91%E7%88%B9%E7%9A%84usb%E7%BD%91%E5%8D%A1/&quot;&gt;使用github actions自动部署hexo文章到html仓库&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;12-08 &lt;a href=&quot;https://blog.justforlxz.com/2019/12/08/vue-component-props/&quot;&gt;Vue父子组件传值 —— props &amp; $emit&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;12-08 &lt;a href=&quot;https://blog.justforlxz.com/2019/12/08/vue-transitions/&quot;&gt;添加Vue动画&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;11-25 &lt;a href=&quot;https://blog.justforlxz.com/2019/11/25/%E4%BD%BF%E7%94%A8webpack-dev-server%E6%9D%A5%E7%9B%91%E5%90%AC%E9%A1%B9%E7%9B%AE%E5%8F%98%E5%8C%96/&quot;&gt;使用webpack-dev-server来监听项目变化&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;10-24 &lt;a href=&quot;https://blog.justforlxz.com/2019/10/24/%E7%BB%99Archlinux%E5%BC%80%E5%90%AFBFQ%E5%92%8CMuQSS/&quot;&gt;给Archlinux开启BFQ和MuQSS&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;10-22 &lt;a href=&quot;https://blog.justforlxz.com/2019/10/22/%E4%BD%BF%E7%94%A8webpack%E6%89%93%E5%8C%85Vue%E5%92%8CTypeScript/&quot;&gt;使用webpack打包Vue和TypeScript&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;10-14 &lt;a href=&quot;https://blog.justforlxz.com/2019/10/14/webpack%E5%85%A5%E9%97%A8/&quot;&gt;webpack入门&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;06-16 &lt;a href=&quot;https://blog.justforlxz.com/2019/06/16/wsl2%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/&quot;&gt;wsl2的使用体验&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;06-15 &lt;a href=&quot;https://blog.justforlxz.com/2019/06/15/%E5%85%A5%E5%9D%91typescript%E4%BA%86/&quot;&gt;入坑typescript了&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;05-23 &lt;a href=&quot;https://blog.justforlxz.com/2019/05/23/CMake-CTests-for-dde-control-center/&quot;&gt;CMake CTests for dde-control-center&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;02-21 &lt;a href=&quot;https://blog.justforlxz.com/2019/02/21/how-to-use-LNMP-on-deepin/&quot;&gt;如何在Deepin上使用LNMP&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;02-23 &lt;a href=&quot;https://blog.justforlxz.com/2019/01/23/fuck-taobao/&quot;&gt;解决用了xposed后淘宝闪退&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;2019\n├── 01\n│   └── 23\n│       └── fuck-taobao\n│           └── index.html\n├── 02\n│   └── 21\n│       └── how-to-use-LNMP-on-deepin\n│           └── index.html\n├── 05\n│   └── 23\n│       └── CMake-CTests-for-dde-control-center\n│           └── index.html\n├── 06\n│   ├── 15\n│   │   └── 入坑typescript了\n│   │       ├── 深度录屏_选择区域_20190615202044.gif\n│   │       └── index.html\n│   └── 16\n│       └── wsl2的使用体验\n│           ├── index.html\n│           ├── Snipaste_2019-06-16_21-49-15.png\n│           └── Snipaste_2019-06-16_21-52-42.png\n├── 10\n│   ├── 14\n│   │   └── webpack入门\n│   │       └── index.html\n│   ├── 22\n│   │   └── 使用webpack打包Vue和TypeScript\n│   │       └── index.html\n│   └── 24\n│       └── 给Archlinux开启BFQ和MuQSS\n│           └── index.html\n├── 11\n│   └── 25\n│       └── 使用webpack-dev-server来监听项目变化\n│           └── index.html\n└── 12\n├── 08\n│   ├── vue-component-props\n│   │   └── index.html\n│   └── vue-transitions\n│       └── index.html\n├── 09\n│   ├── 记录一个坑爹的usb网卡\n│   │   └── index.html\n│   └── use-github-actions-to-depoly-hexo\n│       └── index.html\n└── 26\n├── cpp-sort\n│   └── index.html\n└── use-serial-port-debug-deepin-on-archlinux\n└── index.html\n34 directories, 18 files\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;科普视频&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;妈咪叔 (一个较真的理工男)\n这个名字我第一眼看到的时候，还以为是个卖母婴的，没想到居然是个搞科普的，而且内容讲的也很好，有数学、物理、化学和天文学。&lt;/li&gt;\n&lt;li&gt;李永乐老师\n以前偶尔看过老师的视频，因为一直都在热榜，所以没想到关注，后来是youtube上看到了，就点了关注，youtube上更新的和bilibili的还不是一样的，看最后结尾的时候youtube的只说youtube帐号关注，而bilibili的是bilibili，有时候还要多个平台去看。&lt;/li&gt;\n&lt;li&gt;萝王二号\n之前在科普区随便看的时候，对生物学产生了一些兴趣，萝王讲的风格我很喜欢，特别是他注重昆虫分类学(骨包皮，皮包骨啊2333)，还有一些辟谣视频。&lt;/li&gt;\n&lt;li&gt;芳斯塔夫 (鬼古)\n也使对生物学产生了一些兴趣，鬼古说以他很中二的风格带领我学习了一波古生物的相关知识(旧日支配者！！！)。&lt;/li&gt;\n&lt;li&gt;木偶君\n和鬼古一样是专门讲古生物的，不过每次结束的比较仓促，突然就结束了。&lt;/li&gt;\n&lt;li&gt;木鱼水心\n木鱼并不是今年才关注的，最开始关注是他做EVA剧场版解析，后来《木鱼说》开始做一些科普，我开始一直关注了。&lt;/li&gt;\n&lt;li&gt;宇宙视觉 (永远不要停止思考)\n一个讲天文的科普up，不过年底的时候换了配音，疑似配音出去单干了。&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;电影&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;流浪地球&lt;/li&gt;\n&lt;li&gt;阿丽塔：战斗天使&lt;/li&gt;\n&lt;li&gt;战狼2&lt;/li&gt;\n&lt;li&gt;惊奇队长&lt;/li&gt;\n&lt;li&gt;复仇者联盟4&lt;/li&gt;\n&lt;li&gt;何以为家&lt;/li&gt;\n&lt;li&gt;速度与激情： 特别行动&lt;/li&gt;\n&lt;li&gt;叶问4&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;纪录片&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;混沌：数学探秘&lt;/li&gt;\n&lt;li&gt;维度：数学漫步&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h2&gt;动漫&lt;/h2&gt;\n&lt;ol&gt;\n&lt;li&gt;刀剑神域&lt;/li&gt;\n&lt;li&gt;紫罗兰永恒花园&lt;/li&gt;\n&lt;li&gt;darling in the franxx&lt;/li&gt;\n&lt;li&gt;心理测量者&lt;/li&gt;\n&lt;li&gt;进击的巨人第三季&lt;/li&gt;\n&lt;li&gt;五等分的新娘&lt;/li&gt;\n&lt;li&gt;citrus～柑橘味香气～&lt;/li&gt;\n&lt;/ol&gt;</p>\n",
        "id": "649cab2dc98e80ce6ff9f6dd8516c194",
        "link": "/2020/01/01/2019Review"
    },
    {
        "attributes": {
            "title": "使用伪元素创建一个圆点",
            "date": "2020-01-01T11:11:12.000Z",
            "tags": "CSS",
            "categories": "Web"
        },
        "body": "<p>&lt;p&gt;我最早接触到CSS中的伪元素是在一次写背景模糊的时候，CSS中的blur会模糊下面所有的元素，但是可以通过伪元素在before中先模糊，这样下层是没有任何元素的，自然也不会有元素被模糊。\n伪元素就如同它的名字一样，是假的元素，只是CSS引擎在排版的时候创建出来的，在DOM树中是不存在的，所以javascript是没办法操作伪元素的。伪元素分为before和after，可以在元素的前面或者后面创建一个假的元素，伪元素选择器的标志符号是&lt;code&gt;::&lt;/code&gt;。&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;div::before&lt;/code&gt; 在div元素的前面创建一个元素，配合content属性一起使用。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;div::after&lt;/code&gt; 在div元素的后面创建一个元素，配合content属性一起使用。\n&lt;img src=&quot;16-57-30%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&quot; alt=&quot;1657&quot;&gt;\n使用伪元素选择器需要注意一点的是，必须使用content属性，否则将不起任何作用。\n伪元素选择器生效以后，可以在DOM中看到::before或者::after，这里提供一个例子。\nhtml部分：&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre&gt;&lt;code&gt;&lt;body&gt;\n&lt;div&gt;\nText\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;css部分：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;div::before {\ncontent: &quot;This is before Text, &quot;;\n}\ndiv::after {\ncontent: &quot;, This is after Text.&quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;此时页面上会看到输出这么一句话，&lt;code&gt;This  is before Text, Text , This is after Text.&lt;/code&gt;，并且使用鼠标只能选择到最中间的Text文本。\n&lt;img src=&quot;16-57-16%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png&quot; alt=&quot;1657&quot;&gt;\n代码可以点击&lt;a href=&quot;https://jsfiddle.net/justforlxz/shg21kvb/18/&quot;&gt;这里&lt;/a&gt;查看。\n今天写这篇文章呢，是因为今天我在实现hexo的Next主题，看到它在列表中使用after创建了一个小圆点，并且我遇到了一个问题，所以写这篇文章记录一下。\nNext用的是浮动布局来实现的，而我决定flex一把梭，整体布局是垂直的flex，首页、分类等列表内部是用水平的inline-flex实现的，最左边是图标，来自fortawesome，中间的文本使用span包裹一下，实现左对齐，然后通过伪元素在最右边创建一个小圆点，设置a元素的宽度为100%，就可以实现圆点在最右边。\n坑就是在这里遇到的，如果a元素的宽度设置为100%，伪元素创建的小圆点就不能完全显示，少1像素或者多1像素就可以完全显示。最终的解决办法是给小圆点的周围增加了1像素的padding解决了，但是原因位置，谁看到这篇文章并且恰好知道原因的，还请帮忙评论回复一下。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;div id=&quot;site-nav&quot;&gt;\n&lt;ul&gt;\n&lt;li v-for=&quot;item in items&quot; v-bind:key=&quot;item.title&quot;&gt;\n&lt;a v-bind:href=&quot;item.link&quot;&gt;\n&lt;span id=&quot;menu-left&quot; v-bind:class=&quot;item.class&quot;&gt;&lt;/span&gt;\n&lt;span id=&quot;menu-text&quot;&gt;\n{{ item.title }}\n&lt;/span&gt;\n&lt;/a&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;#site-nav {\nbackground: white;\npadding: 20px 0;\n}\nul {\nmargin: 0;\npadding: 0 0;\n}\n#site-nav li {\nlist-style-type: none;\n}\n#site-nav li a {\npadding: 5px 0px;\ntext-align: left;\nline-height: inherit;\ntransition-property: background-color;\ntransition-duration: 0.2s;\ntransition-timing-function: ease-in-out;\ntransition-delay: 0s;\ndisplay: flex;\njustify-content: space-between;\nalign-items: center;\ntext-decoration: none;\nfont-size: 13px;\nborder-bottom: 1px solid transparent;\ncolor: #555;\n}\n#site-nav li a:hover {\nbackground: #f9f9f9;\n}\n#menu-left {\nalign-content: center;\nmargin-left: 10px;\n}\n#menu-text {\nwidth: 100%;\nmargin-left: 10px;\n}\n#site-nav li a::after {\ncontent: ' ';\nbackground: #bbb;\nwidth: 6px;\nheight: 6px;\nborder-radius: 50%;\nmargin: 0 10px 0 0;\nmin-width: 6px;\nmin-height: 6px;\nmax-height: 6px;\nmax-width: 6px;\ndisplay: block;\nbox-sizing: border-box;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;但我提取了基本结构和css，demo是能够正常显示小圆点的，但是自己的Vue却不能正常显示，后来发现是display写成块级元素用的flex了，改成inline-flex就能正常显示了，但是在调整宽度的时候，就发现了上面的问题，它又不正常显示了，实在解决不了了，就用padding处理了。\n参考资料： &lt;a href=&quot;https://github.com/qianguyihao/Web/blob/master/02-CSS%E5%9F%BA%E7%A1%80/10-CSS3%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%A6%E8%A7%A3.md&quot;&gt;千古壹号&lt;/a&gt;&lt;/p&gt;</p>\n",
        "id": "906dd5a14cdcd987ef633f675acde117",
        "link": "/2020/01/01/使用伪元素创建一个圆点"
    },
    {
        "attributes": {
            "title": "在ArchLinux通过串口调试VMware虚拟机中的deepin",
            "s": "use-serial-port-debug-deepin-on-archlinux",
            "date": "2019-12-26T17:26:13.000Z",
            "tags": "Linux",
            "categories": "Linux"
        },
        "body": "<p>&lt;p&gt;电脑主板上的接口：进行串行传输的接口，它一次只能传输1Bit。串行端口可以用于连接外置调制解调器、绘图仪或串行打印机。它也可以控制台连接的方式连接网络设备，例如路由器和交换机，主要用来配置它们。消费性电子已经由USB取代串列接口；但在非消费性用途，如网络设备等，串列接口仍是主要的传输控制方式。\n首先给虚拟机分配一个串口设备，选择Settings-&gt;Add-&gt;Serial Port。分配好串口设备以后，我们需要选择一个串口设备的调试方式，一个是将输出转向一个文件，或者是通过socket。\n如果只是查看方式，选择outpu file即可。如果需要调试，则可以通过socket方式来进行。\nsocket方式需要给一个固定的路径分配/tmp/&lt;socket&gt;，我调试的时候给出的是/tmp/vhost，From选择Server，To选择An Application。From的意思是信息从哪里来，信息是虚拟机里的系统发出的，所以这里选择的是Server，如果是反向操作，需要选择Client。To也是有两个选项，第一个是An Virtual Machine，第二个是An Application。用于把消息发送给另外的虚拟机，或者是宿主机的一个应用程序。\n安装minicom包，用于进行调试，minicom这个东西，不是太好用，退出方式是先按Ctrl+A，然后按q，有时候还不一定管用，不知道是没接受到，还是按错了。\n先minicom -s 进行初始化，选择&lt;code&gt;Serial port setup&lt;/code&gt;，按A编辑&lt;code&gt;Serial Device&lt;/code&gt;，这里需要注意一下，通过socket进行调试，需要使用&lt;code&gt;unix#&lt;/code&gt;前缀，然后加上在虚拟机里写的路径 &lt;code&gt;unix#/tmp/vhost&lt;/code&gt;。然后保存，选择Exit，退出以后其实重启minicom，就进入minicom的调试界面了，然后此时开启虚拟机，给内核添加一个console=ttyS0的参数，就看到minicom显示输出的信息了，还可以交互。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;[    3.855725] [drm:vmw_fb_setcolreg [vmwgfx]] <em>ERROR</em> Bad regno 254.\n[    3.857125] [drm:vmw_fb_setcolreg [vmwgfx]] <em>ERROR</em> Bad regno 255.\ndeepin Login:\nCTRL-A Z for help | unix-socket | NOR | Minicom 2.7.1 | VT102 | Offline | unix#/tmp/vhost\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;此时就可以交互了，用法和tty一样，最后一行是minicom的输出，可以看到CTRL-A Z可以看help，minicom的版本，和访问的串口socket。&lt;/p&gt;</p>\n",
        "id": "dc00fbaae4e7ffb1fea884b9bc3bee21",
        "link": "/2019/12/26/在ArchLinux通过串口调试VMware虚拟机中的deepin"
    },
    {
        "attributes": {
            "title": "使用标准库std::sort函数进行排序",
            "s": "cpp-sort",
            "date": "2019-12-26T17:24:23.000Z",
            "tags": null,
            "categories": null
        },
        "body": "<p>&lt;p&gt;std的sort方法接受两个迭代器begin和end。通过迭代器来抽象元素的访问，隐藏内部实现。\n这是一个简单的例子:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;std::list&lt;int&gt; list {\n0,\n4,\n2,\n1,\n3,\n};\nstd::sort(list.begin(), list.end());\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;结果就是list被排序了，至于使用了什么排序算法，我们并不需要关心。实际上标准库会通过元素的数量来决定使用什么算法，基于Introspective Sorting(内省式排序)。\n它是一种混合式的排序算法：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;在数据量很大时采用正常的快速排序，此时效率为O(logN)。&lt;/li&gt;\n&lt;li&gt;一旦分段后的数据量小于某个阈值，就改用插入排序，因为此时这个分段是基本有序的，这时效率可达O(N)。&lt;/li&gt;\n&lt;li&gt;在递归过程中，如果递归层次过深，分割行为有恶化倾向时，它能够自动侦测出来，使用堆排序来处理，在此情况下，使其效率维持在堆排序的O(N logN)，但这又比一开始使用堆排序好。\n默认情况下排序是升序排序，既结果从小到大，我们可以通过使用std::equal_to&lt;T&gt;、std::not_equal_to&lt;T&gt;、std::greater&lt;T&gt;、std::less&lt;T&gt;、std::greater_equal&lt;T&gt;和std::less_equal&lt;T&gt;来控制排序。\n以上是通过标准库内置的一些方式来控制排序，且适用于元素已实现了自定义比较(Compare)的要求。\n比较 (Compare) 是一些标准库设施针对用户提供的函数对象类型所期待的一组要求。\n对满足比较 (Compare) 的类型的对象运用函数调用操作的返回值，当按语境转换成 bool 时，若此类型所引入的严格弱序关系中，该调用的第一实参先于第二实参，则生成 true，否则生成 false。\n与任何二元谓词 (BinaryPredicate) 相同，不允许该表达式的求值通过解引用的迭代器调用非 const 函数。\n用人话来说就是，Compare必须提供出对比结果。\n看一个例子:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;struct Test {\nint i;\n}\nstd::list&lt;Test&gt; list {\nnew Test(2),\nnew Test(1),\nnew Test(4),\nnew Test(3),\nnew Test(5),\n};\nstd::sort(list.begin(), list.end(), [=] (const Test&amp; test1, const Test&amp; test2) -&gt; bool {\nreturn test1.i &lt; test2.i;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这个例子提供了一个Compare，通过lambda来提供自定义的对比函数，返回值必须是bool，否则将不满足对比函数的要求。\n通过以上三种方式可以看出，标准库的sort函数可以很方便的为使用者提供标准对比和自定义对比。如果元素自己已实现operator&lt;，则只需要使用标准库内置的对比函数即可，但是大部分情况其实并不会涉及到元素的排序，仅在临时情况下需要列表有序，所以我个人倾向于通过lambda提供Compare函数来完成列表的排序。\n&lt;a href=&quot;https://zh.cppreference.com/w/cpp/algorithm/sort&quot;&gt;std::sort&lt;/a&gt;\n&lt;a href=&quot;http://feihu.me/blog/2014/sgi-std-sort/&quot;&gt;知无涯之std::sort源码剖析&lt;/a&gt;&lt;/p&gt;</p>\n",
        "id": "aeda0f60ffbede15fc512bef6e84cd7c",
        "link": "/2019/12/26/使用标准库std::sort函数进行排序"
    },
    {
        "attributes": {
            "title": "记录一个坑爹的usb网卡",
            "date": "2019-12-09T19:31:04.000Z",
            "tags": "Linux",
            "categories": "Linux"
        },
        "body": "<p>&lt;p&gt;网卡型号是Realtek RTL8811CU/RTL8821CU USB Wi-Fi adapter，买来是为了让黑苹果上网的，windows下也会自动下载和安装驱动，但是linux比较难受，内核不提供这样的驱动，只能去官方拿源码搞，今天在arch上打算装一下驱动，结果遇到了很多问题。\nwiki上推荐的8821应该使用rtl88xxau-aircrack-dkms-git，但是我安装以后压根不能用，一点变化都没有，而且modprobe也没有作者给出的88XXau，无奈只得放弃。\n继续谷歌之，在&lt;a href=&quot;https://forum.mxlinux.org/viewtopic.php?f=107&amp;t=50579&quot;&gt;https://forum.mxlinux.org/viewtopic.php?f=107&amp;t=50579&lt;/a&gt;看到了别人给的方案，然后果断clone并make,然后就因为没有适配5.x的内核编译失败，这可不行，翻了一下issue，看到作者在&lt;a href=&quot;https://github.com/whitebatman2/rtl8821CU/issues/33&quot;&gt;https://github.com/whitebatman2/rtl8821CU/issues/33&lt;/a&gt;提到了一个&lt;a href=&quot;https://github.com/whitebatman2/rtl8821CU/issues/23&quot;&gt;#23&lt;/a&gt;，这标题写的够可以，&lt;code&gt;Newer version 5.4.1 (Support Linux versions from 4.4.x up to 5.4.x) &lt;/code&gt;，赶紧搞起，去源地址clone和make,成功使用上了驱动，按照作者提到的安装&lt;code&gt;usb_modeswitch&lt;/code&gt;，并切换usb模式，我成功的使用上了这个usb网卡。&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;吐槽一下，开发环境还是linux下舒服，仓库的包安装一下就可以开发了，windows下要自己写路径，mac下brew限制太死，一些库安装以后还要自己手动做些处理，一不小心就把shell的环境变量搞不行了，或者压根不能正常工作。&lt;/p&gt;\n&lt;/blockquote&gt;</p>\n",
        "id": "78eab1da8a1f118221a333b120d5a864",
        "link": "/2019/12/09/记录一个坑爹的usb网卡"
    },
    {
        "attributes": {
            "title": "使用github actions自动部署hexo文章到html仓库",
            "date": "2019-12-09T13:19:11.000Z",
            "tags": null,
            "categories": null
        },
        "body": "<p>&lt;p&gt;请先允许我大喊一声：微软牛逼！\n本文没有啥含金量，就是简单的说一下如何部署github-actions来自动生成hexo的public，并且再推送到html仓库的。\n我的博客仓库一共分为两个，blog仓库是私有的，需要通过我的私钥才能访问，html仓库是公开的，hexo生成的静态内容会被上传到这里。\n首先在package.json中添加一些命令，方便我们一键编译和提交:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;  &quot;scripts&quot;: {\n&quot;build&quot;: &quot;hexo clean &amp;&amp; hexo g&quot;,\n&quot;deploy&quot;: &quot;yarn run build &amp;&amp; hexo d&quot;,\n&quot;backup&quot;: &quot;hexo b&quot;,\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;因为CI环境需要提交代码到仓库，所以申请一个个人用的token，访问&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;https://github.com/settings/tokens&lt;/a&gt;创建一个新的，勾选上&lt;code&gt;repo&lt;/code&gt;，生成完token以后，修改一下&lt;code&gt;_config.yml&lt;/code&gt;中对deploy仓库的url，格式固定为&lt;code&gt;https://x-access-token:你的token@github.com/你的名字/仓库名.git&lt;/code&gt;,例如我这里是&lt;code&gt;https://x-access-token:xxxxxxxxxx@github.com/justforlxz/html.git&lt;/code&gt;。\n然后新家一个github actions，选择nodejs环境，我们只需要修改最后一个步骤，执行我们自己的命令即可。&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;设置git的用户名和邮箱地址&lt;/li&gt;\n&lt;li&gt;npm install -g yarn&lt;/li&gt;\n&lt;li&gt;yarn run deploy\n如果你还有一些其他步骤，可以自行扩展，比如我就有主题相关的操作，具体的内容如下:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;    - name: npm install, build, and deploy\nrun: |\ngit config --global user.email &quot;justforlxz@gmail.com&quot;\ngit config --global user.name &quot;justforlxz&quot;\ngit submodule update --init\ncd themes/next\ngit checkout dev\ncd ../../\nnpm install -g yarn\nyarn\nyarn run deploy\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后就可以愉快的自动部署了。&lt;/p&gt;</p>\n",
        "id": "24ebd17d4a71c5ccdfd73cadcf614ff1",
        "link": "/2019/12/09/使用githubactions自动部署hexo文章到html仓库"
    },
    {
        "attributes": {
            "title": "Vue父子组件传值 —— props & $emit",
            "date": "2019-12-08T21:08:00.000Z",
            "tags": "Vue",
            "categories": "Vue"
        },
        "body": "<p>&lt;p&gt;Vue的父子组件传值比较有意思，父组件通过属性绑定，把自身的值和子组件的一个属性绑定起来，子组件通过props属性接收，该属性类型为数组，是Vue对象中比较少有的类型，data、computer、methods等方法都是对象的形式，props则是数组的形式。父组件通过v-on来监听子组件发出的事件来接收子组件的调用。在这里我是理解成子组件发送信号来通知上层，毕竟调用的是this.$emit来做到的。\n我们假设子组件名为&lt;hello&gt;，我们通过v-bind来绑定一个值给它。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;template&gt;\n&lt;div id=&quot;#app&quot;&gt;\n// 通过v-bind绑定父子组件的属性\n&lt;hello v-bind:messageFromParent=&quot;message&quot;/&gt;\n&lt;/div&gt;\n&lt;template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nimport Hello from './Hello.vue';\nexport default Vue.extend({\ndata: {\nmessage: &quot;this message from parent&quot;\n},\ncomponents: {\n&quot;hello&quot;: Hello\n}\n});\n&lt;/script&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;子组件hello.vue通过props属性接收，内容是这样的：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;template&gt;\n&lt;div&gt;\n{{ messageFromParent }}\n&lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nexport default Vue.extend({\n// 通过props数组接收\nprops: [ &quot;messageFromParent&quot; ]\n});\n&lt;/script&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里有个需要注意的地方，父组件给子组件的数据是单向的，虽然子组件也可以修改父组件传入的数据，但是会产生一个错误，并打印在终端里。\n那么我们怎么才能修改父组件的值呢？答案是&lt;code&gt;this.$emit&lt;/code&gt;。\n我们给子组件绑定上v-on，来监听子组件的事件。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;template&gt;\n&lt;div id=&quot;#app&quot;&gt;\n// 通过v-bind绑定父子组件的属性，通过v-on监听子组件的属性变化\n&lt;hello v-bind:messageFromParent=&quot;message&quot; v-on:changeParentData=&quot;changeData&quot;/&gt;\n&lt;/div&gt;\n&lt;template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nimport Hello from './Hello.vue';\nexport default Vue.extend({\ndata: {\nmessage: &quot;this message from parent&quot;\n},\ncomponents: {\n&quot;hello&quot;: Hello\n},\nmethods: {\nchangeData: function(data: string) {\nmessage = data;\n}\n}\n});\n&lt;/script&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;子组件只需要发送出修改即可：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;template&gt;\n&lt;div&gt;\n&lt;button v-on:click=&quot;change&quot;&gt;修改父组件数据&lt;/button&gt;\n{{ messageFromParent }}\n&lt;/div&gt;\n&lt;/template&gt;\n&lt;script lang=&quot;ts&quot;&gt;\nimport Vue from 'vue';\nexport default Vue.extend({\n// 通过props数组接收\nprops: [ &quot;messageFromParent&quot; ],\nmethods: {\nchange: function() {\n// 调用this.$emit方法第一个参数是事件的名称，后面全部都是参数。\n// this.$emit方法其实是自定义了一个事件，通过这种方式来完成子组件向父组件传递消息。\nthis.$emit(&quot;changeParentData&quot;, &quot;change data by child&quot;);\n}\n}\n});\n&lt;/script&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;以上就是Vue父子组件传值的一种常用方法，适用于相邻组件的，如果隔代了，那么这种方式就不好用了，中间路过的组件都需要转发这个事件，处理这种情况就需要使用&lt;code&gt;provide/ inject&lt;/code&gt;了，不过那就是另一篇文章啦。&lt;/p&gt;</p>\n",
        "id": "989a5930e5b352224e1138b2a2c7bc00",
        "link": "/2019/12/08/Vue父子组件传值——props&$emit"
    },
    {
        "attributes": {
            "title": "添加Vue动画",
            "date": "2019-12-08T08:03:40.000Z",
            "tags": "Vue",
            "categories": "Vue"
        },
        "body": "<p>&lt;p&gt;以前一直搞不懂动画是怎么做的，它怎么这么神奇，写了一点看不懂的代码，就实现了非常丰富的效果，现在做了三年Qt开发，接触到了Qt的动画类，明白了动画是怎么一会儿事，现在来看当初的css动画代码，也明白了它是如何工作的了。本文会介绍一下Vue提供的组件过渡动画模块——transitions。&lt;/p&gt;\n&lt;h2&gt;概述&lt;/h2&gt;\n&lt;p&gt;Vue在插入、更新和移除DOM元素时，提供了多种不同方式的应用过渡效果。包含以下工具：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;在css过渡和动画中自动应用class&lt;/li&gt;\n&lt;li&gt;可以配合第三方动画css类，例如Animae.css&lt;/li&gt;\n&lt;li&gt;提供钩子函数来使JS操作DOM元素&lt;/li&gt;\n&lt;li&gt;可以配合使用第三方JavaScript动画库，例如Velocity.js&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;单元素/组件过渡&lt;/h2&gt;\n&lt;p&gt;Vue提供了 &lt;code&gt;transitions&lt;/code&gt; 的封装组件，在下面的情况中，可以给任意元素或组件添加进入和离开的过渡效果。&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;条件渲染 (使用 &lt;code&gt;v-show&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;按需渲染 (使用 &lt;code&gt;v-if&lt;/code&gt;)&lt;/li&gt;\n&lt;li&gt;动态节点&lt;/li&gt;\n&lt;li&gt;组件根元素\n这是一个基本的例子：&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;&lt;div id=&quot;app&quot;&gt;\n&lt;button v-on:click=&quot;show = !show&quot;&gt;\nToggle\n&lt;/button&gt;\n&lt;transitions name=&quot;fade&quot;&gt;\n&lt;p v-if=&quot;show&quot;&gt; hello! &lt;/p&gt;\n&lt;transitions&gt;\n&lt;div&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;new Vue({\nel: &quot;#app&quot;,\ndata: {\nshow: false\n}\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在head中添加style：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;.fade-enter-active,\n.fade-leave-active {\ntransition: opacity .5s;\n}\n.fade-enter,\n.fade-leave-to {\nopacity: 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里有三点需要注意一下，需要动画的元素需要使用transitions节包裹起来，transitions需要一个name，css中需要使用固定的拼写来应用动画，入场动画和离场动画的状态是一致的，所以写在了一组里。\n当插入和删除包含在 &lt;code&gt;transitions&lt;/code&gt; 组件中的元素时，Vue会做以下的事情：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;自动嗅探组件是否应用了css的过渡或动画，如果有，则在恰当的实际添加/删除css类名。&lt;/li&gt;\n&lt;li&gt;如果 &lt;code&gt;transitions&lt;/code&gt; 组件提供了钩子函数，Vue会在恰当的时机调用钩子函数。&lt;/li&gt;\n&lt;li&gt;如果没有找到css过渡和动画，也没有找到钩子函数，则DOM的操作(插入和删除)在下一帧中立即执行。(注意是指浏览器的逐帧动画，而不是Vue的nextTick机制)&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;过渡的类名&lt;/h3&gt;\n&lt;p&gt;Vue的过渡动画一共有6个状态：&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;v-enter&lt;/code&gt;: 定义进入过渡的开始状态，在元素被插入之前生效，待元素插入以后被移除。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;v-enter-active&lt;/code&gt;: 定义进入过渡生效时的状态，在整个进入过渡的阶段中应用，在元素插入之前生效，在过渡/动画完成后被移除。这个类可以定义过渡时间、延迟和动画曲线。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;v-enter-to&lt;/code&gt;: &lt;strong&gt;在2.1.8版本及以上&lt;/strong&gt; 定义进入过渡的结束状态，在元素被插入的下一帧生效(与此同时 &lt;code&gt;v-enter&lt;/code&gt; 被移除)，在过渡/动画完成后移除。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;v-leave&lt;/code&gt;: 定义离开过渡的开始状态，在离开过渡被触发时立即生效，下一帧被移除。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;v-leave-active&lt;/code&gt;: 定义离开过渡生效时的状态，在整个离开过渡的阶段中应用，在离开过渡触发时立即生效，在过渡/动画完成后立即被移除。这个类可以定义离开过渡的过程时间、延迟和动画曲线。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;v-leave-to&lt;/code&gt;: &lt;strong&gt;在2.1。8版本及以上&lt;/strong&gt; 定义离开过渡的结束状态，在离开过渡被触发之后的下一帧被移除(与此同时&lt;code&gt;v-leave&lt;/code&gt;也被删除)\n，在过渡/动画完成之后移除。\n&lt;img src=&quot;https://cn.vuejs.org/images/transition.png&quot; alt=&quot;transitions&quot;&gt;\n可以看出一共两组动画，进入和离开的active。并且分别有两个状态，enter和enter-to，这6个状态控制了入场动画和离场动画。(吐槽一下Qt的动画系统，定义一个QAnimation只能做半场动画，想做到Vue这样的要定义两组，或者反向播放)\n对于那些正在过渡中切换的类名来说，如果使用了没有&lt;code&gt;name&lt;/code&gt;属性的&lt;code&gt;transition&lt;/code&gt;，Vue会使用v-当做默认前缀。为了避免多组动画冲突，我个人建议每一个&lt;code&gt;transition&lt;/code&gt;组件都提供name属性。&lt;/li&gt;\n&lt;/ol&gt;\n&lt;h3&gt;JavaScript钩子函数&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;transition&lt;/code&gt;也提供了钩子函数，使我们可以通过JavaScript来控制DOM元素，一共也包含了8个函数：&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;beforeEnter&lt;/li&gt;\n&lt;li&gt;enter&lt;/li&gt;\n&lt;li&gt;afterEnter&lt;/li&gt;\n&lt;li&gt;enterCancelled&lt;/li&gt;\n&lt;li&gt;beforeLeave&lt;/li&gt;\n&lt;li&gt;leave&lt;/li&gt;\n&lt;li&gt;afterLeave&lt;/li&gt;\n&lt;li&gt;leaveCancelled\n和css上要求的命名保持一致，只是增加了两个取消的接口，当动画被取消的时候被调用。\n这些钩子函数可以结合CSS &lt;code&gt;transition/animations&lt;/code&gt; 使用，也可以单独使用。&lt;/li&gt;\n&lt;/ol&gt;\n&lt;blockquote&gt;\n&lt;p&gt;当只使用JavaScript过渡的时候，必须在 &lt;strong&gt;enter&lt;/strong&gt; 和 &lt;strong&gt;leave&lt;/strong&gt; 显式调用&lt;code&gt;done()&lt;/code&gt;进行回调，否则他们将被同步调用，过渡会立即完成。\n推荐对于仅使用JavaScript过渡的元素添加&lt;code&gt;v-bind:css=&quot;false&quot;&lt;/code&gt;，Vue会跳过CSS的检测，这也可以避免过渡过程中css的影响。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h2&gt;列表元素的过渡&lt;/h2&gt;\n&lt;p&gt;以上我分享的都是单元素/组件的过渡，那么问题来了，列表这种通过v-for创建的元素该如何增加过渡效果呢？\nVue提供了&lt;code&gt;&lt;transition-group&gt;&lt;/code&gt;组件，在深入了解之前，需要先介绍一下这个组件的一些特点：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;不同于&lt;code&gt;&lt;transition&gt;&lt;/code&gt;，&lt;code&gt;&lt;transition-group&gt;&lt;/code&gt;会创建一个真实的DOM元素，默认是&lt;span&gt;，可以通过tag属性切换为其他元素。&lt;/li&gt;\n&lt;li&gt;过渡模式不再可用，因为我们不再相互切换特有的元素&lt;/li&gt;\n&lt;li&gt;内部元素总是需要提供唯一的key值来进行区分&lt;/li&gt;\n&lt;li&gt;CSS过渡将会应用在内部的元素中，而不是这个组/容器本身&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;列表的进入/离开过渡&lt;/h3&gt;\n&lt;pre&gt;&lt;code&gt;&lt;div id=&quot;app&quot;&gt;\n&lt;button v-on:click=&quot;add&quot;&gt;add&lt;/button&gt;\n&lt;button v-on:click=&quot;remove&quot;&gt;remove&lt;/button&gt;\n&lt;transition-group name=&quot;group&quot; tag=&quot;ul&quot;&gt;\n&lt;li v-for=&quot;item in items&quot; v-bind:key=&quot;item&quot;&gt;\n{{ item }}\n&lt;/li&gt;\n&lt;/transition-group&gt;\n&lt;/div&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;new Vue({\nel: &quot;#app&quot;,\ndata: {\nitems: [1,2,3]\n},\nmethods: {\nadd() {\nthis.items.push(0)\n}\n}\n})\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;.group-enter,\n.group-leave-to {\nopacity: 0;\ntransform: translateY(10px)\n}\n.group-enter-active,\n.group-leave-active {\ntransition: all 1s;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;代码在&lt;a href=&quot;https://jsfiddle.net/justforlxz/9denwmor/20/&quot;&gt;这里，点击访问&lt;/a&gt;，只实现了添加元素的过渡效果。\n希望本文可以帮助你理解Vue是如何处理过渡动画，本文是基于官网的知识和demo所编写的，本文只写了一部分我觉得需要掌握的基本功能，Vue的transition组件还有很多功能等待你的挖掘，&lt;a href=&quot;https://cn.vuejs.org/v2/guide/transitions.html&quot;&gt;点击前往Vue官网文档&lt;/a&gt;&lt;/p&gt;</p>\n",
        "id": "d560b3f834af2faf3284b51e5ceaa328",
        "link": "/2019/12/08/添加Vue动画"
    },
    {
        "attributes": {
            "title": "使用webpack-dev-server来监听项目变化",
            "date": "2019-11-25T17:54:36.000Z",
            "tags": "Vue",
            "categories": "Vue"
        },
        "body": "<p>&lt;p&gt;webpack的出现方便了前端开发者，使开发和部署分成了两部分，开发者可以正常根据工程化的要求进行开发，部署时通过webpack实现代码的裁剪和优化。\n本次就介绍一个webpack的功能 &lt;code&gt;webpack-dev-server&lt;/code&gt;\n将webpack与提供实时重载的开发服务器一起使用。这仅应用于开发。\n它在后台使用了webpack-dev-middleware，它提供了对Webpack资产的快速内存访问。\nwebpack-dev-server提供了一个小型的express的http服务器，这个http服务器和client使用了websocket通讯协议，原始文件作出改动后，webpack-dev-server会实时的编译，但是最后的编译的文件并没有输出到目标文件夹。\n&lt;strong&gt;注意：启动webpack-dev-server后，在目标文件夹中是看不到编译后的文件的,编译后的文件都保存到了内存当中来加速访问。&lt;/strong&gt;&lt;/p&gt;\n&lt;h2&gt;启用webpack-dev-server&lt;/h2&gt;\n&lt;pre&gt;&lt;code&gt;npm install -D webpack-dev-server\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在webpack.config.js中添加devServer对象：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;var path = require('path');\nmodule.exports = {\n//...\ndevServer: {\ncontentBase: path.join(__dirname, 'dist'),\ncompress: true, // 开启压缩\nport: 9000 // 指定运行的端口\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后通过&lt;code&gt;npx webpack-dev-server&lt;/code&gt;启动，终端上会输出一些信息，一般我们会增加一些参数来使输出更加好看:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;webpack-dev-server --devtool eval-source-map --progress --colors --hot --inline\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上面的命令增加一个开发工具 &lt;code&gt;eval-source-map&lt;/code&gt;，开启了progress进度显示，开启了colors颜色，hot热更新和inline更新模式。上面的参数也可以添加到devServer的属性中。\n终端输出的内容如下:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;10% building 1/1 modules 0 activeℹ ｢wds｣: Project is running at http://localhost:9000/\nℹ ｢wds｣: webpack output is served from /dist/\nℹ ｢wds｣: Content not from webpack is served from /home/justforlxz/Projects/VueBlog/dist\nℹ ｢wdm｣: Hash: ff9005d9f6ffafd11cd4\nVersion: webpack 4.41.0\nTime: 2938ms\nBuilt at: 11/25/2019 6:03:50 PM\nAsset      Size  Chunks             Chunk Names\nmain.js  2.09 MiB    main  [emitted]  main\nEntrypoint main = main.js\n[0] multi (webpack)-dev-server/client?http://localhost:9000 (webpack)/hot/dev-server.js ./src/main.ts 52 bytes {main} [built]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我们就可以通过localhost:9000来访问我们的应用了。\n需要注意的是，由于我们经常把内容输出到dist目录，但是webpack运行是在项目目录的，访问webpack生成在dist目录的main.js时，需要写上相对于webpack的目录，例如dist/main.js。否则会找不到文件。\n如果遇到问题，导航到 /webpack-dev-server 路径，可以显示出文件的服务位置。 例如，http://localhost:9000/webpack-dev-server。&lt;/p&gt;\n&lt;h2&gt;配置webpack&lt;/h2&gt;\n&lt;p&gt;webpack-dev-server支持在服务内部调用中间件对数据进行处理。&lt;/p&gt;\n&lt;h3&gt;devServer.before&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;function (app, server)&lt;/code&gt;\n在服务内部的所有其他中间件之前， 提供执行自定义中间件的功能。 这可以用来配置自定义处理程序，例如：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\nbefore: function(app, server) {\napp.get('/some/path', function(req, res) {\nres.json({ custom: 'response' });\n});\n}\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;devServer.after&lt;/h3&gt;\n&lt;p&gt;同devServer.before，在服务内部的所有中间件之后，提供执行自定义中间件的功能。&lt;/p&gt;\n&lt;h3&gt;devServer.allowedHosts&lt;/h3&gt;\n&lt;p&gt;允许添加白名单服务，允许一些开发服务器访问。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\nallowedHosts: [\n'host.com',\n'subdomain.host.com',\n'subdomain2.host.com',\n'host2.com'\n]\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;模仿 django 的 ALLOWED_HOSTS，以 . 开头的值可以用作子域通配符。.host.com 将会匹配 host.com, www.host.com 和 host.com 的任何其他子域名。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\n// 这实现了与第一个示例相同的效果，\n// 如果新的子域名需要访问 dev server，\n// 则无需更新您的配置\nallowedHosts: [\n'.host.com',\n'host2.com'\n]\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;devServer.clientLogLevel&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;string: 'none' | 'info' | 'error' | 'warning'&lt;/code&gt;\n当使用内联模式(inline mode)时，会在开发工具(DevTools)的控制台(console)显示消息，例如：在重新加载之前，在一个错误之前，或者 模块热替换(Hot Module Replacement) 启用时。默认值是 info。\ndevServer.clientLogLevel 可能会显得很繁琐，你可以通过将其设置为 'none' 来关闭 log。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\nclientLogLevel: 'none'\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;devServer.color  - 只用于命令行工具(CLI)&lt;/h3&gt;\n&lt;p&gt;只在终端下启用，启用/禁用控制台的彩色输出。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;webpack-dev-server --color\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;devServer.compress&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;\n一切服务都开启gzip压缩。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\ncompress: true\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;devServer.contentBase&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;boolean: false string [string] number&lt;/code&gt;\n告诉服务器从哪个目录中提供内容。只有在你想要提供静态文件时才需要。devServer.publicPath 将用于确定应该从哪里提供 bundle，并且此选项优先。\n默认情况下，将使用当前工作目录作为提供内容的目录。将其设置为 false 以禁用 contentBase。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\ncontentBase: path.join(__dirname, 'public')\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;也可以从多个目录提供内容：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\ncontentBase: [path.join(__dirname, 'public'), path.join(__dirname, 'assets')]\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;devServer.disableHostCheck&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;\n设置为 true 时，此选项绕过主机检查。不建议这样做，因为不检查主机的应用程序容易受到 DNS 重新连接攻击。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\ndevServer: {\ndisableHostCheck: true\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;devServer.filename&lt;/h3&gt;\n&lt;p&gt;&lt;code&gt;string&lt;/code&gt;\n在 lazy mode(惰性模式) 中，此选项可减少编译。 默认在 lazy mode(惰性模式)，每个请求结果都会产生全新的编译。使用 filename，可以只在某个文件被请求时编译。\n如果 output.filename 设置为 'bundle.js' ，devServer.filename 用法如下：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\n//...\noutput: {\nfilename: 'bundle.js'\n},\ndevServer: {\nlazy: true,\nfilename: 'bundle.js'\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;现在只有在请求了bundle.js时，才会去编译bundle。&lt;/p&gt;\n&lt;h2&gt;总结&lt;/h2&gt;\n&lt;p&gt;webpack的功能确实很强大，可以针对代码进行各种操作，最终生成出可以适应各种场景的代码，使开发和部署彻底分离开来，开发者可以更加专注项目。&lt;/p&gt;</p>\n",
        "id": "6d39c7c84d7c4c365d3e55d6e1676429",
        "link": "/2019/11/25/使用webpack-dev-server来监听项目变化"
    },
    {
        "attributes": {
            "title": "给Archlinux开启BFQ和MuQSS",
            "date": "2019-10-24T13:19:21.000Z",
            "tags": "Linux",
            "categories": "Linux"
        },
        "body": "<p>&lt;p&gt;最近在Arch上更新系统的时候，总是遇到图形完全卡住的情况，今天上午突然想起来自己曾经设置了使用noop的IO调度，猜测是因为这个。然后本着不折腾不舒服的原则，打算使用ck内核上MuQSS的进程调度和BFQ的IO调度。\nck内核并没有在arch的仓库，但是aur有linux-ck的包，安装一下就可以了。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;yay -S linux-ck linux-ck-headers\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;编译需要一些时间，在我的破本子i7-8550U编译了一顿过桥米线的时间，然后成功使用了ck内核。&lt;/p&gt;\n&lt;h3&gt;开启MuQSS&lt;/h3&gt;\n&lt;p&gt;ck内核默认使用的就是MuQSS调度，并不需要修改什么，开机即可。&lt;/p&gt;\n&lt;h3&gt;开启BFQ&lt;/h3&gt;\n&lt;p&gt;开启BFQ需要一些手动设置。分为两步：&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;修改grub，给内核提供新的参数&lt;/li&gt;\n&lt;li&gt;使用udev开启动态调整\n&lt;strong&gt;修改grub&lt;/strong&gt;\n编辑&lt;code&gt;/etc/default/grub&lt;/code&gt;中&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt;，增加一行内容:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&quot;quiet scsi_mod.use_blk_mq=1&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后更新grub配置文件:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo grub-mkconfig -o /boot/grub/grub.cfg\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;&lt;strong&gt;创建udev规则&lt;/strong&gt;\n创建并编辑&lt;code&gt;/etc/udev/rules.d/60-scheduler.rules&lt;/code&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# set deadline scheduler for non-rotating disks\nACTION==&quot;add|change&quot;, KERNEL==&quot;sd[a-z]&quot;, TEST!=&quot;queue/rotational&quot;, ATTR{queue/scheduler}=&quot;deadline&quot;\nACTION==&quot;add|change&quot;, KERNEL==&quot;sd[a-z]&quot;, ATTR{queue/rotational}==&quot;0&quot;, ATTR{queue/scheduler}=&quot;bfq&quot;</p>\n<h1>set cfq scheduler for rotating disks</h1>\n<p>ACTION==&quot;add|change&quot;, KERNEL==&quot;sd[a-z]&quot;, ATTR{queue/rotational}==&quot;1&quot;, ATTR{queue/scheduler}=&quot;bfq&quot;\nACTION==&quot;add|change&quot;, KERNEL==&quot;nvme[0-9]n1&quot;, ATTR{queue/rotational}==&quot;0&quot;, ATTR{queue/scheduler}=&quot;bfq&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上面的配置是给固态硬盘使用deadline，给机械盘使用bfq，给nvme盘bfq。\n本着电脑只有ssd，所以天不怕地不怕的原则，我选择全部使用bfq。\n然后重启电脑，查看所有硬盘的调度器：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# justforlxz @ archlinux in ~ [13:29:04]\n$ cat /sys/block/*/queue/scheduler\nmq-deadline kyber [bfq] none\nmq-deadline kyber [bfq] none\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;通过dmesg查看MuQSS是否开启：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ sudo dmesg | grep -i scheduler\nAlias tip: _ dmesg | grep -i scheduler\n[    0.295872] rcu: RCU calculated value of scheduler-enlistment delay is 10 jiffies.\n[    1.223982] io scheduler mq-deadline registered\n[    1.223984] io scheduler kyber registered\n[    1.224038] io scheduler bfq registered\n[    1.586191] MuQSS CPU scheduler v0.193 by Con Kolivas.\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;总结&lt;/h2&gt;\n&lt;p&gt;MuQSS是BFS(脑残调度器)的进化版，主要是改进了BFS的O(n)复杂度，BFS适用于桌面环境用户，可以提供较好的进程切换和延迟。\nBFQ是针对硬盘的IO调度，它通过预先分配一定的IO吞吐量来合理安排每个进程的IO操作。我需要用几天来感受一下MuQSS和CFQ的好处。&lt;/p&gt;</p>\n",
        "id": "5c7d5535bc4867a366610bc7e2bf2fff",
        "link": "/2019/10/24/给Archlinux开启BFQ和MuQSS"
    },
    {
        "attributes": {
            "title": "使用webpack打包Vue和TypeScript",
            "date": "2019-10-22T15:20:08.000Z",
            "tags": [
                "Vue",
                "Webpack",
                "TypeScript"
            ],
            "categories": "Web"
        },
        "body": "<p>&lt;p&gt;本文将会介绍如何通过Webpack将基于TypeScript的Vue项目进行打包。&lt;/p&gt;\n&lt;h2&gt;webpack基础配置&lt;/h2&gt;\n&lt;p&gt;首先创建一个基本的webpack.config.js文件:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;const path = require( 'path' );\nmodule.exports = {\nentry: {\nindex: &quot;./src/index.ts&quot;,\n},\noutput: {\npath: path.resolve( __dirname, 'dist' ),\npublicPath: '/dist/',\nfilename: '[name].js'\n},\ndevtool: 'inline-source-map',\nmode: 'development',\nmodule: {\nrules: [\n]\n},\nresolve: {\n}\n};\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;此时webpack只能将src/index.ts文件直接输出为index.js，我们需要添加typescript的loader，进行typescript的转换。\n将以下代码加入rules节:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;{\ntest: /.ts?$/,\nloader: 'ts-loader',\nexclude: /node_modules/,\n},\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;通过ts-loader进行ts文件的转换，我们还需要创建typescript的一个配置文件。&lt;/p&gt;\n&lt;h2&gt;添加typescript支持&lt;/h2&gt;\n&lt;p&gt;创建tsconfig.json&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;{\n&quot;compilerOptions&quot;: {\n&quot;outDir&quot;: &quot;./dist/&quot;,\n&quot;sourceMap&quot;: true,\n&quot;strict&quot;: true,\n&quot;module&quot;: &quot;commonjs&quot;,\n&quot;moduleResolution&quot;: &quot;node&quot;,\n&quot;target&quot;: &quot;es5&quot;,\n&quot;skipLibCheck&quot;: true,\n&quot;esModuleInterop&quot;: true,\n&quot;experimentalDecorators&quot;: true\n},\n&quot;include&quot;: [\n&quot;./src/**/<em>&quot;\n]\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;还需要在webpack的配置中添加ts文件，在resolve节中添加:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;extensions: [ '.ts', '.js' ],\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我们指定ts转换出的js代码是es5的。\n这个时候我们运行webpack，将会看到正常的转换输出。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Hash: c3a0ae2c47032de12eec\nVersion: webpack 4.41.0\nTime: 1880ms\nBuilt at: 10/22/2019 3:40:59 PM\nAsset      Size  Chunks             Chunk Names\nindex.js  11.8 KiB   index  [emitted]  index\nEntrypoint index = index.js\n[./src/index.ts] 269 bytes {index} [built]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;入口文件就是index.ts了，之后我们就正常的在index.ts中写我们的代码，webpack就会查找所有的依赖，并打包输出到index.js中。&lt;/p&gt;\n&lt;h2&gt;添加Vue单文件的支持&lt;/h2&gt;\n&lt;p&gt;Vue单文件组件(SFC)规范是指在一个文件中，提供html、css和script代码，三者包含在顶级语言块 &lt;code&gt;&lt;template&gt;&lt;/code&gt;、&lt;code&gt;&lt;script&gt;&lt;/code&gt; 和 &lt;code&gt;&lt;style&gt;&lt;/code&gt;\n中，还允许添加可选的自定义块。\n这是一个简单的vue单文件例子:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;template&gt;\n&lt;div class=&quot;example&quot;&gt;{{ msg }}&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\nexport default {\ndata () {\nreturn {\nmsg: 'Hello world!'\n}\n}\n}\n&lt;/script&gt;\n&lt;style&gt;\n.example {\ncolor: red;\n}\n&lt;/style&gt;\n&lt;custom1&gt;\nThis could be e.g. documentation for the component.\n&lt;/custom1&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我们通过vue-loader来解析该文件，提取每一个语言块，如有需要，会传递给其他loader进行处理，最后组装为一个ES Module。\n我们在webpack的rules节中添加vue-loader:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;{\ntest: /.vue$/,\nloader: 'vue-loader',\noptions: {\nloaders: {\n// Since sass-loader (weirdly) has SCSS as its default parse mode, we map\n// the &quot;scss&quot; and &quot;sass&quot; values for the lang attribute to the right configs here.\n// other preprocessors should work out of the box, no loader config like this necessary.\n'scss': 'vue-style-loader!css-loader!sass-loader',\n'sass': 'vue-style-loader!css-loader!sass-loader?indentedSyntax',\n}\n// other vue-loader options go here\n}\n},\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;如果vue是typescript代码？&lt;/h2&gt;\n&lt;p&gt;其实这很简单，ts-loader有一个appendTsSuffixTo的功能，可以给某个文件增加.ts的后缀，从而识别这个文件为ts文件。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;{\ntest: /.tsx?$/,\nloader: 'ts-loader',\nexclude: /node_modules/,\noptions: {\nappendTsSuffixTo: [/.vue$/],\n}\n},\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;我们还需要在项目中添加一个vue-shim.d.ts来让ts正确的识别vue。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;declare module '</em>.vue' {\nimport Vue from 'vue'\nexport default Vue\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;还需要在webpack的resolve节追加vue的后缀:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;resolve: {\nextensions: [ '.tsx', '.ts', '.js' , '.vue'],\nalias: {\n'vue': 'vue/dist/vue.js'\n}\n},\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;vue-loader现在需要手动处理一下插件，在webpack.config.js的头部导入vue-loader，并在plugins节创建对象。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;const { VueLoaderPlugin } = require('vue-loader')\n.......\nplugins: [\nnew VueLoaderPlugin()\n],\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;否则将不能正确工作。\n此时已经完成了webpack+vue+typescript的全部工作。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Hash: 320d4ed3f55f52872694\nVersion: webpack 4.41.0\nTime: 2494ms\nBuilt at: 10/22/2019 4:00:50 PM\nAsset       Size    Chunks             Chunk Names\nbundle.js   1.12 MiB    bundle  [emitted]  bundle\nelectron.js   12.2 KiB  electron  [emitted]  electron\nindex.html  194 bytes            [emitted]\nEntrypoint bundle = bundle.js\nEntrypoint electron = electron.js\n[./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/app.vue?vue&amp;type=style&amp;index=0&amp;id=5ef48958&amp;rel=stylesheet%2Fscss&amp;lang=scss&amp;scoped=true&amp;] ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./src/app.vue?vue&amp;type=style&amp;index=0&amp;id=5ef48958&amp;rel=stylesheet%2Fscss&amp;lang=scss&amp;scoped=true&amp; 542 bytes {bundle} [built]\n[./node_modules/ts-loader/index.js?!./node_modules/vue-loader/lib/index.js?!./src/Components/About.vue?vue&amp;type=script&amp;lang=ts&amp;] ./node_modules/ts-loader??ref--1!./node_modules/vue-loader/lib??vue-loader-options!./src/Components/About.vue?vue&amp;type=script&amp;lang=ts&amp; 305 bytes {bundle} [built]\n[./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/Components/About.vue?vue&amp;type=template&amp;id=aa9c95a6&amp;] ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/Components/About.vue?vue&amp;type=template&amp;id=aa9c95a6&amp; 235 bytes {bundle} [built]\n[./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./src/app.vue?vue&amp;type=template&amp;id=5ef48958&amp;scoped=true&amp;] ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/app.vue?vue&amp;type=template&amp;id=5ef48958&amp;scoped=true&amp; 589 bytes {bundle} [built]\n[./node_modules/vue-style-loader/index.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib/index.js?!./src/app.vue?vue&amp;type=style&amp;index=0&amp;id=5ef48958&amp;rel=stylesheet%2Fscss&amp;lang=scss&amp;scoped=true&amp;] ./node_modules/vue-style-loader!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/lib??vue-loader-options!./src/app.vue?vue&amp;type=style&amp;index=0&amp;id=5ef48958&amp;rel=stylesheet%2Fscss&amp;lang=scss&amp;scoped=true&amp; 1.64 KiB {bundle} [built]\n[./src/Components/About.vue] 1.06 KiB {bundle} [built]\n[./src/Components/About.vue?vue&amp;type=script&amp;lang=ts&amp;] 350 bytes {bundle} [built]\n[./src/Components/About.vue?vue&amp;type=template&amp;id=aa9c95a6&amp;] 203 bytes {bundle} [built]\n[./src/app.vue] 1.08 KiB {bundle} [built]\n[./src/app.vue?vue&amp;type=style&amp;index=0&amp;id=5ef48958&amp;rel=stylesheet%2Fscss&amp;lang=scss&amp;scoped=true&amp;] 716 bytes {bundle} [built]\n[./src/app.vue?vue&amp;type=template&amp;id=5ef48958&amp;scoped=true&amp;] 207 bytes {bundle} [built]\n[./src/entry.ts] 538 bytes {bundle} [built]\n[./src/main.ts] 1.11 KiB {electron} [built]\n[./src/route.ts] 1.35 KiB {bundle} [built]\n&lt;/code&gt;&lt;/pre&gt;</p>\n",
        "id": "eb5e31eba4260e2683ba9964334c8cba",
        "link": "/2019/10/22/使用webpack打包Vue和TypeScript"
    },
    {
        "attributes": {
            "title": "webpack入门",
            "date": "2019-10-14T15:34:52.000Z",
            "tags": "Web",
            "categories": [
                "Web",
                "webpack"
            ]
        },
        "body": "<p>&lt;p&gt;现在前端开发不像以前一样，只需要写html、css和javascript文件就可以了。现代前端开发讲究工程化。\n&lt;strong&gt;什么是工程化？&lt;/strong&gt;\n工程化即系统化、模块化、规范化的一个过程。\n&lt;strong&gt;为什么要工程化？&lt;/strong&gt;\n工程化是让开发、测试和维护都变得更加可靠和提高效率的方式。&lt;/p&gt;\n&lt;ol&gt;\n&lt;li&gt;制定规范&lt;/li&gt;\n&lt;li&gt;版本管理&lt;/li&gt;\n&lt;li&gt;单元测试&lt;/li&gt;\n&lt;li&gt;自动化\n通过制定流程的方式，规范了开发和测试的流程，让工作有章可循，方便团队协作。\n&lt;!--more --&gt;\n最初的网页开发，是写好几份的javascript代码和css文件，手动在html中引入的。这样不适合多人协作开发，一旦开发人员多了，不可避免的会造成文件和命名冲突。\n为了避免这些事情的发生，javascript增加了模块的概念。\n有好的事情出现，就会有坏的事情发生。\n过多的模块导致js文件下载很慢，而且有冗余，为了避免这件事情影响用户体验，webpack横空出世了。\nwebpack是一个现代javascript的静态模块打包器。它会递归的构建出依赖图，并根据依赖图来输出应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。\nwebpack有四个核心概念:&lt;/li&gt;\n&lt;/ol&gt;\n&lt;ul&gt;\n&lt;li&gt;入口(entry)&lt;/li&gt;\n&lt;li&gt;输出(output)&lt;/li&gt;\n&lt;li&gt;loader&lt;/li&gt;\n&lt;li&gt;插件\n入口决定了webpack要从哪个文件开始构建依赖图。\n看一个简单的例子:&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;module.exports = {\nentry: './src/index.js'\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;output则决定了webpack会在哪里输出生成的bundles，以及如何命名这些bundles。输出目录默认为 &lt;code&gt;./dist/&lt;/code&gt; 。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;const path = require('path');\nmodule.exports = {\nentry: './src/index.js',\noutput: {\npath: path.resolve(__dirname, 'dist'),\nfilename: 'bundle.js'\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;loader可以让webpack打包非javascript文件，loader可以将所有类型的文件转换为webpack可以识别的有效模块，然后利用webpack的打包能力，对他们进行处理。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;const path = require('path');\nmodule.exports = {\nentry: './src/index.js',\noutput: {\npath: path.resolve(__dirname, 'dist'),\nfilename: 'bundle.js'\n},\nmodule: {\nrules: {\ntest: /.css$/,\nuse: 'css-loader'\n}\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;rules中的意思是，当require()/impot中被解析为.css的路径时，先使用css-loader转换一下。\n我们可以开发新的loader去加载不同的文件，最终都通过webpack来打包到一起。\nloader用于转换某些类型的模块，插件则工作的更加广泛。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量。插件接口功能极其强大，可以用来处理各种各样的任务。\n想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建它的一个实例。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;const path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin'); // 通过 npm 安装\nconst webpack = require('webpack');\nmodule.exports = {\nentry: './src/index.js',\noutput: {\npath: path.resolve(__dirname, 'dist'),\nfilename: 'bundle.js'\n},\nmodule: {\nrules: {\ntest: /.css$/,\nuse: 'css-loader'\n}\n},\nplugins: [\nnew HtmlWebpackPlugin({template: './src/index.html'})\n]\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h2&gt;总结&lt;/h2&gt;\n&lt;p&gt;通过webpack，我们可以将整个项目都打包为一个文件进行分发，而且还可以进行优化。webpack的出现，将前端的开发和发布彻底的分离开，开发人员可以以各种方式进行开发，通过webpack打包以后输出部署需要的文件。&lt;/p&gt;</p>\n",
        "id": "a98abe2610eb762e74187f3fa091ed65",
        "link": "/2019/10/14/webpack入门"
    },
    {
        "attributes": {
            "title": "wsl2的使用体验",
            "date": "2019-06-16T12:59:59.000Z",
            "tags": "Windows",
            "categories": null
        },
        "body": "<p>&lt;p&gt;wsl2已经是虚拟机平台了。\n需要Windows版本在18917及以上，先开启虚拟机平台才能继续，在管理员权限的powershell中执行&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;对已安装的wsl1进行转换&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;wsl --set-version &lt;Distro&gt; 2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Distro可以通过 &lt;code&gt;wsl --list&lt;/code&gt; 查看。\n转换需要点时间，完成以后就可以浪起来了。\nwsl2新增了一些参数：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;wsl --set-version &lt;Distro&gt; &lt;Version&gt;&lt;/code&gt;\n可以设置某个wsl的版本，1是旧版，2是新版。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;wsl --set-default-version &lt;Version&gt;&lt;/code&gt;\n设置默认的wsl版本，推荐设置一下。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;wsl --shutdown&lt;/code&gt;\n出于某些目的，比如已经完成了任务，不再需要wsl工作在后台，可以手动关闭。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;wsl --list --quiet&lt;/code&gt;\n仅列出分发名称，此命令对于脚本编写很有用，因为它只会输出您已安装的发行版的名称，而不显示其他信息，如默认发行版，版本等。&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;wsl --list --verbose&lt;/code&gt;\n显示有关所有分发的详细信息。此命令列出每个发行版的名称，发行版所处的状态以及正在运行的版本。它还显示哪些分发是默认的星号。\n当一切准备就绪，我就安装了docker，测试一波。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt install docker-ce\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;添加用户到docker组。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo usermod -aG docker $USER\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;sudo service docker --full-restart\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;已经可以跑docker了，我们来做个测试，请出万能的hello world！&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;docker pull hello-world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;docker run --rm hello-world\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后就看到了想要的结果，hello world成功的跑起来了。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Hello from Docker!\nThis message shows that your installation appears to be working correctly.\nTo generate this message, Docker took the following steps:</p>\n<ol>\n<li>The Docker client contacted the Docker daemon.</li>\n<li>The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.\n(amd64)</li>\n<li>The Docker daemon created a new container from that image which runs the\nexecutable that produces the output you are currently reading.</li>\n<li>The Docker daemon streamed that output to the Docker client, which sent it\nto your terminal.\nTo try something more ambitious, you can run an Ubuntu container with:\n$ docker run -it ubuntu bash\nShare images, automate workflows, and more with a free Docker ID:\nhttps://hub.docker.com/\nFor more examples and ideas, visit:\nhttps://docs.docker.com/get-started/\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;总的来说，因为wsl2改成虚拟机方案了，不过wsl2的启动速度还是挺快的，微软也努力让wsl2和wsl1之间在使用上没有差异。目前微软还没有完成wsl2的网络部分，wsl2和宿主机之间还需要使用专门的ip进行访问，等微软完成wsl2的localhost网络以后，就可以像以前一样直接跑一些网站或者需要端口的服务了。\n&lt;img src=&quot;Snipaste_2019-06-16_21-52-42.png&quot; alt=&quot;网络截图&quot;&gt;\n来一张合照\n&lt;img src=&quot;Snipaste_2019-06-16_21-49-15.png&quot; alt=&quot;合照&quot;&gt;\n&lt;a href=&quot;https://devblogs.microsoft.com/commandline/wsl-2-is-now-available-in-windows-insiders/&quot;&gt;点我查看wsl2的发布说明&lt;/a&gt;\n&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/wsl2-install&quot;&gt;点我查看如何安装wsl2&lt;/a&gt;&lt;/p&gt;</li>\n</ol>\n",
        "id": "99ec8a9d9ba3a68bd318ba53b3cc288f",
        "link": "/2019/06/16/wsl2的使用体验"
    },
    {
        "attributes": {
            "title": "入坑typescript了",
            "date": "2019-06-15T23:41:49.000Z",
            "tags": "typescript",
            "categories": null
        },
        "body": "<p>&lt;p&gt;今天算是正式入坑 typescript 了，基于 vue 写了第一个函数，用来做一个文字效果。\n演示效果：\n&lt;img src=&quot;%E6%B7%B1%E5%BA%A6%E5%BD%95%E5%B1%8F_%E9%80%89%E6%8B%A9%E5%8C%BA%E5%9F%9F_20190615202044.gif&quot; alt=&quot;&quot;&gt;\n整体思路听简单的，就是用定时器和延时器来做，通过定时器来间隔的处理文本，延时器来延后所有的方法。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;class TextHandle {\nprivate allDuration: number = 0;\npublic appendText(text: string) : void {\nsetTimeout(() = &gt;{\nconst LeftMessage = document.getElementById('LeftMessage');\nif (LeftMessage === null) {\nreturn;\n}\nlet index: number = 0;\nconst MessageText: string = LeftMessage.innerText;\n// tslint:disable-next-line:only-arrow-functions\nconst interval = setInterval(function() {\nif ((LeftMessage === null) || (index++ === text.length + 1)) {\nreturn clearInterval(interval);\n}\nLeftMessage.innerText = MessageText + text.substring(0, index);\n},\n300);\n},\nthis.AllDuration);\nthis.AllDuration += text.length * 300 + 100;\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;typescript确实挺不错的，平时都在写静态语言，如C++，所以当我开始学动态语言的时候，就会觉得水土不服，现在\n通过typescript就可以让我继续使用静态语言的开发方式来写web，而且代码更容易理解。&lt;/p&gt;</p>\n",
        "id": "1f1cb6277ee60d735f8b86c5ad273f06",
        "link": "/2019/06/15/入坑typescript了"
    },
    {
        "attributes": {
            "title": "CMake CTests for dde-control-center",
            "date": "2019-05-23T17:16:15.000Z",
            "tags": [
                "CMake Linux"
            ],
            "categories": "Linux"
        },
        "body": "<p>&lt;p&gt;什么是单元测试?&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;在计算机编程中，单元测试又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。\n单元测试存在的意义在于，如果程序发生了异常情况，比如接收了错误的值，从而导致结果不正确，当修正程序中的错误后，为了避免再次遇到这个问题，需要对出问题的值和函数/功能进行一次测试，确保结果符合预期。\n单元测试很重要，如果是新项目，请一定要刚开始就规划好单元测试。\n为什么说单元测试很重要呢？因为单元测试的目的是隔离其他单元，并证明当前单元是正确的。这需要开发者在设计程序的时候就要考虑很多，合理的设计和规划项目。当未来重构项目的时候，可以局部重构来优化项目，而不是从零重写。\n本文没有详细说明Qt的单元测试是如何编写的，编写Qt的单元测试放在以后再写(&lt;s&gt;咕咕咕&lt;/s&gt;)。\n写这篇文章是因为最近在给控制中心写单元测试，控制中心的模块都是MVC的，本身就做好了大方向的隔离，每个函数也基本是拆分出来的最小功能，可以单独拿出来测试。控制中心目前存在一个问题，Worker类是从DBus上接收数据，处理完成后放入Model中，如果测试Worker类，需要做很多和DBus相关的处理，比较麻烦，所以最开始我先把重心放在了创建Tests和测试一个基本的转换函数的功能，验证单元测试的流程。\n&lt;a href=&quot;https://github.com/linuxdeepin/dde-control-center/pull/171&quot;&gt;控制中心单元测试PR&lt;/a&gt;\n控制中心项目使用的CMake作为项目构建工具，所以用到了CTests，控制中心使用的Qt进行的开发，Qt也提供了自己的单元测试，我两个都做了支持。\n在顶层的CMakeLists.txt中添加CTests的支持：&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre&gt;&lt;code&gt;# 启用CTest检查\ninclude(Dart)</p>\n<h1>启用CTest</h1>\n<p>include(CTest)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这两行内容需要在顶层CMakeLists.txt中添加，不然不会生效。\n在子项目中创建一个dcc_test.h，用来写单元测试的类。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;#ifndef DCC_TEST_H\n#define DCC_TEST_H\n#include &lt;QMap&gt;\n#include &lt;QString&gt;\n#include &lt;QTest&gt;\n#include &quot;modules/display/displaywidget.h&quot;\nnamespace Tests {\nclass Tests : public QObject {\nQ_OBJECT\nprivate Q_SLOTS:\nvoid testSliderValue_data()\n{\nQTest::addColumn&lt;float&gt;(&quot;value&quot;);\nQTest::addColumn&lt;int&gt;(&quot;result&quot;);\nQMap&lt;float, int&gt; testMap{ { 1.0, 1 },  { 1.25, 2 }, { 1.5, 3 },\n{ 1.75, 4 }, { 2.0, 5 },  { 2.25, 6 },\n{ 2.5, 7 },  { 2.75, 8 }, { 3.0, 9 } };\nfor (auto it = testMap.constBegin(); it != testMap.constEnd(); ++it) {\nQTest::newRow(&quot;converToSlider&quot;) &lt;&lt; it.key() &lt;&lt; it.value();\n}\n}\nvoid testSliderValue()\n{\nQFETCH(float, value);\nQFETCH(int, result);\nusing namespace dcc::display;\nQCOMPARE(DisplayWidget::convertToSlider(value), result);\nQCOMPARE(DisplayWidget::convertToScale(result), value);\n}\n};\n}  // namespace Tests\nQTEST_MAIN(Tests::Tests)\n#endif  // !DCC_TEST_H\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;在子项目的CMakeLists.txt中添加一个二进制，用来当作单元测试程序。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# 这个宏是Dart提供的，用来判断是否开启CTest\nif(BUILD_TESTING)\nfind_package(Qt5 COMPONENTS\nTest\nREQUIRED)\nset(Qt_LIBS\n${Qt_LIBS}\nQt5::Test\n)\nset(TEST_SRCS\ntests/dcc_test.h\n${DISPLAY_FILES}\n${WIDGETS_FILES}\n${MODULE_FILES}\n)</p>\n<h1>添加一个叫unit-test的二进制</h1>\n<p>add_executable(unit-test\n${TEST_SRCS}\n${PROJECT_BINARY_DIR}\n)\ntarget_include_directories(unit-test PUBLIC\n${TEST_SRCS}\n${PROJECT_BINARY_DIR}\n${DFrameworkDBus_INCLUDE_DIRS}\n${QGSettings_INCLUDE_DIRS}\n${Qt5Gui_PRIVATE_INCLUDE_DIRS}\n)\ntarget_link_libraries(unit-test PRIVATE\n${Qt_LIBS}\n${DFrameworkDBus_LIBRARIES}\n${QGSettings_LIBRARIES}\n${DtkWidget_LIBRARIES}\n${XCB_EWMH_LIBRARIES}\n)\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;到这里，直接编译启动unit-test就可以使用Qt的单元测试了，但是加上CTest的支持只需要一行：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;add_test(ctest unit-test)\nendif()\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;使用ctest -j6 -C Debug -T test --output-on-failure跑CTest，得到执行结果：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;[ctest]    Site: xiaomi-air\n[ctest]    Build name: Linux-c++\n[ctest] Test project /home/justforlxz/Projects/Deepin/dde-control-center/build\n[ctest]     Start 1: ctest\n[ctest] 1/1 Test #1: ctest ............................   Passed    0.05 sec\n[ctest]\n[ctest] 100% tests passed, 0 tests failed out of 1\n[ctest]\n[ctest] Total Test time (real) =   0.06 sec\n[ctest] CTest finished with return code 0\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果是跑unit-test二进制，则会得到Qt打印的相关信息：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;********* Start testing of Tests::Tests *********\nConfig: Using QtTest library 5.12.3, Qt 5.12.3 (x86_64-little_endian-lp64 shared (dynamic) release build; by GCC 8.3.0)\nPASS   : Tests::Tests::initTestCase()\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::testSliderValue(converToSlider)\nPASS   : Tests::Tests::cleanupTestCase()\nTotals: 11 passed, 0 failed, 0 skipped, 0 blacklisted, 0ms\n********* Finished testing of Tests::Tests *********\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;对比CTest和Qt的单元测试，Qt会告诉你详细的函数调用和执行过程，CTest更注重结果，不过在Qtcreator的单元测试面板中，会看到更好的输出。\n说到底，CTest支持启动了一个带有单元测试的程序，而程序自己使用了Qt提供的单元测试类进行测试。&lt;/p&gt;</p>\n",
        "id": "9ec35bb654ffc0cbd1277fe1e4e4b5d8",
        "link": "/2019/05/23/CMakeCTestsfordde-control-center"
    },
    {
        "attributes": {
            "title": "如何在Deepin上使用LNMP",
            "date": "2019-02-21T10:11:15.000Z",
            "tags": [
                "LNMP",
                "Linux",
                "Deepin",
                "Web"
            ],
            "categories": [
                "Linux"
            ],
            "author": "Lorem Ipsum",
            "url": "http://generator.lorem-ipsum.info"
        },
        "body": "<p>&lt;p&gt;为了节省读者的时间，我先简述一下阅读这篇文章需要了解的知识。\n这篇文章将基于Docker来构建nginx、php和mysql来搭建LNMP环境，和其他教程有所不同的是，需要有一定的Docker基础。\nDocker是一个不错的工具，使我们不需要虚拟机那样的庞然大物就可以轻松的隔离运行的程序，这要感谢Linux的资源分离机制，避免启动一个虚拟机造成了大量资源浪费。\n首先需要在Deepin上安装Docker，添加Docker的deb仓库，并安装docker-ce。\n创建文件&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo nano /etc/apt/sources.list.d/docker.list\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;写入&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;deb [arch=amd64] https://download.docker.com/linux/debian jessie edge\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;刷新一下仓库就可以安装了。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt update &amp;&amp; sudo apt install docker-ce docker-compose\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;安装完成后重启一下系统，准备工作就算完成了一半了。\n在家目录创建一个Projects目录，当做我们LNMP的工作目录，创建一个名叫&lt;em&gt;docker-compose.yaml&lt;/em&gt;的文件，这是docker-compose的配置文件，我们通过docker-compose这个工具来管理我们的Docker容器。\n所有的镜像均采用最新版本，nginx(1.15.8)，php(7.3.2)，mysql(8.0.15)，如有需要，自行选择不同版本的镜像。\n注意PHP7已经不支持mysql扩展，使用内置的MySQLnd。\n写入以下配置文件：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;version: '3'\nservices:\nnginx:\n# 设置容器名字\ncontainer_name: &quot;nginx&quot;\n# 采用最新的nginx\nimage: nginx:latest\n# 绑定80端口\nports:\n- &quot;80:80&quot;\n# 添加php容器的依赖\ndepends_on:\n- &quot;php&quot;\n# 绑定数据目录\nvolumes:\n- &quot;./volumes/nginx/conf.d:/etc/nginx/conf.d&quot;\n- &quot;./volumes/html:/usr/share/nginx/html&quot;\nrestart: always\nphp:\n# 设置容器名字\ncontainer_name: &quot;php&quot;\n# 采用最新的php\nimage: php:fpm\n# 绑定端口\nports:\n- &quot;9000:9000&quot;\n# 绑定数据目录\nvolumes:\n- &quot;./volumes/html:/var/www/html&quot;\nrestart: always\nmysql:\n# 设置容器名字\ncontainer_name: &quot;mysql&quot;\n# 采用最新的mysql\nimage: mysql:latest\n# 绑定端口\nports:\n- &quot;3306:3306&quot;\n# 设置环境变量\nenvironment:\n- MYSQL_ROOT_PASSWORD=(自己设置密码)\n# 绑定数据目录\nvolumes:\n- &quot;./volumes/mysql:/var/lib/mysql&quot;\nrestart: always\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;创建nginx的配置文件，编辑 &lt;em&gt;./volumes/nginx/conf.d/nginx.conf&lt;/em&gt; ：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;server {\nlisten       80;\nserver_name  localhost;\nlocation / {\nroot   /usr/share/nginx/html;\nindex  index.html index.htm index.php;\n}\nerror_page   500 502 503 504  /50x.html;\nlocation = /50x.html {\nroot   /usr/share/nginx/html;\n}\nlocation ~ .php$ {\nfastcgi_pass   php:9000;\nfastcgi_index  index.php;\nfastcgi_param  SCRIPT_FILENAME /var/www/html/$fastcgi_script_name;\ninclude        fastcgi_params;\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;创建php测试文件，编辑 &lt;em&gt;./volumes/html/index.php&lt;/em&gt; :&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;&lt;?php\nphpinfo();\n?&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;启动docker，第一次需要拉取一下镜像:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;docker-compose up --build -d\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;等全部结束以后，就可以访问localhost看到php的信息了。\n通过Docker的方法来使用LNMP，不污染宿主机环境，不会再因为各种依赖问题而搞坏系统，这恰恰是新手容易犯的错误，使用Docker，方便你我。&lt;/p&gt;</p>\n",
        "id": "e1aa7dbe1a07108e48cb64584f29df65",
        "link": "/2019/02/21/如何在Deepin上使用LNMP"
    },
    {
        "attributes": {
            "title": "解决用了xposed后淘宝闪退",
            "s": "fuck_taobao",
            "date": "2019-01-23T10:27:52.000Z",
            "tags": null,
            "categories": null
        },
        "body": "<p>&lt;p&gt;反正都用xposed了，肯定也有root权限。\n删除/data/data/com.taobao.taobao/files/bundleBaseline/里的文件，然后设置该目录为500。&lt;/p&gt;</p>\n",
        "id": "f2d8a4c260dfd8559bbabebc5c412e07",
        "link": "/2019/01/23/解决用了xposed后淘宝闪退"
    },
    {
        "attributes": {
            "title": "使用swapfile来休眠",
            "s": "hibernate for swapfile",
            "date": "2018-12-12T11:01:55.000Z",
            "tags": "Linux",
            "categories": "Linux"
        },
        "body": "<p>&lt;p&gt;最近deepin要添加休眠功能，但是之前测试的通过swapfile来休眠失败了，所以对正在使用swap分区的用户提供休眠功能。但是昨天我在askubuntu上看到有人发了在ubuntu下通过swapfile休眠的方案，今天试了一下，效果良好，觉得可以考虑给deepin也加上这样的功能。\n原文链接: &lt;a href=&quot;https://askubuntu.com/questions/6769/hibernate-and-resume-from-a-swap-file&quot;&gt;Hibernate and resume from a swap file&lt;/a&gt;\n具体步骤是通过uswsusp这个包来做的，uswsusp是一组用户空间工具，用于Linux系统上的休眠(挂起到磁盘)和挂起(挂起到RAM或待机)。详细内容可以在ArchWiki上参考。&lt;a href=&quot;https://wiki.archlinux.org/index.php/Uswsusp&quot;&gt;点这里&lt;/a&gt;\n先创建一个和内存同等大小的swapfile，为了确保休眠成功，不能小于内存的容量。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo fallocate -l 16g /swapfile # 我的机子是16G，具体自己修改\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\necho '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;安装用户空间软休眠(Userspace Software Suspend)包&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt install uswsusp\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;创建需要的配置文件，只需要创建文件即可。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo touch /etc/uswsusp.conf\nsudo dpkg-reconfigure -pmedium uswsusp\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这时候终端会提醒是否继续，选择Yes，然后会要求你创建一个密码，设置一个密码继续即可。\n此时就可以测试一下功能了，不过我是跳过这个步骤了(比较喜欢作死)。\n修改systemd的hibernate服务，使用uswsusp来代替systemd的功能。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo systemctl edit systemd-hibernate.service\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;写入以下内容:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;[Service]\nExecStart=\nExecStart=/usr/sbin/s2disk\nExecStartPost=/bin/run-parts -a post /lib/systemd/system-sleep\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这时候可以使用systemd的命令来测试的，我表示工作的非常正常。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;systemctl hibernate\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;执行以后可以看到屏幕上会打印当前保存的进度，然后设备就关机了，此时再开机，等待一会儿以后就看到了背景是我漂亮老婆的锁屏，解锁以后看到工作区还是执行命令前的，一切ok。\n参考以下内容:&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;https://askubuntu.com/questions/6769/hibernate-and-resume-from-a-swap-file\nhttps://wiki.archlinux.org/index.php/Uswsusp&lt;/p&gt;\n&lt;/blockquote&gt;</p>\n",
        "id": "6950f7d1289908634b117dc4f4999fd9",
        "link": "/2018/12/12/使用swapfile来休眠"
    },
    {
        "attributes": {
            "title": "标题1",
            "date": "2018-12-01T00:00:00.000Z"
        },
        "body": "<p>&lt;p&gt;正文内容&lt;/p&gt;\n&lt;h2&gt;test&lt;/h2&gt;</p>\n",
        "id": "8a07c3dae13f18d0c06cf5f9e482b173",
        "link": "/2018/12/01/标题1"
    },
    {
        "attributes": {
            "title": "C++快速排序",
            "p": "quick sort for c++",
            "date": "2018-11-11T16:57:44.000Z",
            "tags": [
                "Program",
                "C++"
            ],
            "categories": null
        },
        "body": "<p>&lt;p&gt;快速排序是基于分治思想的排序算法，通过这种策略把列表分为两个子列，重复该过程。是由东尼·霍尔提出，在平均状况下，排序N个数据要O(nlogn)次比较，在最坏情况下则需要O(n^2)，但退化成冒泡的情况比较少见，快速排序比其他排序算法通常情况是最佳的，因为内部使用的循环在很多平台都有优化。\n快速排序的步骤很简单：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;选择一个基准&lt;/li&gt;\n&lt;li&gt;遍历列表，将小于基准的放在列表左边，大于基准的放在列表右边&lt;/li&gt;\n&lt;li&gt;递归这个操作\n在维基百科上的这张图可以很直观的展示快速排序的过程\n&lt;img src=&quot;Sorting_quicksort_anim.gif&quot; alt=&quot;quicksort&quot;&gt;\n代码实现:\n首先需要一个返回基准的函数，该函数负责从指定的范围中挑选一个位置作为基准，并对范围内列表进行排序，并返回基准所在的位置。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;int Division(int a[], int left, int right) {\nint base = a[left]; // 取第一个数为基准\nwhile (left &lt; right) {\nwhile (left &lt; right &amp;&amp; a[left] &gt; base) {\n// 从右向左找第一个比基准小的元素\n--right;\n}\na[left] = a[right]; // 交换位置，把小元素放在左侧\nwhile (left &lt; right &amp;&amp; a[left] &lt; base) {\n// 从左向右找第一个比基准大的元素\n++left;\n}\na[right] = a[left]; // 交换位置，把大元素放在右侧\n}\na[left] = base;\nreturn left;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;Division函数只做了最简单的事，找一个基准，并交换左右的元素，使列表左侧均小于基准元素，使右侧均大于基准元素，接下来需要一个函数，使列表趋向最小，直至列表元素剩一(这里我感觉其实有点极限的思想)。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;void quick_sort(int a[], int left, int right) {\nif (left &lt; right) {\nint index = Division(a, left, right); //对列表进行分割\nquick_sort(a, left, i -1); //对左侧进行排序\nquick_sort(a, i + 1, right); //对右侧进行排序\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;配合上方的gif，就可以很清楚的了解快速排序是如何使用分治法来排序的，通过将大任务拆分成小任务，最终达成完整的排序.&lt;/p&gt;</p>\n",
        "id": "6080b4334bf5e6d54d7934e9fd84d682",
        "link": "/2018/11/11/C++快速排序"
    },
    {
        "attributes": {
            "title": "使用Google日历安排工作任务",
            "p": "use google calendar to finishe work",
            "date": "2018-11-09T21:15:45.000Z",
            "tags": null,
            "categories": null
        },
        "body": "<p>&lt;p&gt;目前我们正在尝试把工作的分配和讨论放在github上进行，这样可以使我们的用户和开发者更容易接触到我们，可以提bug和对需求进行讨。\n但是使用起来还是有些不便，比如使用tower进行任务分配的时候，可以方便的移动一个任务到某个分类，或者指派一个时间。但是github上是基于issue的，并不是为了做这种事来设计的，所以需求上有一些出入。但是&lt;a href=&quot;https://github.com/hualet&quot;&gt;@hualet&lt;/a&gt;大佬根据github的api写了一个bot来做一点微小的事，当一个issue的assignees只剩QA的同事时，issue会被bot移动到测试栏中，只剩一个开发同事时(基本上是负责该任务的开发者)，会被移动到开发栏中。\n但是因为不能做到比如今天、明天、下周等时间的显示，所以任务只能通过每天开会来口头告知时间，但是这并不妨碍我进行自己的任务时间安排。请出世界第一的神器(日历)。\n我选择使用谷歌日历，&lt;s&gt;才不是因为它有网页还有安卓客户端【哼&lt;/s&gt;\n谷歌日历上支持新建三种类型，分别是活动、提醒和任务。活动是开始时间明确，但是结束时间未知的类型，适合用作对时间不严格的情况。提醒则是在活动的基础上添加了提供功能，在活动即将开始时发送通知提醒。任务则是熟悉的ToDoList，适合用来分配今天一定要做，但是时间未知的事。\n我添加了每天的开会提醒，再开完会以后，我会把身上的新任务创建成task，然后再添加大概的活动来确定一下要完成的task。把今天没有时间做的task移动到明天，留在当天的task尽量要当天完成，可以得到今天的任务列表和延期列表，让我对要做的事有完整的控制。\n谷歌日历的日视图和周视图会显示一条线，告诉你现在的时间，应该进行什么活动了。\n&lt;img src=&quot;activity.png&quot; alt=&quot;activity&quot;&gt;\n&lt;img src=&quot;task.png&quot; alt=&quot;task&quot;&gt;\n&lt;img src=&quot;week.png&quot; alt=&quot;week&quot;&gt;\n在手机上需要使用两个app，Google calendar和Google task，活动和提醒需要calendar，task则需要单独使用一个app，只有网页上才是整合的。\n&lt;img src=&quot;android-calendar.png&quot; alt=&quot;android-calendar&quot;&gt;\n&lt;img src=&quot;android-task.png&quot; alt=&quot;android-task&quot;&gt;\n&lt;img src=&quot;day.png&quot; alt=&quot;day&quot;&gt;\n因为我也是才开始用日历来分配任务的时间，所以记录的内容并不多，我也在摸索如何使用这些功能，但是我觉得使用日历来记录和管理时间是非常不错的一件事，我可以通过看某天的活动来回忆当天所做的事，也可以根据记录的内容来分析自己在某些任务上使用了多少的时间。&lt;/p&gt;</p>\n",
        "id": "5b94064ace1201c32382f3f707037e76",
        "link": "/2018/11/09/使用Google日历安排工作任务"
    },
    {
        "attributes": {
            "title": "把博客转移到coding",
            "p": "hexo page move to coding",
            "date": "2018-11-09T20:17:32.000Z",
            "tags": null,
            "categories": null
        },
        "body": "<p>&lt;p&gt;上周末折腾黑果子的时候，不小心被果子坑爹的磁盘管理坑了，整个home被直接改成HFS+了，本来是打算分配一个空闲分区出来的，当我新建分区以后，从空间分区开始到home，分区全部都变成HFS+了，但是… 空闲分区新建失败，提示我磁盘空间不足，我就重启进deepin打算直接新建一个算了，然后就GG几率了。在windows下看到home已经成果子的文件系统了，然后我用arch的安装盘看了一下，已经无法重新挂载了(成功GG)，然后数据就都没了。\n还好我的数据在公司还有一份，私钥也都在，经过一星期的努力复制，大部分数据都恢复了，不过topbar的新功能代码是彻底没了，周五晚上太自信了，没有提交到gayhub上(猛叹气)。\n我们现在正在尝试把日常工作转向github的project和看板，每天早上开一下晨会，简单分配一下任务，开完会以后我会把自己的任务写在谷歌日历和task上，然后安排一下任务的先后顺序，我准备把自己的一些做法写到博客上，但是home已经不在了，所以我要先恢复我的博客，刚好国内有人说我博客访问的很慢，我打算国内解析到coding，国外解析到github。\n首先，创建新的博客目录，用来拉取旧的数据。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;mkdir blog &amp;&amp; cd blog\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;初始化git目录。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git init\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;添加远程仓库。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git remote add origin 你的博客git地址\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;取回origin的backup分支，和本地master合并。因为hexo-git-backup插件只支持master，但是coding只支持master部署page服务，所以需要使用其他分支。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git pull origin backup:master\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;拉取了代码以后，我们需要做点其他设置，首先设置上游分支。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git branch --set-upstream-to=origin/backup master\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;设置git的默认push策略，可以参考&lt;a href=&quot;http://thekaiway.com/2013/07/30/config-your-git-push-strategy/&quot;&gt;thekaiway&lt;/a&gt;的文章。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git config push.default upstream\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后添加coding的git地址。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;git remote add coding 你的git地址\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;之后就正常使用了，通过npm安装hexo，再安装需要的插件，最后完成了在一台新电脑上恢复hexo博客。&lt;/p&gt;</p>\n",
        "id": "972ec54986dd1e0f69b3baa9f41d2551",
        "link": "/2018/11/09/把博客转移到coding"
    },
    {
        "attributes": {
            "title": "智能指针",
            "s": "cpp-smart-pointer",
            "date": "2018-08-29T09:43:17.000Z",
            "tags": "C++",
            "categories": "C++"
        },
        "body": "<p>&lt;p&gt;其实一直都对智能指针的应用场景不清楚，项目中也很少用到，今天在 &lt;a href=&quot;https://zccrs.com&quot;&gt;@zccrs&lt;/a&gt; 大佬的帮助下，大概理解了智能指针的作用和应用场景。&lt;/p&gt;\n&lt;h1&gt;设计思想&lt;/h1&gt;\n&lt;p&gt;智能指针依赖一种叫引用计数的手段来协助管理对象指针，通过引用计数为0时删除对象指针来完成内存的释放，本质上是通过栈对象来管理堆对象的一种方法。&lt;/p&gt;\n&lt;h2&gt;传统做法&lt;/h2&gt;\n&lt;pre&gt;&lt;code&gt;void test() {\nTest* t = new Test;\n...\nif (...) {\nthrow exception();\n}\ndelete t;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;当出现异常时，delete将不会被执行到，t也就泄露了。虽然我们可以在异常那里把delete给加上，但是在较为大型的项目中，如果对代码进行review来排查这种错误，将会是非常麻烦的一件事，所以为了避免内存泄漏，发明了基于引用技术的智能指针。&lt;/p&gt;\n&lt;h2&gt;智能指针做法&lt;/h2&gt;\n&lt;pre&gt;&lt;code&gt;void test() {\nstd::unique_ptr&lt;Test&gt; t(new Test);\n...\nif (...) {\nthrow exception();\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果不关心std::unique_ptr是什么，这段代码无意是糟糕的，new出来的Test对象根本没有地方被删除，内存泄露了。\n但是不必担心，指针已经由std::unique_ptr来管理了，根本不会发生内存泄漏，对象将在离开函数作用域以后被删除。\n这就是智能指针的方便之处。&lt;/p&gt;\n&lt;h1&gt;智能指针的基本实现&lt;/h1&gt;\n&lt;p&gt;智能指针都通过模板编程来实现，模板是C++的另一大功能，可以使我们更关心实现而不需要关心具体的对象，通过更加抽象的方式来编写程序。\n智能指针有两层，里层用来保存对象的指针和引用计数，外层用来调用里层来控制引用计数。\n里层的辅助类&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;template&lt;typename T&gt;\nclass P_ptr {\nprivate:\nfriend class Pointer&lt;T&gt;;\nP_ptr(T t)\n: pointer(t)\n, count(1)\n{\n}\nuint count;\nT pointer;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;外层的控制类&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;template&lt;typename T&gt;\nclass Pointer {\npublic:\nPointer(T t)\n: m_ptr(new P_ptr(t))\n{\n}\nPointer(const Pointer &amp;pointer)\n: m_ptr(pointer.m_ptr)\n{\n++m_ptr-&gt;count;\n}\nPointer&amp; operator=(const Pointer &amp;pointer) {\n++pointer-&gt;count;\nif (--m_ptr-&gt;count == 0) { // 应对自赋值\ndelete m_ptr;\n}\nm_ptr = pointer-&gt;m_ptr;\nreturn <em>this;\n}\n~Pointer() {\nif (--m_ptr-&gt;count == 0) {\ndelete m_ptr;\n}\n}\nprivate:\nP_ptr m_ptr;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;通过重写控制类的拷贝构造函数和赋值运算符重载来更新引用计数。\n使用实例&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;void test() {\nPointer&lt;Test&gt; t(new Test); // 引用计数目前是1\nPointer&lt;Test&gt; t1 = t; // t的引用计数是2，t1的引用计数也是2\n}\n// 离开作用域，t被删除，引用计数是1. t1被删除，引用计数为0，Test被删除，内存没有泄露。\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这样我们就有一个简单的智能指针了，不过他还存在一些问题，比如循环引用导致内存泄漏，没有-&gt;和</em>的操作运算符等。所以我们需要更强大的智能指针来帮助我们。&lt;/p&gt;\n&lt;h1&gt;几种智能指针的介绍&lt;/h1&gt;\n&lt;p&gt;标准库提供了几个针对不同方面使用的智能指针，以满足我们的需求。&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;unique_ptr\n&lt;blockquote&gt;\n&lt;p&gt;只允许一个所有者，除非确信你需要共享该指针，则应该使用&lt;code&gt;shared_ptr&lt;/code&gt;。可以转移到新的所有者，但是不会复制和共享。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;shared_ptr\n&lt;blockquote&gt;\n&lt;p&gt;采用引用计数的智能指针，如果你想将一个原始指针分配给多个所有者，请使用该智能指针，直到&lt;code&gt;shared_ptr&lt;/code&gt;所有者超出了范围或放弃所有权，才会删除原始指针，大小为两个指针，一个用于对象，一个用于引用计数。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;li&gt;weak_ptr\n&lt;blockquote&gt;\n&lt;p&gt;结合&lt;code&gt;shared_ptr&lt;/code&gt;使用的特殊智能指针，提供一个或多个&lt;code&gt;shared_ptr&lt;/code&gt;实例所拥有的对象的访问，但是不会增加引用计数。如果你想观察某个对象，但是不需要保持活动状态，则可以使用该智能指针。在某些情况下，需要断开&lt;code&gt;shared_ptr&lt;/code&gt;实例间的循环引用。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h1&gt;如何正确的选择智能指针&lt;/h1&gt;\n&lt;p&gt;智能指针只需要区分需不需要共享使用，如果外部需要使用这个对象，使用&lt;code&gt;shared_ptr&lt;/code&gt;，否则就使用unique_ptr进行独占使用。&lt;/p&gt;\n&lt;h1&gt;陷阱和坑&lt;/h1&gt;\n&lt;ul&gt;\n&lt;li&gt;不要使用相同的内置指针来初始化多个智能指针&lt;/li&gt;\n&lt;li&gt;不要主动回收智能指针内原始指针的内存&lt;/li&gt;\n&lt;li&gt;不要使用智能指针的get来初始化或者reset另一个智能指针&lt;/li&gt;\n&lt;li&gt;智能指针管理的资源只会默认删除new分配的内存，如果不是new分配的，则需要使用删除器&lt;/li&gt;\n&lt;/ul&gt;</p>\n",
        "id": "942a38b40f95acee16c02efc161cba2a",
        "link": "/2018/08/29/智能指针"
    },
    {
        "attributes": {
            "title": "卷积神经网络简述",
            "date": "2018-07-14T16:00:32.000Z",
            "tags": "Deep Learning",
            "categories": "Deep Learning"
        },
        "body": "<p>&lt;p&gt;前言： 我太菜了… 本来想着写个小例子，结果写到一半发现自己其实根本不会，我还是撸C++去吧。\n卷积神经网络(Convolutional Neural Network)是一种前馈神经网络。它的人工神经元可以响应一部分覆盖范围内的周围单元，对于大型图像处理有出色的表现。\n卷积神经网络由一个或多个卷积层和顶端的全连通层组成，同时也包含关联权重和池化层。这一结构可以使得卷积神经网络能够利用输入数据的二维结构。与其他深度学习结构相比，卷积神经网络在图像和声音上能够给出更好的结果，这一模型也可以用反向传播算法进行训练。相比较于其他神经网络、前馈神经网络，卷积神经网络需要考虑的参数更少，使之成为一种颇具吸引力的深度学习结构。&lt;/p&gt;\n&lt;h2&gt;结构&lt;/h2&gt;\n&lt;h3&gt;卷积层&lt;/h3&gt;\n&lt;p&gt;卷积神经网络中每层卷积层由若干卷积单元构成。每个卷积单元的参数都可以由反向传播算法来调整。卷积运算的目的是提取输入的不同特征，第一层卷积可能只提取非常小的特征，更多层的网络只能从低级特征中提取更复杂的特征。&lt;/p&gt;\n&lt;h3&gt;激活函数&lt;/h3&gt;\n&lt;p&gt;运行时激活神经网络中某一部分神经元，将激活信息向后传入下一层神经网络。神经网络之所以能解决非线性问题，如语音和图像，本质上就是激活函数加入了非线性的因素，弥补了线性模型的表达力，把“激活的神经元的特征”通过函数保留并映射到下一层。\n因为神经网络的数学基础是处处可微，所以选取的激活函数要能保证数据输入与输出也是可微的，介绍四种函数：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;sigmoid\n&lt;img src=&quot;sigmoid.svg&quot; alt=&quot;sigmoid&quot;&gt;\n&lt;img src=&quot;sigmoid.png&quot; alt=&quot;sigmoid&quot;&gt;\nsigmoid函数是传统神经网络中最常用的激活函数之一，它的优点在于，它的输出映射在(0, 1)内，单调连续，非常适合作为输出层，并且求导比较容易，缺点也比较明显，因为软饱和性，一旦落入饱和区，f'(x)就会变得接近0，很容易产生阶梯消失。&lt;/li&gt;\n&lt;li&gt;tanh\n&lt;img src=&quot;tanh.jpg&quot; alt=&quot;&quot;&gt;\n&lt;img src=&quot;TanhReal.gif&quot; alt=&quot;&quot;&gt;\ntanh函数也具有软饱和性，因为它的输出以0为中心，收敛速度比sigmoid要快，但是仍然无法解决梯度消失问题。&lt;/li&gt;\n&lt;li&gt;relu\n&lt;img src=&quot;relu.svg&quot; alt=&quot;&quot;&gt;\n&lt;img src=&quot;relu.png&quot; alt=&quot;&quot;&gt;\nrelu是目前最受欢迎的激活函数，softplus可以看做是relu的平滑版本。使用线性整流（Rectified Linear Units, ReLU）f(x)=max(0,x)作为这一层神经的激励函数（Activation function）。它可以增强判定函数和整个神经网络的非线性特性，而本身并不会改变卷积层。&lt;/li&gt;\n&lt;li&gt;dropout\n一个神经元将以概率决定是否要被抑制，被抑制的神经元会被暂时认为不属于网络，但是它的权重将会被保留。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;池化层&lt;/h3&gt;\n&lt;p&gt;池化是卷积神经网络中另外一个非常重要的概念。它实际上是形式的降采样。有多种不同形式的非线性池化函数，而其中“最大池化”是最为常见的。它是将输入的图像划分为若干个矩形区域，对每个子区域输出最大值。直觉上，这种机制能够有效地原因在于，在发现一个特征之后，它的精确位置远不及它和其他特征的相对位置的关系重要。池化层会不断地减小数据的空间大小，因此参数的数量和计算量也会下降，这在一定程度上也控制了过拟合。通常来说，CNN的卷积层之间都会周期性地插入池化层。\n池化层通常会分别作用于每个输入的特征并减小其大小。目前最常用形式的池化层是每隔2个元素从图像划分出2x2的区块，然后对每个区块中的4个数取最大值。这将会减少75%的数据量。\n除了最大池化之外，池化层也可以使用其他池化函数，例如“平均池化”甚至“L2-范数池化”等。过去，平均池化的使用曾经较为广泛，但是最近由于最大池化在实践中的表现更好，平均池化已经不太常用。\n由于池化层过快地减少了数据的大小，目前文献中的趋势是使用较小的池化滤镜，甚至不再使用池化层。&lt;/p&gt;\n&lt;h3&gt;损失函数层&lt;/h3&gt;\n&lt;p&gt;损失函数层用于决定训练过程如何来“惩罚”网络的预测结果和真实结果之间的差异，它通常是网络的最后一层。各种不同的损失函数适用于不同类型的任务。例如，Softmax交叉熵损失函数常常被用于在K个类别中选出一个，而Sigmoid交叉熵损失函数常常用于多个独立的二分类问题。欧几里德损失函数常常用于结果取值范围为任意实数的问题。&lt;/p&gt;</p>\n",
        "id": "677932e46bf830b7fe473c7c094d5a8b",
        "link": "/2018/07/14/卷积神经网络简述"
    },
    {
        "attributes": {
            "title": "深度学习笔记",
            "date": "2018-07-14T10:01:01.000Z",
            "tags": "Deepin Learning",
            "categories": "Deepin Learning"
        },
        "body": "<p>&lt;p&gt;机器学习，顾名思义当然是用机器来学习。本文完。\n上面的话是开玩笑，各位客官不要走…&lt;/p&gt;\n&lt;h2&gt;&lt;strong&gt;人工智能&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;人工智能其实不算新名词，在人类历史的长河中，就有过很多关于技艺高超的工匠制造人造人，并赋予智慧。现代的人工智能则始于古典哲学家用机械符号的观点来解释人类思考过程的尝试。\n20世纪50年代，人类信心满满的开始了人工智能的征途，但是这趟旅程并不平坦，1973年美英两国政府停止了没有明确目标的人工智能项目的研究。七年后又受到日本政府研究规划的刺激，又恢复了拨款，但是在80年代末再次停止了拨款。人工智能的研究就这样在跌宕起伏中不断的前进。\n时光荏苒，人类进入了21世纪，这次人工智能领域终于迎来了新的人生，计算机已经得到了充足的发展，计算能力与日俱增，曾经因为计算能力不足导致无法研究的项目和算法也可以得到重新的验证，当然除了计算能力提升带来的提升，更多的是幕后的工作者不断的改进和完善各种算法，对不同的课题进行长期深度的研究。\n人工智能再次进入大众视野是2016年，来自Google公司的AlphaGo成功击败了韩国选手李世石，成为第一个在围棋上战胜人类的人工智能，立下了里程碑。在AlphaGo进行比赛前，人类还自信的认为机器无法在围棋赢得胜利(&lt;s&gt;人类疯狂的奶自己…&lt;/s&gt;)。\nAlphaGo采用了蒙特卡洛树搜索和两个深度神经网络结合的办法，蒙特卡洛树搜索是基于某种决策过程的启发式搜索算法，两个深度神经网络一个以估值网络来评估大量的选点，一个则以走棋网络来选择落子，在这种设计下，系统可以结合树搜索来长远推断，就像人脑一样评估落点，提高下棋能力。&lt;/p&gt;\n&lt;h2&gt;&lt;strong&gt;人工智能、机器学习和深度学习的区别&lt;/strong&gt;&lt;/h2&gt;\n&lt;p&gt;我也对这三个名词产生过疑问，其实很简单：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;人工智能： 人工实现的智能&lt;/li&gt;\n&lt;li&gt;机器学习： 一种人工智能的实现方法&lt;/li&gt;\n&lt;li&gt;深度学习： 一种机器学习的实现方法&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;机器学习&lt;/h3&gt;\n&lt;p&gt;机器学习是人工智能的一个分支，人工智能的研究历史中有一条以“推理”为重点，到以“知识”为重点，再到以“学习”为重点的自然、清晰的脉络。显然机器学习是是实现人工智能的一条途径，即以机器学习为手段解决人工智能中的问题。\n机器学习在近30多年已发展为一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、计算复杂性理论等多门学科。机器学习理论主要是设计和分析一些让计算机可以自动“学习”的算法。机器学习算法是一类从数据中自动分析获得规律，并利用规律对未知数据进行预测的算法。因为学习算法中涉及了大量的统计学理论，机器学习与推断统计学联系尤为密切，也被称为统计学习理论。算法设计方面，机器学习理论关注可以实现的，行之有效的学习算法。很多推论问题属于无程序可循难度，所以部分的机器学习研究是开发容易处理的近似算法。&lt;/p&gt;\n&lt;h3&gt;机器学习的应用&lt;/h3&gt;\n&lt;p&gt;机器学习已广泛应用于数据挖掘、计算机视觉、自然语言处理、生物特征识别、搜索引擎、医学诊断、检测信用卡欺诈、证券市场分析、DNA序列测序、语音和手写识别、战略游戏和机器人等领域。&lt;/p&gt;\n&lt;h3&gt;机器学习的定义&lt;/h3&gt;\n&lt;p&gt;机器学习有下面几种定义：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;机器学习是一门人工智能的科学，该领域的主要研究对象是人工智能，特别是如何在经验学习- 中改善具体算法的性能。&lt;/li&gt;\n&lt;li&gt;机器学习是对能通过经验自动改进的计算机算法的研究。&lt;/li&gt;\n&lt;li&gt;机器学习是用数据或以往的经验，以此优化计算机程序的性能标准。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;机器学习的分类&lt;/h3&gt;\n&lt;p&gt;机器学习可以大概分为以下几类：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;监督学习：从给定的训练数据集中学习出一个函数，当新的数据到来时，可以根据这个函数预测结果。监督学习的训练集要求是包括输入和输出，也可以说是特征和目标。训练集中的目标是由人标注的。常见的监督学习算法包括回归分析和统计分类。&lt;/li&gt;\n&lt;li&gt;半监督学习： 介于监督学习与无监督学习之间。&lt;/li&gt;\n&lt;li&gt;无监督学习： 与监督学习相比，训练集没有人为标注的结果。常见的无监督学习算法有生成对抗网络（GAN）、聚类。&lt;/li&gt;\n&lt;li&gt;强化学习： 通过观察来学习做成如何的动作。每个动作都会对环境有所影响，学习对象根据观察到的周围环境的反馈来做出判断。\n监督学习和无监督学习的差别在于训练数据是否人为标记，他们都有训练集，都有输入输出。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;机器学习的算法&lt;/h3&gt;\n&lt;p&gt;具体的机器学习算法有：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;构造间隔理论分布：聚类分析和模式识别\n&lt;ul&gt;\n&lt;li&gt;人工神经网络&lt;/li&gt;\n&lt;li&gt;决策树&lt;/li&gt;\n&lt;li&gt;感知器&lt;/li&gt;\n&lt;li&gt;支持向量机&lt;/li&gt;\n&lt;li&gt;集成学习AdaBoost&lt;/li&gt;\n&lt;li&gt;降维与度量学习&lt;/li&gt;\n&lt;li&gt;聚类&lt;/li&gt;\n&lt;li&gt;贝叶斯分类器&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;构造条件概率：回归分析和统计分类\n&lt;ul&gt;\n&lt;li&gt;高斯过程回归&lt;/li&gt;\n&lt;li&gt;线性判别分析&lt;/li&gt;\n&lt;li&gt;最近邻居法&lt;/li&gt;\n&lt;li&gt;径向基函数核&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;通过再生模型构造概率密度函数：\n&lt;ul&gt;\n&lt;li&gt;最大期望算法&lt;/li&gt;\n&lt;li&gt;概率图模型：包括贝叶斯网和Markov随机场&lt;/li&gt;\n&lt;li&gt;Generative Topographic Mapping&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;近似推断技术：\n&lt;ul&gt;\n&lt;li&gt;马尔可夫链&lt;/li&gt;\n&lt;li&gt;蒙特卡罗方法&lt;/li&gt;\n&lt;li&gt;变分法&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/li&gt;\n&lt;li&gt;最优化：大多数以上方法，直接或者间接使用最优化算法。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h2&gt;人工神经网络&lt;/h2&gt;\n&lt;p&gt;在机器学习中，目前应用最广泛的是人工神经网络(Artificial Neural Network，ANN)，简称神经网络。是一种模仿生物神经网络的结构和功能的数学模型或计算模型，用于对函数进行估计和近似。神经网络由大量的人工神经元连结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统，通俗叫具备学习能力。&lt;/p&gt;\n&lt;h3&gt;人工神经网络的组成&lt;/h3&gt;\n&lt;p&gt;现代神经网络是一种非线性统计行数据建模工具，典型的神经网络具有以下三个部分：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;结构(Architecture): 指定了网络中的变量和它们的拓扑关系。例如，神经网络中的变量可以是神经元连接的权重（weights）和神经元的激励值（activities of the neurons）。&lt;/li&gt;\n&lt;li&gt;激励函数(Activity Rule): 大部分神经网络具有一个短时间尺度的动力学规则，来定义神经元如何根据其他神经元的活动来改变自己的激励值。一般激励值依赖于网络中的权重(即该网络中的参数)。&lt;/li&gt;\n&lt;li&gt;学习规则(Learning Rule): 学习规则指定了网络中的权重如何随着时间推进而调整。这一般被看做是一种长时间尺度的动力学规则。一般情况下，学习规则依赖于神经元的激励值。它也可能依赖于监督者提供的目标值和当前权重的值。例如，用于手写识别的一个神经网络，有一组输入神经元。输入神经元会被输入图像的数据所激发。在激励值被加权并通过一个函数（由网络的设计者确定）后，这些神经元的激励值被传递到其他神经元。这个过程不断重复，直到输出神经元被激发。最后，输出神经元的激励值决定了识别出来的是哪个字母。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;hr&gt;\n&lt;p&gt;在这里我推荐观看3Blue1Brown的三期视频。\n&lt;a href=&quot;https://www.bilibili.com/video/av15532370&quot;&gt;深度学习之神经网络的结构 Part 1 ver 2.0&lt;/a&gt;\n&lt;a href=&quot;https://www.bilibili.com/video/av16144388/&quot;&gt;深度学习之梯度下降法 Part 2 ver 0.9 beta&lt;/a&gt;\n&lt;a href=&quot;https://www.bilibili.com/video/av16577449/&quot;&gt;深度学习之反向传播算法 上/下 Part 3 ver 0.9 beta&lt;/a&gt;&lt;/p&gt;\n&lt;hr&gt;\n&lt;h3&gt;人工神经网络的基础&lt;/h3&gt;\n&lt;p&gt;神经网络的构筑理念是受到生物（人或其他动物）神经网络功能的运作启发而产生的。人工神经网络通常是通过一个基于数学统计学类型的学习方法（Learning Method）得以优化，所以人工神经网络也是数学统计学方法的一种实际应用，通过统计学的标准数学方法我们能够得到大量的可以用函数来表达的局部结构空间，另一方面在人工智能学的人工感知领域，我们通过数学统计学的应用可以来做人工感知方面的决定问题（也就是说通过统计学的方法，人工神经网络能够类似人一样具有简单的决定能力和简单的判断能力），这种方法比起正式的逻辑学推理演算更具有优势。\n和其他机器学习方法一样，神经网络已经被用于解决各种各样的问题，例如机器视觉和语音识别。这些问题都是很难被传统基于规则的编程所解决的。\n对人类中枢神经系统的观察启发了人工神经网络这个概念。在人工神经网络中，简单的人工节点，称作神经元（neurons），连接在一起形成一个类似生物神经网络的网状结构。\n人工神经网络目前没有一个统一的正式定义。不过，具有下列特点的统计模型可以被称作是“神经化”的：具有一组可以被调节的权重，换言之，被学习算法调节的数值参数，并且\n可以估计输入数据的非线性函数关系\n这些可调节的权重可以被看做神经元之间的连接强度。\n人工神经网络与生物神经网络的相似之处在于，它可以集体地、并行地计算函数的各个部分，而不需要描述每一个单元的特定任务。神经网络这个词一般指统计学、认知心理学和人工智能领域使用的模型，而控制中央神经系统的神经网络属于理论神经科学和计算神经科学。\n在神经网络的现代软件实现中，被生物学启发的那种方法已经很大程度上被抛弃了，取而代之的是基于统计学和信号处理的更加实用的方法。在一些软件系统中，神经网络或者神经网络的一部分（例如人工神经元）是大型系统中的一个部分。这些系统结合了适应性的和非适应性的元素。虽然这种系统使用的这种更加普遍的方法更适宜解决现实中的问题，但是这和传统的连接主义人工智能已经没有什么关联了。不过它们还有一些共同点：非线性、分布式、并行化，局部性计算以及适应性。从历史的角度讲，神经网络模型的应用标志着二十世纪八十年代后期从高度符号化的人工智能（以用条件规则表达知识的专家系统为代表）向低符号化的机器学习（以用动力系统的参数表达知识为代表）的转变。\n神经网络在早期的进展非常缓慢，第一个问题是基本感知器无法解决异或问题，第二个问题是计算机没有足够的能力处理大型神经网络所需要的计算时间,直到计算机具备更强的计算能力前，神经网络的进展都一直很缓慢。&lt;/p&gt;\n&lt;h3&gt;反向传播算法的出现&lt;/h3&gt;\n&lt;p&gt;后来出现了关键的的进展: 在1975年由Paul Werbos提出的反向传播算法。该算法解决了异或的问题，还能更普遍的训练多层神经网络。反向传播算法在3Blue1Brown的第二期视频中有讲解,视频中采用了通俗易懂的方式来介绍反向传播算法是如何调整神经元的。\n神经网络的又一个关键进展是显卡性能的提升。大家都知道CPU偏向于控制而非计算，这就造成早期处理训练神经网络的代价非常大，使用CPU来训练神经网络的速度非常慢，而现代图形处理器有强大的并行处理能力和可编程流水线，令流处理器也可以处理非图形数据。特别是在面对单指令流多数据流（SIMD）且数据处理的运算量远大于数据调度和传输的需要时，通用图形处理器在性能上大大超越了传统的中央处理器应用程序。现在我们可以轻易的使用Nvidia的CUDA方案或者OpenCL来编写代码，并使用显卡来进行计算。&lt;/p&gt;\n&lt;h3&gt;多层前馈网络&lt;/h3&gt;\n&lt;p&gt;一种常见的多层结构的前馈网络（Multilayer Feedforward Network）由三部分组成：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;输入层: 众多神经元接受大量非线性的信息，输入的信息被称为输入向量。&lt;/li&gt;\n&lt;li&gt;隐含层: 是输入层和输出层之间众多神经元和链接组成的各个层面。隐含层可以有一层或多层。隐含层的节点（神经元）数目不定，但数目越多神经网络的非线性越显著，从而神经网络的强健性（robustness）（控制系统在一定结构、大小等的参数摄动下，维持某些性能的特性）更显著。习惯上会选输入节点1.2至1.5倍的节点。&lt;/li&gt;\n&lt;li&gt;输出层: 在神经元链接中传输、分析、权衡，形成输出结果。输出的信息称为输出向量。\n这种网络一般称为感知器（对单隐藏层）或多层感知器（对多隐藏层），神经网络的类型已经演变出很多种，这种分层的结构也并不是对所有的神经网络都适用。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;h3&gt;理论性质&lt;/h3&gt;\n&lt;h4&gt;计算能力&lt;/h4&gt;\n&lt;p&gt;多层感知器（MLP）是一个通用的函数逼近器，由Cybenko定理证明。然而，证明不是由所要求的神经元数量或权重来推断的。Hava Siegelmann和Eduardo D. Sontag的工作证明了，一个具有有理数权重值的特定递归结构（与全精度实数权重值相对应）相当于一个具有有限数量的神经元和标准的线性关系的通用图灵机。他们进一步表明，使用无理数权重值会产生一个超图灵机。\n####　容量\n人工神经网络模型有一个属性，称为“容量”，这大致相当于他们模拟任何函数的能力。它与网络中可以存储的信息量有关，也与复杂性有关。&lt;/p&gt;\n&lt;h4&gt;收敛性&lt;/h4&gt;\n&lt;p&gt;模型并不总是收敛到唯一解，因为它取决于一些因素。首先，函数可能存在许多局部极小值，这取决于成本函数和模型。其次，在远离局部最小值时，优化方法可能无法保证收敛。第三，对大量的数据或参数，一些方法变得不切实际。在一般情况下，我们发现，理论保证的收敛不能成为实际应用的一个可靠的指南。&lt;/p&gt;\n&lt;h4&gt;综合统计&lt;/h4&gt;\n&lt;p&gt;在目标是创建一个普遍系统的应用程序中，过度训练的问题出现了。这出现在回旋或过度具体的系统中当网络的容量大大超过所需的自由参数。为了避免这个问题，有两个方向：第一个是使用交叉验证和类似的技术来检查过度训练的存在和选择最佳参数如最小化泛化误差。二是使用某种形式的正规化。这是一个在概率化（贝叶斯）框架里出现的概念，其中的正则化可以通过为简单模型选择一个较大的先验概率模型进行；而且在统计学习理论中，其目的是最大限度地减少了两个数量：“风险”和“结构风险”，相当于误差在训练集和由于过度拟合造成的预测误差。&lt;/p&gt;\n&lt;h3&gt;一个小例子&lt;/h3&gt;\n&lt;p&gt;现在作为深度学习入门的是手写数字识别，3Blue1Brown的三期视频就是基于此。\n通过神经网络来学习如何识别手写数字，本质上就是人类通过算法来分解图像的信息，比如数字9，它可以认为是竖线和圆的组合，输出层是9，则隐含层需要处理竖线和圆，输入层输入的是手写9的全部像素，隐含层就是神经网络的核心，它需要只要竖线和圆又是由什么组成，最后一步步的分解为一个像素，再通过反向传播算法来训练和调节隐含层中的偏置和权值，最后整个网络就可以学习到正确的识别手写数字。\n深度学习就是通过人工神经网络来告诉计算机结果是如何产生的，以及如何通过结果来调整网络结构，达到预测和处理未标记的信息。&lt;/p&gt;</p>\n",
        "id": "1fd24681120c975068df37c7592b4dcd",
        "link": "/2018/07/14/深度学习笔记"
    },
    {
        "attributes": {
            "title": "C plus plus Iterator 笔记",
            "date": "2018-07-09T13:05:12.000Z",
            "tags": [
                "C++"
            ],
            "categories": "C++"
        },
        "body": "<p>&lt;p&gt;&lt;img src=&quot;http://manbizhi.com/images/20267945.jpg&quot; alt=&quot;放张好看的图让咱兴奋一下&quot;&gt;\n本文记录了咱对迭代器的一些理解\nC++ 标准库提供了三种类型组件:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;容器&lt;/li&gt;\n&lt;li&gt;迭代器&lt;/li&gt;\n&lt;li&gt;算法\n容器是指存储某种类型的结构，容器有两种:&lt;/li&gt;\n&lt;li&gt;顺序容器 (vector、list和string等，是元素的有序集合。)&lt;/li&gt;\n&lt;li&gt;关联容器 (set、map等，是包含查找元素的键值。 )\n遍历容器的方式之一就是迭代器，迭代器是一种泛型指针，普通指针指向一块内存，迭代器指向容器中的一个位置。STL的每个模板容器中，都定义了一组对应的迭代器类，使用迭代器和算法，就可以访问容器中特定位置的元素，而无需关心元素的类型。\n每种容器都定义了一对begin和end的函数，用于返回迭代器。如果容器中有元素的话，begin返回的迭代器指向第一个元素。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;std::list&lt;int&gt;::iterator it = list.begin();\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上述语句把it初始化为由list的begin返回的迭代器，如果list不为空，it将指向该元素list[0]。\n由end操作返回的迭代器指向list的末端元素的下一个，通常指超出末端迭代器(off-the-end-iterator)，表明指向一个不存在的元素，如果容器为空，begin返回的迭代器将和end相同，在使用中，可以通过判断end来检查是否处理完容器种所有的元素。\n迭代器类型定义了一些操作来获取迭代器所指向的元素，并允许程序员将迭代器从一个元素移动到另一个元素。\n遍历列表：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;std::list&lt;int&gt; list\nfor (std::list&lt;int&gt;::const_iterator it = list.constBegin(); it != list.constEnd(); ++it) {\n// 通过迭代器访问元素需要解引用。\nstd::cout &lt;&lt; *it &lt;&lt; std::endl;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;std::list&lt;int&gt; list;\nstd::sort(list.begin(), list.end(), [=] (int _i1, int _i2) {\nreturn _i1 &lt; _i2;\n});\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;上面的示例代码是对一个int类型的list进行排序，&lt;/p&gt;</p>\n",
        "id": "e7ab00c1db3889f7ca1e872301a7a976",
        "link": "/2018/07/09/CplusplusIterator笔记"
    },
    {
        "attributes": {
            "title": "在DeepinLinux下使用nVidia CUDA",
            "date": "2018-06-28T03:21:50.000Z",
            "tags": [
                "Linux",
                "nVidia Cuda"
            ]
        },
        "body": "<p>&lt;p&gt;CUDA（Compute Unified Device Architecture，统一计算架构）是由NVIDIA所推出的一种集成技术，是该公司对于GPGPU的正式名称。通过这个技术，用户可利用NVIDIA的GeForce 8以后的GPU和较新的Quadro GPU进行计算。亦是首次可以利用GPU作为C-编译器的开发环境。NVIDIA营销的时候，往往将编译器与架构混合推广，造成混乱。实际上，CUDA可以兼容OpenCL或者自家的C-编译器。无论是CUDA C-语言或是OpenCL，指令最终都会被驱动程序转换成PTX代码，交由显示核心计算。\n在论坛上看到有些用户希望在deepin下使用CUDA，但是他们采取的做法往往是手动下载nvidia的二进制文件，直接进行安装。\n但是这样会破坏一部分的glx链接，导致卸载的时候无法彻底恢复，结果就是系统因为卸载nvidia驱动而废掉，所以我推荐使用包管理器的方式安装nvidia驱动和cuda相关的东西，尽量不要手动修改。\n需要安装的很少，只有五个包，不过会依赖很多nvidia的库，总量还是有一些的。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt install nvidia-cuda-toolkit nvidia-profiler nvidia-visual-profiler nvidia-cuda-doc nvidia-cuda-dev\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;nvcc是cuda的编译器，它目前只支持g++5，所以还需要安装g++5。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt install g++-5\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后，重启一下计算机。\n&lt;a href=&quot;https://bingliu221.gitbooks.io/learn-cuda-the-simple-way/content/chapter2.html/&quot;&gt;这里有个小栗子，可以用来测试cuda是否能够成功编译和运行&lt;/a&gt;\n&lt;strong&gt;将以下代码保存为 main.cu&lt;/strong&gt;&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;#include &lt;stdio.h&gt;\n<strong>global</strong> void vector_add(const int *a, const int *b, int *c) {\n*c = *a + *b;\n}\nint main(void) {\nconst int a = 2, b = 5;\nint c = 0;\nint *dev_a, *dev_b, *dev_c;\ncudaMalloc((void **)&amp;dev_a, sizeof(int));\ncudaMalloc((void **)&amp;dev_b, sizeof(int));\ncudaMalloc((void **)&amp;dev_c, sizeof(int));\ncudaMemcpy(dev_a, &amp;a, sizeof(int), cudaMemcpyHostToDevice);\ncudaMemcpy(dev_b, &amp;b, sizeof(int), cudaMemcpyHostToDevice);\nvector_add&lt;&lt;&lt;1, 1&gt;&gt;&gt;(dev_a, dev_b, dev_c);\ncudaMemcpy(&amp;c, dev_c, sizeof(int), cudaMemcpyDeviceToHost);\nprintf(&quot;%d + %d = %d, Is that right?\\n&quot;, a, b, c);\ncudaFree(dev_a);\ncudaFree(dev_b);\ncudaFree(dev_c);\nreturn 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;编译:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;nvcc main.cu\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;运行:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;./a.out\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果一切顺利，在编译的时候就不会有报错，不过在我的环境下nvcc会有架构被弃用的警告，本着只要不error就算没事的原则，我们无视这条警告即可。\n输出结果:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;2 + 5 = 0, Is that right?\n&lt;/code&gt;&lt;/pre&gt;</p>\n",
        "id": "cc32bb7b6f83442bccb451fb05256a0d",
        "link": "/2018/06/28/在DeepinLinux下使用nVidiaCUDA"
    },
    {
        "attributes": {
            "title": "deepin待机后键盘和触摸板无法使用的解决方法",
            "date": "2018-06-25T06:01:22.000Z",
            "tags": "Linux"
        },
        "body": "<p>&lt;p&gt;笔记本一直使用的bumblebee来省电，毕竟我也不想笔记本的电只够从一张桌子移动到另一张桌子，但是今天在调待机唤醒后dde-dock崩溃的问题，我需要切换到私有驱动下，因为笔记本使用bumblebee需要使用acpi的参数，否则会见图形就死。\n一切准备就绪以后，我开始调试dde-dock，通过codedump已经知道崩溃在wifi列表为空时访问了first节点，但是当我开始测试修复的代码时，发生了很意外的事情，恢复待机以后键盘和触摸板无法使用了。\n虽然之前我也偶尔会用用私有驱动，但是还没遇到过无法键盘和触摸板无法使用的情况。想到论坛好像也有人报了类似的问题，恢复待机以后无wifi和外置键盘无法使用，刚好可以趁这个机会调试一下。\n/var/log/Xorg.0.log里看到了大量的synaptics错误，然后该模块被卸载，键盘则是没看到什么信息。\n尝试重新modprobe synaptics模块，但是失败了，然后在/etc/modprobe.d/nvidia.conf里看到了几行配置。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# These aliases are defined in <em>all</em> nvidia modules.</p>\n<h1>Duplicating them here sets higher precedence and ensures the selected</h1>\n<h1>module gets loaded instead of a random first match if more than one</h1>\n<h1>version is installed. See #798207.</h1>\n<p>#alias\tpci:v000010DEd00000E00sv<em>sd</em>bc04sc80i00*\tnvidia\n#alias\tpci:v000010DEd00000AA3sv<em>sd</em>bc0Bsc40i00*\tnvidia\n#alias\tpci:v000010DEd<em>sv</em>sd<em>bc03sc02i00</em>\t\tnvidia\n#alias\tpci:v000010DEd<em>sv</em>sd<em>bc03sc00i00</em>\t\tnvidia\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;似乎是通配出错了，匹配到了键盘和触摸板，然后就无法使用了。刚好deepin 15.6升级了nvidia驱动，所以是现在才会出这个问题。&lt;/p&gt;</p>\n",
        "id": "07b810a59a42de1ae38c4e8313da3067",
        "link": "/2018/06/25/deepin待机后键盘和触摸板无法使用的解决方法"
    },
    {
        "attributes": {
            "title": "dreamscene插件开发<等待填坑>",
            "date": "2018-06-05T05:25:40.000Z",
            "tags": "Linux 填坑"
        },
        "body": "<p>&lt;p&gt;本篇会介绍一下deepin-dreamscene的插件机制。&lt;/p&gt;</p>\n",
        "id": "4b3152fbed42429ef6d5e87985be5436",
        "link": "/2018/06/05/dreamscene插件开发<等待填坑>"
    },
    {
        "attributes": {
            "title": "Dock插件开发<等待填坑>",
            "date": "2018-05-23T05:22:12.000Z",
            "tags": "Linux"
        },
        "body": "<p>&lt;p&gt;从零构建 dde-dock 的插件\n本教程将展示一个简单的 dde-dock 插件的开发过程，插件开发者可跟随此步骤为 dde-dock 创造出更多具有丰富功能的插件。\n在本教程中，将创建一个可以实时显示用户家目录(~/)使用情况的小工具。\n插件的工作原理\ndde-dock 插件本质是一个按 Qt 插件标准所开发的共享库文件(so)。通过 dde-dock 预定的规范与提供的接口，共同完成 dde-dock 的功能扩展。\n准备环境\n插件的开发环境可以是任意的，只要是符合 Qt 插件规范及 dde-dock 插件规范的共享库文件，都可以被当作 dde-dock 插件载入。下面以 Qt + qmake 为例进行说明：\n安装依赖\n以 Deepin 15.5.1 环境为基础，至少先安装如下的包：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;dde-dock-dev&lt;/li&gt;\n&lt;li&gt;qt5-qmake&lt;/li&gt;\n&lt;li&gt;qtbase5-dev-tools&lt;/li&gt;\n&lt;li&gt;libqt5core5a&lt;/li&gt;\n&lt;li&gt;libqt5widgets5&lt;/li&gt;\n&lt;li&gt;pkg-config\n基本的项目结构\n创建必需的项目目录与文件\n插件名称叫做home_monitor，所以创建以下的目录结构：&lt;/li&gt;\n&lt;/ul&gt;\n&lt;pre&gt;&lt;code&gt;home_monitor\n├── home_monitor.json\n├── homemonitorplugin.cpp\n├── homemonitorplugin.h\n└── home_monitor.pro\n&lt;/code&gt;&lt;/pre&gt;</p>\n",
        "id": "c336284ddfdff555d6b5585d1681b2bd",
        "link": "/2018/05/23/Dock插件开发<等待填坑>"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "Linux的PAM是什么",
            "subtitle": "我的linux日常",
            "date": "2018-04-01T12:16:08.000Z",
            "author": "张丁元",
            "tags": [
                "Linux"
            ]
        },
        "body": "<p>&lt;p&gt;本文会基础的介绍一下PAM是什么，让你能够回答PAM是什么、PAM有什么用、如何根据需求自己开发PAM模块。&lt;/p&gt;\n&lt;h3&gt;PAM是什么&lt;/h3&gt;\n&lt;p&gt;PAM即可插拔认证模块。它提供了一个所有服务的中心验证机制，适用于普通登录、ssh登录等需要进行身份认证的系统中。&lt;/p&gt;\n&lt;h3&gt;为什么使用PAM&lt;/h3&gt;\n&lt;p&gt;为了安全起见，计算机只能给通过授权的用户进行使用，在创建用户时，密码会被加密保存在/etc/passwd中,在用户登录时，重新计算密码，然后在/etc/passwd中进行对比。\n除了上面这种，还有其他方式的验证，比如现在经常使用的指纹认证，其核心思想都是检查内容是否匹配。但是这些方案都有一些通病，那就是需要随着应用程序一起编译来使用，如果认证系统有问题，或者更新了算法，就需要重新编译才能使用。&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;鉴于以上原因，人们开始寻找一种更佳的替代方案：一方面，将鉴别功能从应用中独立出来，单独进行模块化设计，实现和维护；另一方面，为这些鉴别模块建立标准 API，以便各应用程序能方便的使用它们提供的各种功能；同时，鉴别机制对其上层用户（包括应用程序和最终用户）是透明的。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h3&gt;PAM是如何工作的&lt;/h3&gt;\n&lt;p&gt;&lt;img src=&quot;Linux%E7%9A%84PAM%E6%98%AF%E4%BB%80%E4%B9%88/PAM%E7%BB%93%E6%9E%84.png&quot; alt=&quot;&quot;&gt;\nPAM采用了分层的模块式开发，提供了四种类型的模块:&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;认证管理&lt;/li&gt;\n&lt;li&gt;账号管理&lt;/li&gt;\n&lt;li&gt;会话管理&lt;/li&gt;\n&lt;li&gt;口令管理\n这四个接口就可以满足用户的认证和管理。一个模块可以同时属于多种类型，只需实现对应的函数就可以。\n目前PAM的实现有以下三种：&lt;/li&gt;\n&lt;/ul&gt;\n&lt;blockquote&gt;\n&lt;ol&gt;\n&lt;li&gt;Linux-PAM: Linux-PAM 涵盖了本文中讨论的所有 PAM。在任何一个 Linux 平台中的 PAM 的主要结构都类似于 Linux-PAM 版本。&lt;/li&gt;\n&lt;li&gt;OpenPAM: OpenPAM 是由 NAI 实验室的 Dag-Erling Smorgrav 开发的另一个 PAM 实现，属于 DARPA-CHATS 研究项目。由于它是开源的，因此它主要由 FreeBSD、NetBSD 及应用程序（加上 Mac OS X）使用。&lt;/li&gt;\n&lt;li&gt;Java™ PAM 或 JPam: PAM 主要是支持 Linux 和 UNIX 的标准验证模块。JPam 将 Java 部分与普通 PAM 联系了起来。JPam 允许基于 Java 的应用程序使用 PAM 模块或工具（如 auth、account、passwd、session 等）。它提供了 JAAS 和直接 API，并且支持大多数 Unix OS 和架构。\n虽然有不同的PAM实现，但是主要功能都是类似的，完成用户的验证。\n想要了解更多，可查看IBM的文档库。\n&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-cn-pam/index.html&quot;&gt;深入 Linux PAM 体系结构&lt;/a&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/blockquote&gt;\n&lt;h3&gt;如何自己开发PAM模块&lt;/h3&gt;\n&lt;p&gt;PAM模块使用一个pam_handle类型的结构当做句柄，也是唯一一个PAM和程序进行通信的结构。\n首先在编写的服务模块的源程序里要包含下列头文件：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;#include &lt;security/pam_modules.h&gt;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;PAM模块是一个个的so动态库。PAM会通过dlopen来装载这些so。四个模块分别需要实现对应的方法，PAM会根据配置文件来调用这些方法。\n每个PAM模块的认证程序都以pam_start开始，以pam_end结束。PAM还提供了pam_get_item和pam_set_item共享有关认证会话的某些公共信息，例如用户名、服务名和密码。应用程序在调用了pam_start以后可以用这些APIs来改变状态信息。实际工作的函数有6个：&lt;/p&gt;\n&lt;table&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;模块类型&lt;/th&gt;\n&lt;th&gt;函数&lt;/th&gt;\n&lt;th&gt;功能&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;认证管理&lt;/td&gt;\n&lt;td&gt;PAM_EXTERN int pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc, const char **argv)&lt;/td&gt;\n&lt;td&gt;认证用户&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;认证管理&lt;/td&gt;\n&lt;td&gt;PAM_EXTERN int pam_sm_setcred(pam_handle_t *pamh, int flags, int argc, const char **argv)&lt;/td&gt;\n&lt;td&gt;设置用户证书&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;账号管理&lt;/td&gt;\n&lt;td&gt;PAM_EXTERN int pam_sm_acct_mgmt(pam_handle_t *pamh, int flags, int argc, const char **argv)&lt;/td&gt;\n&lt;td&gt;账号管理&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;会话管理&lt;/td&gt;\n&lt;td&gt;PAM_EXTERN int pam_sm_open_session(pam_handle_t *pamh, int flags, int argc, const char **argv)&lt;/td&gt;\n&lt;td&gt;打开会话&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;会话管理&lt;/td&gt;\n&lt;td&gt;PAM_EXTERN int pam_sm_close_session(pam_handle_t *pamh, int flags, int argc, const char **argv)&lt;/td&gt;\n&lt;td&gt;关闭会话&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;口令管理&lt;/td&gt;\n&lt;td&gt;PAM_EXTERN int pam_sm_chauthtok(pam_handle_t *pamh, int flags, int argc, const char **argv)&lt;/td&gt;\n&lt;td&gt;设置口令&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;p&gt;同一个模块可以同时支持不同的类型，可以一个模块全部实现这些方法，也可以实现部分。PAM自带的pam_unix.so就是支持四种类型。\n在函数内进行详细的操作，最后返回结果，即可完成整个验证流程。&lt;/p&gt;\n&lt;h3&gt;配置PAM&lt;/h3&gt;\n&lt;p&gt;PAM的配置通常在/etc/pam.d/下。\n模块将按照在配置文件中列出的顺序被调用，这取决于每个条目允许的 Control_flag 的值。Control_flag 值包括：&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;Required：堆栈中的所有 Required 模块必须看作一个成功的结果。如果一个或多个 Required 模块失败，则实现堆栈中的所有 Required 模块，但是将返回第一个错误。&lt;/p&gt;\n&lt;p&gt;Sufficient：如果标记为 sufficient 的模块成功并且先前没有 Required 或 sufficient 模块失败，则忽略堆栈中的所有其余模块并返回成功。&lt;/p&gt;\n&lt;p&gt;Optional：如果堆栈中没有一个模块是 required 并且没有任何一个 sufficient 模块成功，则服务/应用程序至少要有一个 optional 模块成功。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;h3&gt;在程序中使用PAM进行验证&lt;/h3&gt;\n&lt;ol&gt;\n&lt;li&gt;开发PAM验证模块&lt;/li&gt;\n&lt;/ol&gt;\n&lt;pre&gt;&lt;code&gt;#include &lt;security/pam_appl.h&gt;\n#include &lt;security/pam_modules.h&gt;\n#include &lt;stdio.h&gt;\n// 只实现账户认证\nPAM_EXTERN int pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc,\nconst char **argv) {\nchar *username;\nchar password[256];\n//得到用户名\npam_get_user(pamh, &amp;username, &quot;Username: &quot;);\n// 得到密码\nprintf(&quot;Password: &quot;);\ngets(password);\n// 测试判断，如果用户名和密码不相等，就认证失败\nif (strcmp(username, password) != 0) {\nreturn PAM_AUTH_ERR;\n}\nprintf(&quot;Password is: %s\\n&quot;, password);\nreturn PAM_SUCCESS;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;编译:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;gcc -fPIC -fno-stack-protector -c pam_test_mod.c\nsudo ld -x --shared -o /lib/security/pam_test_mod.so pam_test_mod.o\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;还需要修改pam的配置，来加载这个so。编辑/etc/pam.d/common-auth&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;auth [success=1 default=ignore] pam_test_mod.so\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;这里的success的值需要根据实际情况来调整，必须是所有里面的最大值。\n2. 使用模块进行验证&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;// PAM必须的两个头文件\n#include &lt;iostream&gt;\n#include &lt;security/pam_appl.h&gt;\n#include &lt;security/pam_misc.h&gt;\nusing namespace std;\nextern int misc_conv(int num_msg, const struct pam_message **msgm,\nstruct pam_response **response, void *appdata_ptr) {\nreturn PAM_SUCCESS;\n}\nconst struct pam_conv conv = {misc_conv, NULL};\nint main(int argc, char *argv[]) {\n// 初始化\npam_handle_t *pamh = NULL;\nint retval;\nconst char *username = argv[1];\n// 初始化PAM 设置common-auth为验证配置\nif ((pam_start(&quot;common-auth&quot;, username, &amp;conv, &amp;pamh)) != PAM_SUCCESS) {\nreturn -1;\n}\n// //认证用户\nretval = pam_authenticate(pamh, 0);\ncout &lt;&lt; (retval == PAM_SUCCESS ? &quot;SUCCESS\\n&quot; : &quot;Failed\\n&quot;) &lt;&lt; endl;\n// // 结束PAM\nif (pam_end(pamh, retval) != PAM_SUCCESS) {\ncout &lt;&lt; &quot;check_user: failed to release authenticator\\n&quot; &lt;&lt; endl;\nreturn -1;\n}\nreturn retval == PAM_SUCCESS ? 0 : 1;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;编译测试一下:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;g++ -o pam_test pam_test.cc -lpam -lpam_misc\nsudo ./pam_test $USER\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;输出为：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;$ ./pam_test test<br>\nPassword: test\nPassword is: test\nSUCCESS\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h3&gt;总结&lt;/h3&gt;\n&lt;p&gt;基于PAM认证体系，我们可以根据自己的需求任意的扩展linux账户，linux下的pbis-open，就是基于PAM扩展出来的一个AD域登录模块，它提供了一个pam_lsass.so的文件，来进行账户的验证。我们也可以自己设计一套认证流程，只需要满足上面的接口要求就可以。&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;提供机制，而非策略&lt;/p&gt;\n&lt;/blockquote&gt;</p>\n",
        "id": "f0eead78c7e0c2081f9998024c6be8d3",
        "link": "/2018/04/01/Linux的PAM是什么"
    },
    {
        "attributes": {
            "title": "重构dde-session-ui",
            "date": "2018-03-11T11:48:01.000Z",
            "tags": "Linux"
        },
        "body": "<p>&lt;p&gt;dde-session-ui里面包含了很多项目，是一个集合，但是其中的代码缺少合理的维护，以至于已经到了必须重构才能继续开发和维护，在支持AD域登录的时候，如果强制加上功能，代码会变得更加糟糕，所以和石博文一块重构了其中非常重要的UserWidget。&lt;/p&gt;\n&lt;h2&gt;重构前的设计&lt;/h2&gt;\n&lt;p&gt;重构前的dde-lock和lightdm-deepin-greeter是非常混乱的，处理逻辑都混杂在一块，虽然能看出有基本的结构，但是整体并未解耦。&lt;/p&gt;\n&lt;h2&gt;重构后的设计&lt;/h2&gt;\n&lt;ul&gt;\n&lt;li&gt;基于User类的处理&lt;/li&gt;\n&lt;li&gt;UserWidget负责提供对用户的处理，暴露出基本的currentUser和LogindUsers。&lt;/li&gt;\n&lt;li&gt;Lock和Greeter的Manager从UserWidget、SessionWidget中获取用户和用户的会话。&lt;/li&gt;\n&lt;li&gt;Manager只负责控件的位置和用户的验证。&lt;/li&gt;\n&lt;li&gt;背景修改为Manager提供模糊的壁纸，FullBackground只提供绘制。\n重构以后用了大概原代码的1/3，启动速度也快了，感觉世界充满了美好… 就是重构历程太辛苦…\n本次也发现了很多自身的问题，基础并没有学好，很多地方都可以使用更好的处理方式【就是管不住这手…】&lt;/li&gt;\n&lt;/ul&gt;</p>\n",
        "id": "5afd25de20666661aa04afc6e2f3cc82",
        "link": "/2018/03/11/重构dde-session-ui"
    },
    {
        "attributes": {
            "title": "使用DTK开发",
            "date": "2018-01-12T11:05:26.000Z",
            "tags": "Linux DTK"
        },
        "body": "<p>&lt;p&gt;&lt;strong&gt;在阅读本篇文章之前，你需要掌握基本的Qt/C++开发知识。&lt;/strong&gt;&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;&lt;strong&gt;注意：本篇文章基于Deepin平台，其他平台请自行补充依赖关系。&lt;/strong&gt;\n先安装DTK的依赖关系。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt install libdtkwidget2 libdtkcore2\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;新建Qt项目，编辑pro文件，添加项目依赖。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;CONFIG += c++14 link_pkgconfig\nPKGCONFIG += dtkwidget\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;DTK目前有两个组件，一个是提供库功能的core，一个是提供控件的widget。\n修改main.cpp,删除QApplication的相关内容，改为DApplication。&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;注意： 使用DTK的组件，需要使用DTK的宏,根据使用的文件来选择对应的宏。&lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;pre&gt;&lt;code&gt;DWIDGET_USE_NAMESPACE\nDCORE_USE_NAMESPACE\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;DTK使用了deepin自己的qt插件，需要在DApplication前调用。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;    DApplication::loadDXcbPlugin();\nDApplication app(argc, argv);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;DApplication中提供了很多方法来设置程序的各种信息，具体请看头文件的定义。\n主窗口由DMainWindow提供，新建类，然后添加DMainWindow的头文件和DTKWIDGET的宏。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;#include &lt;DMainWindow&gt;\nDWIDGET_USE_NAMESPACE\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后修改继承关系，改为继承DMainWindow。DMainWindow提供了一些我们封装的方法。目前为止，该程序的界面已经符合Deepin程序的风格了，我们封装了一些其他控件，使其样式符合我们的风格，如果要在其他Qt程序中使用，也是同样的步骤，载入Qt插件，添加对应的头文件和DTK的宏。&lt;/p&gt;</p>\n",
        "id": "02cc5d121a7d631cc7c19bb87da53884",
        "link": "/2018/01/12/使用DTK开发"
    },
    {
        "attributes": {
            "title": "解决IntelliJ IDEA界面瞎眼",
            "date": "2017-12-25T14:22:25.000Z",
            "tags": "Linux"
        },
        "body": "<p>&lt;p&gt;今天在逛深度论坛的时候，无意间看到了有个回复，是处理IEDA字体很挫的，试了一下，效果非常棒。\n我之前也试了些网上的办法，都没有解决，字体挫的根本看不了，被逼无奈跑到windows下写MOD了。\n&lt;!--more--&gt;\n&lt;a href=&quot;https://bbs.deepin.org/forum.php?mod=redirect&amp;goto=findpost&amp;ptid=150634&amp;pid=418410&amp;fromuid=13250&quot;&gt;原文链接&lt;/a&gt;\n在/etc/profile.d/新建一个文件，用来设置java的环境变量:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo vim /etc/profile.d/z999__java_options.sh\n&lt;/code&gt;&lt;/pre&gt;\n&lt;pre&gt;&lt;code&gt;#!/bin/bash\nopts=&quot; -Dswing.aatext=true  -Dawt.useSystemAAFontSettings=lcd -Djava.net.useSystemProxies=true &quot;\nexport _JAVA_OPTIONS=&quot;<code>echo ${_JAVA_OPTIONS} |sed -Ee 's/-Dawt.useSystemAAFontSettings=\\w+//ig'</code> $opts&quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后注销再登录，就可以看到效果了。\n其实这个解决办法在arch的wiki上有，只不过似乎是我写错了吧，反正是没生效，按照这种方法是可以的，就这么用吧。非常感觉@ihipop。&lt;/p&gt;</p>\n",
        "id": "2a98bf2235d92b995fe26bba3e713e47",
        "link": "/2017/12/25/解决IntelliJIDEA界面瞎眼"
    },
    {
        "attributes": {
            "title": "修复Archlinux的Grub",
            "date": "2017-12-18T09:44:55.000Z",
            "tags": "Linux"
        },
        "body": "<p>&lt;p&gt;又双叒叕不知道怎么搞的，就把arch的grub给弄坏了，但是在重新安装grub的时候，提示了这么一个错误:&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;Could not prepare Boot variable: No space left on device\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;诶不对啊，boot分区还有800M呢，怎么这么快没空间了，根目录也有52G呢，于是谷歌了一把，找到了解决办法.&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo rm /sys/firmware/efi/efivars/dump-*\n&lt;/code&gt;&lt;/pre&gt;\n&lt;blockquote&gt;\n&lt;p&gt;新式 efivarfs (EFI VARiable FileSystem) 接口 (CONFIG_EFIVAR_FS) - 由位于 /sys/firmware/efi/efivars 的 efivarfs 内核模块挂载使用 - 老式 sysfs-efivars 接口的替代品，不限制变量数据大小，支持 UEFI Secure Boot 变量并被上游推荐使用。在3.8版的内核中引入，新的 efivarfs 模块在3.10版内核中从旧的 efivars 内核模块中分离。\n删掉dump文件，就可以正常安装了【有点迷，不应该啊。\n参考资料 : &lt;a href=&quot;https://wiki.archlinux.org/index.php/Unified_Extensible_Firmware_Interface_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)&quot;&gt;Unified_Extensible_Firmware_Interface&lt;/a&gt;&lt;/p&gt;\n&lt;/blockquote&gt;</p>\n",
        "id": "16c7db0daa45cffa0d58459044e9ed05",
        "link": "/2017/12/18/修复Archlinux的Grub"
    },
    {
        "attributes": {
            "title": "解决NVIDIA重新启动以后系统冻结",
            "date": "2017-09-01T17:01:47.000Z",
            "tags": "linux"
        },
        "body": "<p>&lt;p&gt;分期买了一台神舟 Z6-kp5s1，配置还不错，够用三年了，但是在linux下使用bumblebee的时候，发生了问题，折腾了好久，现在把解决方法写出来。\n先说一下问题吧，正常安装bumblebee、bbswitch和nvidia驱动，重新启动系统以后，系统出现冻结，没有任何的输入输出，没有任何日志产生。问题似乎是固件错误，详情查看&lt;a href=&quot;https://github.com/Bumblebee-Project/Bumblebee/issues/764&quot;&gt;讨论&lt;/a&gt;和Linux的bug&lt;a href=&quot;https://bugzilla.kernel.org/show_bug.cgi?id=156341&quot;&gt;讨论&lt;/a&gt;。\n解决方法是看的&lt;a href=&quot;https://witiko.github.io/Optimus-on-Linux/&quot;&gt;Witiko&lt;/a&gt;的博客，通过给内核传递参数来防止系统出现冻结。修改/etc/default/grub,在文件底部追加以下内容：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;# Bumblebee 3.2.1 fix (see https://github.com/Bumblebee-Project/Bumblebee/issues/764)\nGRUB_CMDLINE_LINUX_DEFAULT=&quot;$GRUB_CMDLINE_LINUX_DEFAULT &quot;'acpi_osi=! acpi_osi=&quot;Windows 2009&quot;'\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果不放心，请先禁用登录管理器，防止开机就出现冻结，然后尝试手动启动登录管理器。在tty登录，然后执行：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo systemctl start display-manager.service\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果一切正常，你将会看到图形，并且lspci -v中能看到nvidia已经被禁用，然后使用提供的测试方法进行测试，可以看到nvidia被启用，关闭测试成功，nvidia被禁用。\n提供一下我关闭nvidia以后的使用和续航时间吧。亮度调节为50%，cpu设置为powersave，运行了一下程序：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;telegram&lt;/li&gt;\n&lt;li&gt;chrome&lt;/li&gt;\n&lt;li&gt;dde-file-manager&lt;/li&gt;\n&lt;li&gt;vs code&lt;/li&gt;\n&lt;li&gt;meow&lt;/li&gt;\n&lt;li&gt;若干ss client&lt;/li&gt;\n&lt;li&gt;还有一大堆乱七八糟的服务，懒得写了\n从14:35开始断电测试，到17:17还有23%的电量。&lt;/li&gt;\n&lt;/ul&gt;</p>\n",
        "id": "c645e3813dd8fb761443201118a68bf7",
        "link": "/2017/09/01/解决NVIDIA重新启动以后系统冻结"
    },
    {
        "attributes": {
            "title": "我的代理折腾方案",
            "date": "2017-08-31T20:43:48.000Z",
            "tags": "linux"
        },
        "body": "<p>&lt;p&gt;最近在准备做新的代理设置界面，然后想到自己也改改代理的配置，好方便的用在新的设置上。\n我以前的旧方案是：\nprivoxy --&gt; nginx --&gt; 多个ss客户端 ==== 多个ss服务端\nprivoxy用来将socks转成http，nginx是用来多个ss负载均衡。\n这个方案虽然有点麻烦，但是用起来还是很吼的。\n但是我们改了控制中心对代理的设置，在程序前面加上了proxychains。\n刚好可以和我的privoxy在作用上冲突了。但是其实还有一些其他问题，我是比较懒的人，跳过大陆ip和局域网对我来说是有很大帮助的，这样我就可以设置一个全局代理，而不需要给每个程序单独设置。\n以前肥猫给我介绍过一些方法，当初我弄的时候，还是太图样，总是不能好好的稳定工作，所以暂时放弃了全局代理的方案。provixy其实是可以做这样的事，但是好麻烦，要自己添加很多规则，gfwlist是可以转成它支持的action，但是自己再添加的话，很麻烦。【而我是根比较懒的竹子\n今天把provixy给撤下来了，换上以前用的meow，是用go写的，作用也是转成http，但是它支持的方案比较多，可以直接添加ss，也可以正向代理。当初不用它的原因是我想随机使用一个代理，当时电信和我过不去，一个端口用久了，就封我一天，害得我早上到公司了，先远程到服务器改端口，后来又觉得麻烦，直接开了5个端口，每天改本机，再后来就想随机使用了…  【还有次把我的ssh端口封了一天…\n现在的话，就是变成了这个结构：\nmeow --&gt; nginx --&gt; 多个ss客户端 ==== 多个ss服务端\nnginx还是代替meow做负载均衡，meow的工作就变成了转成http代理和黑白名单。\n虽然不需要新的控制中心的代理方案，现在这套就工作的很好了，但是没有它，我就不会再折腾新的【笑哭&lt;/p&gt;</p>\n",
        "id": "0c57d3194cf9e360c70f9ec0d69f9212",
        "link": "/2017/08/31/我的代理折腾方案"
    },
    {
        "attributes": {
            "title": "开发topbar中的技术问题",
            "date": "2017-08-23T08:54:56.000Z",
            "tags": null
        },
        "body": "<p>&lt;p&gt;这里记录了开发topbar中遇到的坑和一些问题。\n使用Qt提供的qxcb方法注册阴影为dock类型，反而处于DESKTOP和NORMAL之间。其实当初并不是想设置为DOCK类型的，因为这样阴影也会在窗口上方，我希望的是阴影在普通程序下方，在桌面上方。今天曹哥来讲窗管的一些坑，讲到窗管是如何控制窗口的，我的阴影其实是被Qt注册成_NET_WM_STATE_BELOW了。\n&lt;a href=&quot;https://specifications.freedesktop.org/wm-spec/1.3/ar01s05.html&quot;&gt;这里可以看到一些type的介绍&lt;/a&gt;。\n在_NET_WM_STATE中一共有这么几个类型：&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;_NET_WM_STATE_MODAL, ATOM\n_NET_WM_STATE_STICKY, ATOM\n_NET_WM_STATE_MAXIMIZED_VERT, ATOM\n_NET_WM_STATE_MAXIMIZED_HORZ, ATOM\n_NET_WM_STATE_SHADED, ATOM\n_NET_WM_STATE_SKIP_TASKBAR, ATOM\n_NET_WM_STATE_SKIP_PAGER, ATOM\n_NET_WM_STATE_HIDDEN, ATOM\n_NET_WM_STATE_FULLSCREEN, ATOM\n_NET_WM_STATE_ABOVE, ATOM\n<em>NET_WM_STATE_BELOW, ATOM\n<em>NET_WM_STATE_DEMANDS_ATTENTION, ATOM\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果程序被注册成_NET_WM_STATE_BELOW，则会被放置在DESKTOP之上的一层。不是很清楚Qt是出于什么策略，才把我的阴影注册为这个状态，反而是刚好满足了我的需求。\n这要多谢曹哥了，我才终于明白了为什么会这样，以及以后如何正确的设置type。\n&lt;img src=&quot;DeepinScreenshot</em>%E6%A1%8C%E9%9D%A2_20170823201608.png&quot; alt=&quot;DESKTOP1&quot; title=&quot;我老婆&quot;&gt;\n&lt;img src=&quot;DeepinScreenshot</em>%E6%A1%8C%E9%9D%A2_20170823201641.png&quot; alt=&quot;DESKTOP2&quot;&gt;&lt;/p&gt;</p>\n",
        "id": "932abc55aac0e50579fd73d2292c8650",
        "link": "/2017/08/23/开发topbar中的技术问题"
    },
    {
        "attributes": {
            "title": "TKL主题优化 -<转>",
            "date": "2017-08-20T05:05:54.000Z",
            "tags": "Hexo"
        },
        "body": "<p>&lt;p&gt;&lt;a href=&quot;http://suninuni.com/2015/09/30/frontend/hexo/hexo-config/&quot;&gt;http://suninuni.com/2015/09/30/frontend/hexo/hexo-config/&lt;/a&gt;\n这个主题确实挺好的，我也魔改了一部分来达成自己的目的，添加tags是看的这篇文章。&lt;/p&gt;</p>\n",
        "id": "9507bb4b8542c7c5229aa902981e79dc",
        "link": "/2017/08/20/TKL主题优化-<转>"
    },
    {
        "attributes": {
            "title": "debug了两天，只删了一行代码",
            "date": "2017-08-16T18:25:39.000Z",
            "tags": null
        },
        "body": "<p>&lt;p&gt;前言： 项目一定要留一些文档！！ 修bug前一定要知道所有的流程！！！\n这两天一直在修一个用户切换的bug，众所周知，deepin的多用户切换一直都不是正常工作的，确切来说是压根没有正常工作，还好用户不是经常切换，不然早就收到一大波的报告了。\ndde-session-ui项目中包含了以下软件：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;dde-lock&lt;/li&gt;\n&lt;li&gt;dde-shutdown&lt;/li&gt;\n&lt;li&gt;dde-osd&lt;/li&gt;\n&lt;li&gt;lightdm-deepin-greeter&lt;/li&gt;\n&lt;li&gt;dde-switchtogreeter&lt;/li&gt;\n&lt;li&gt;dde-suspend-dialog&lt;/li&gt;\n&lt;li&gt;dde-warning-dialog&lt;/li&gt;\n&lt;li&gt;dde-welcome&lt;/li&gt;\n&lt;li&gt;dde-wm-chooser&lt;/li&gt;\n&lt;li&gt;dde-lowpower&lt;/li&gt;\n&lt;li&gt;dde-offline-upgrader\n大部分项目根据名字就可以知道是做什么的，这是一个软件组的集合。\n而dde-lock和lightdm-deepin-greeter二者有大量重复的功能和代码，这是它俩的工作性质决定的。&lt;/li&gt;\n&lt;/ul&gt;\n&lt;blockquote&gt;\n&lt;p&gt;lightdm-deepin-greeter: display-manager启动的实体，登录的界面是它负责的。\ndde-lock： 用户层面的屏幕锁定，基于我们的设计，和lightdm-deepin-greeter是大致相同的布局。\n而且都包含了用户密码的验证，用户的切换，但是二者工作的层面是不同的，为了方便切换，就有了dde-switchtogreeter，用来协调二者的工作，只需要提供用户名就可以切换。\n然而，虽然这样的想法是很好的，可是当初并没有人写文档，随着人员的变动，现在公司应该没有一个人是比较完整了解整个的工作流程了，用户切换的bug也就这样被留下来了。\n上次修复用户切换的问题，是发现登录以后lightdm-deepin-greeter没有退出，由于不是很清楚linux的登录流程，再加上代码中有不工作的退出代码，当时就改好了退出的问题，这样就引入了第二个问题，而这个问题，就导致了两天三个人在一直查找问题所在。\n这次的问题是发现一直切换greeter，会导致Xorg一直在开新的display，这就很奇怪了，正常来说是不会一直创建才对。\n最开始以为是dde-switchtogreeter的问题，毕竟切换是它在做，dde-switchtogreeter是单文件的c代码，代码没有任何的说明，真的是为切换而生，我从main函数开始自己走了好几遍的流程，一边看着d-feet的数据来验证，然而只发现了一个小问题，整个代码是没啥问题的。\n最后在后端大佬的帮助下，知道了display-manager会自己退掉greeter，不需要自己退，然后我就想起来了以前改的地方，赶紧把退出代码删掉，重新编译，问题得到了解决。\n如果我知道display-manager的工作流程，也许这个问题就不会拖两天了。&lt;/p&gt;\n&lt;/blockquote&gt;</p>\n",
        "id": "72ea220e09cca76106cdcab9bb0bf778",
        "link": "/2017/08/16/debug了两天，只删了一行代码"
    },
    {
        "attributes": {
            "title": "正常的流程在界面上却是bug",
            "date": "2017-08-15T07:43:43.000Z",
            "tags": null
        },
        "body": "<p>&lt;p&gt;排查了一天，最后终于确认了流程，知道了问题所在，不得不说，dde-session-ui这个项目太需要一个文档了，要把工作流程写的非常详细才可以。\n上午收到了一条新任务，是龙芯上新安装的系统需要输入两次密码才可以登录，没有错误提示。近期并没有什么太大的改动，无非是给龙芯也用上了简单重构过的dde-session-ui，怎么会导致这样的问题。\n由于是新安装的系统才会发生，而且是现象一旦发生，就无法重现，这让我头有点大，怎么会有这样的神奇的事情，而且日志中很正常，没有收到message导致密码框被清空。我提交了一个添加了更多日志的，然后重装的龙芯的系统(龙芯重装一次要半个小时)，等重装完了，切换到tty去安装这个包，然后重启lightdm，让我输入密码回车以后，密码消失，我赶紧去看日志，但是日志中并没有我的输出，回车以后肯定会有的一行输出也没有(内心OS：What the fuck is that？)\n我又回去看验证的流程，并没有发现有什么不对的地方，而且是近期才有的，我在自己电脑上使用了龙芯的编译参数，打了一个deb包，并没有发生和龙芯一样的情况（这里并不需要，既然是新安装的系统才会发生，在旧系统上是无法重现的）。\n再然后我暂时没有管这个，先去修其他bug了。忙完以后，我去问了一下其他大佬，大佬给我提了几条让我去看看，是不是起了两个lightdm-deepin-greeter进程，确认一下使用的二进制是不是你加了log的。（然后我又重装龙芯了），之后确认了是我的二进制，也没有起两个进程。但是ps中有两行输出，我以为是起了两个，就让后端大佬看了一下，后端大佬告诉我说一个是shell的进程，一个是本体，还是只有一个进程存在的。我彻底懵逼了，然后后端大佬告诉我，是不是greeter进程写入什么了，之后的验证中内容已经存在，所以就不会重现了。\n其实这个我也想过，但是没考虑太深，greeter并没有操作文件，但是大佬这么一说，我想到有一些dbus的调用，是有写入文件的，然后我把/var/lib/lightdm/lightdm-deepin-greeter目录给删除了，完美重现。\n我的天啊，排查了快一天，居然是这个目录在新装的系统上没有，所以回车登录以后收到了来自dbus的switchToUser，界面重启导致的内容消失，根本不是收到了Message才被清空的，所以我的log也没有打印出来。\n知道了如何重现，可是要怎么修复呢，似乎在greeter上并不能修复，只能去改dde-daemon中LockService，如果文件不存在，就不要发送userChanged的信号。（流程是读取这个文件的信息，和传入的参数进行对比，但是文件是空的，所以被认为不是同一个账户，就发送了信号，也导致了界面上重启，以后无法重现是因为里面已经有内容了）。\n就这样，一个流程很正确，但是表现到界面上时就成了一个bug的问题被解决了。写下这篇内容是为了记录我如何解决对我来说很棘手的问题，其实这个问题并不是很困难，但是对整个工作的流程不是很熟悉，导致浪费了大量的时间在非关键点处理，有空要写一些文档了。&lt;/p&gt;</p>\n",
        "id": "f40ecf809aeac53f3006a1e540877352",
        "link": "/2017/08/15/正常的流程在界面上却是bug"
    },
    {
        "attributes": {
            "title": "在deepin上使用dnsmasq来解决dns解析缓慢",
            "date": "2017-08-11T14:07:26.000Z",
            "tags": null
        },
        "body": "<p>&lt;p&gt;其实这个问题影响并不是很大，只是稍微的增加一点点访问速度，缓存这东西有利有弊。\n在写完这篇文章以后，我就不用dnsmasq了，现在用的是github上的&lt;a href=&quot;https://github.com/chengr28/Pcap_DNSProxy&quot;&gt;Pcap_DNSProxy&lt;/a&gt;。用来防止dns污染的。\n根据&lt;a href=&quot;https://stackoverflow.com/questions/11020027/dns-caching-in-linux&quot;&gt;https://stackoverflow.com/questions/11020027/dns-caching-in-linux&lt;/a&gt; 中回答者提供的信息来看，linux发行版是不提供dns解析缓存的，上面提到的nscd也不在deepin的预装列表中，所以我们只能自己动手丰衣足食了。\n首先安装口碑较好的dnsmasq，来为我们提供dns缓存。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt install dnsmasq\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;如果是deepin最新的2015.4.1版本中安装，安装结束会提醒一个错误，这个错误的解决办法来自&lt;a href=&quot;https://stackoverflow.com/questions/16939306/i-cant-restart-my-dnsmasq-service-so-my-fog-server-wont-work&quot;&gt;https://stackoverflow.com/questions/16939306/i-cant-restart-my-dnsmasq-service-so-my-fog-server-wont-work&lt;/a&gt;.\n这个错误似乎是因为/usr/share/dns/root.ds文件更新后结构导致的错误。\n编辑/etc/init.d/dnsmasq，并找到&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;ROOT_DS=&quot;/usr/share/dns/root.ds&quot;\nif [ -f $ROOT_DS ]; then\nDNSMASQ_OPTS=&quot;$DNSMASQ_OPTS <code>sed -e s/&amp;quot;. IN DS &amp;quot;/--trust-anchor=.,/ -e s/&amp;quot; &amp;quot;/,/g $ROOT_DS | tr '\\n' ' '</code>&quot;\nfi\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;修改为&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;ROOT_DS=&quot;/usr/share/dns/root.ds&quot;\nif [ -f $ROOT_DS ]; then\nDNSMASQ_OPTS=&quot;$DNSMASQ_OPTS <code>sed -e s/&amp;quot;.*IN[[:space:]]DS[[:space:]]&amp;quot;/--trust-anchor=.,/ -e s/&amp;quot;[[:space:]]&amp;quot;/,/g $ROOT_DS | tr '\\n' ' '</code>&quot;\nfi\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;当错误解决以后，我们手动重启一下dnsmasq的systemd服务。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo systemctl restart dnsmasq\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;deepin的/etc/resolv.conf来自/etc/NetworkManager/resolv.conf.是一个软连接。我采取的行为是删除这个文件，重新创建。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo rm /etc/resolv.conf\nsudo vim /etc/resolv.conf\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后写入本地地址当做dns地址。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;nameserver 127.0.0.1\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;dnsmasq是一个本地的dns和dhcp服务器，当我们在上面成功启动dnsmasq以后，个人系统中就已经在提供dns服务了，所以本机使用回环地址来表明dns服务器就是本机，所有的dns查询都会发送到本机的dnsmasq中。\n如果需要额外添加dns服务器，做法来自&lt;a href=&quot;https://wiki.archlinux.org/index.php/Dnsmasq#More_than_three_nameservers&quot;&gt;https://wiki.archlinux.org/index.php/Dnsmasq#More_than_three_nameservers&lt;/a&gt;.\n创建一个 /etc/resolv.dnsmasq.conf，写入其他dns服务器的地址。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;nameserver 114.114.114.114\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后编辑 /etc/dnsmasq.conf,找到resolv-file字段，改为&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;resolv-file=/etc/resolv.dnsmasq.conf\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;然后重启dnsmasq。\n验证的话通过dig命令。&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;dig blog.mkacg.com\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;通过执行两次来判断，Query time在第二次查询是为0 msec。&lt;/p&gt;</p>\n",
        "id": "6c0149bf21d9e5eda6a4de16dc973615",
        "link": "/2017/08/11/在deepin上使用dnsmasq来解决dns解析缓慢"
    },
    {
        "attributes": {
            "title": "PPA",
            "date": "2017-07-24T16:07:50.000Z",
            "tags": null
        },
        "body": "<p>&lt;p&gt;也许需要安装dirmngr\nmaybe you need install dirmngr\n追加内容到/etc/apt/sources.list\nAppend content to /etc/apt/sources.list&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;deb [arch=amd64] https://packages.mkacg.com panda main\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;导入key\nimport key&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3BBF73EE77F2FB2A\n&lt;/code&gt;&lt;/pre&gt;</p>\n",
        "id": "39479c1656fa8ca58026fc948c852edd",
        "link": "/2017/07/24/PPA"
    },
    {
        "attributes": {
            "title": "topbar PPA",
            "date": "2017-07-20T13:37:51.000Z",
            "tags": null
        },
        "body": "<p>&lt;p&gt;自己搭了一个仓库，提供deepin-topbar及相关依赖的包。\nI created a repository,provide deepin-topbar and dependencies.\n也许需要安装dirmngr\nmaybe you need install dirmngr&lt;/p&gt;\n&lt;h1&gt;追加内容到/etc/apt/sources.list&lt;/h1&gt;\n&lt;p&gt;Append content to /etc/apt/sources.list&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;deb [arch=amd64] https://packages.mkacg.com panda main\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;导入key&lt;/h1&gt;\n&lt;p&gt;import key&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3BBF73EE77F2FB2A\n&lt;/code&gt;&lt;/pre&gt;\n&lt;h1&gt;刷新列表，进行安装&lt;/h1&gt;\n&lt;p&gt;then, refresh list and install&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;sudo apt update &amp;&amp; sudo apt install deepin-topbar\n&lt;/code&gt;&lt;/pre&gt;</p>\n",
        "id": "2160f8b621443cce3b19cb7d787fd057",
        "link": "/2017/07/20/topbarPPA"
    },
    {
        "attributes": {
            "title": "webhook",
            "date": "2017-07-14T02:52:20.000Z",
            "tags": "linux"
        },
        "body": "<p>&lt;p&gt;blog现在是用hexo，放在自己的&lt;a href=&quot;https://code.mkacg.com&quot;&gt;code&lt;/a&gt;网站上。\ncode是用无闻大大的gogs搭建的，跑在台式机的docker中，本机跑了很多docker服务，有hexo，有aria2c，有gogs，还有个webserver caddy。\ncaddy这东西还是基友 &lt;a href=&quot;https://mioto.me/&quot;&gt;不爱写博客的mioto&lt;/a&gt;推荐给我的，之前我一直是用nginx的，那配置文件太复杂了，根本玩不来。\n写一篇文章，会先提交到code，然后触发webhook，caddy会拉取code中的文章，由于是静态的，所以不需要处理其他的，只需要拉取最新的就可以了。\ncaddy的配置&lt;/p&gt;\n&lt;pre&gt;&lt;code&gt;blog.mkacg.com {\ngzip\nredir 301 {\nif {&gt;X-Forwarded-Proto} is http\n/  https://{host}{uri}\n}\ntls kirigaya@mkacg.com\nroot /srv/www/blog\ngit code.mkacg.com/kirigayakazushin/blog {\npath /srv/www/blog\nbranch gh-pages\nhook /_webhook xxx\nhook_type gogs\nthen git pull\n}\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;p&gt;gogs上只需要创建一个webhook，地址填写成caddy中的hook地址，加密填写hook后的xxx即可，加密自己设置。\n然后就可以提交了。\n提交会触发push操作，gogs会根据设置的webhook中的规则，执行和push相关的webhook，webhook会向指定的url发送POST操作，发送的内容中包含了相关信息，caddy会根据相关信息，来处理webhook，执行你规定的操作。&lt;/p&gt;</p>\n",
        "id": "95424174b467660d9d29374c13638004",
        "link": "/2017/07/14/webhook"
    },
    {
        "attributes": {
            "title": "SAOUTILS",
            "date": "2017-07-04T06:20:00.000Z",
            "tags": "linux"
        },
        "body": "<p>&lt;p&gt;鼠标手势还没想好要怎么实现，流程无法完全确认，这项稍后再做。\n主界面有两层构成，半透明全屏黑色背景和菜单。\n菜单较为复杂，除了左边是一个大面板，其他部分全部都可以使用一种方式实现。使用Qt的QAbstractItemDelegate、QListView来做列表和界面绘制。\n右边则是无限展开的菜单。\n每层菜单只是用一个对象，和topbar dock的popup window一样。\n点击每层菜单的时候，计算下一项要显示的位置。\n主界面应该是只有左右两部分，除了左边的大面板，右侧全部都是相同结构的菜单，只不过在功能上略有不同。\n点击的时候，所有菜单对鼠标点击的地点进行坐标计算，如果在鼠标右侧，则隐藏。如果要显示的菜单是自己，不隐藏。点击时开始timer，松开时停止，timeout以后显示选项。\n保持最后一个菜单在最中间的位置，主界面向左或向右用动画移动固定长度。&lt;/p&gt;</p>\n",
        "id": "5737edc6587a6dc7fec48fa8bdee5aaa",
        "link": "/2017/07/04/SAOUTILS"
    },
    {
        "attributes": {
            "title": "Topbar",
            "date": "2017-06-26T02:32:35.000Z",
            "tags": "linux"
        },
        "body": "<p>&lt;p&gt;topbar的架构参考的是dde-dock，就是一个精简的dock，只有一个方向，一个位置，没有右键菜单，只有插件类型。\n&lt;!--more--&gt;\n&lt;video controls=&quot;&quot; autoplay=&quot;false&quot; name=&quot;media&quot;&gt;&lt;source src=&quot;https://cache.mkacg.com/t.mp4&quot; type=&quot;video/mp4&quot;&gt;&lt;/video&gt;\n　　计划是用来支持各种各样的方便的插件，比如：&lt;/p&gt;\n&lt;ul&gt;\n&lt;li&gt;活动窗口指示器&lt;/li&gt;\n&lt;li&gt;多媒体控制器&lt;/li&gt;\n&lt;li&gt;电源控制&lt;/li&gt;\n&lt;li&gt;时间控制\n计划要完成有：&lt;/li&gt;\n&lt;li&gt;shadowsocks&lt;/li&gt;\n&lt;li&gt;vpn控制器&lt;/li&gt;\n&lt;li&gt;系统资源监视器\n剩下的计划待完成的插件由于各种原因，开发比较难，还需要学习一部分知识才可以完成。&lt;/li&gt;\n&lt;/ul&gt;</p>\n",
        "id": "dbdcbbe9d0265fc8d05157fa7721cc98",
        "link": "/2017/06/26/Topbar"
    },
    {
        "attributes": {
            "title": "标题",
            "date": "2017-05-15T00:00:00.000Z",
            "author": "justforlxz"
        },
        "body": "<p>&lt;p&gt;正文内容&lt;/p&gt;\n&lt;h2&gt;test&lt;/h2&gt;</p>\n",
        "id": "b128b7694e4de962e0088bcb1bcb254f",
        "link": "/2017/05/15/标题"
    },
    {
        "attributes": {
            "title": "ArchLinux运行steam出现缺少LibGL--steam libGL error: failed to load driver: swrast",
            "subtitle": "arch库太新，steam库太旧导致的问题。",
            "date": "2016-07-15T07:18:53.000Z",
            "author": "kirigaya",
            "header-img": "home-bg.jpg",
            "tags": [
                "实验室"
            ]
        },
        "body": "<p>&lt;p&gt;其实arch的wiki已经提到了，而且这个问题是比较常见的，只需要删除steam的库就行。\n&lt;a href=&quot;https://wiki.archlinux.org/index.php/Steam/Troubleshooting#Deleting_the_runtime_libraries&quot;&gt;wiki原文链接&lt;/a&gt;\n&lt;!--more--&gt;\n删除运行库\n运行此命令，删除在issues上已知的运行库问题:\nfind ~/.steam/root/ ( -name &quot;libgcc_s.so*&quot; -o -name &quot;libstdc++.so*&quot; -o -name &quot;libxcb.so*&quot; -o -name &quot;libgpg-error.so*&quot; ) -print -delete\n如果上面的命令不工作，则再次运行上面的命令，然后运行此命令。\nfind ~/.local/share/Steam/ ( -name &quot;libgcc_s.so*&quot; -o -name &quot;libstdc++.so*&quot; -o -name &quot;libxcb.so*&quot; -o -name &quot;libgpg-error.so*&quot; ) -print -delete&lt;/p&gt;</p>\n",
        "id": "de84ebf81747eb9e386cbfbc97812966",
        "link": "/2016/07/15/ArchLinux运行steam出现缺少LibGL--steamlibGLerror:failedtoloaddriver:swrast"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "docker-hexo",
            "subtitle": "把hexo封装进docker，当做本地工具使用",
            "date": "2016-07-15T04:53:24.000Z",
            "author": "kirigaya",
            "header-img": "home-bg.jpg",
            "tags": [
                "实验室"
            ]
        },
        "body": "<p>&lt;p&gt;引用一下基友的话&lt;/p&gt;\n&lt;blockquote&gt;\n&lt;p&gt;最开始接触 Hexo 的时候是在 Windows 下, 安装过程还算顺利, 因此在初期还整理了6篇关于 Hexo 博客的搭建教程.\n后来转投 Linux 大法, 期间重装电脑无数次, 每一次安装 Hexo 所需要的 nodejs, 和各种插件的时候都是闹心的过程, 玩的多了自然就熟了, Linux 下的安装基本没问题了.\n&lt;!--more--&gt;\n然后入职公司, 公司配了 Mac Pro 又需要安装 Nodejs, 以及各种插件, 人傻搞不定啊.., 晚上迷迷糊糊的还 rm -rf /usr/bin 了.., 所以决定放弃在实体机安装 Nodejs 的想法转战到了 Docker.\n来自mashiro.io\n他后来更新了一下dockerfile，他觉得以前的思路是错的，现在他要把hexo封装进docker当做工具，又写了几个alias。\n安装docker，然后pull镜像\ndocker pull kirigayakazushin/docker-hexo\npull镜像以后，写入alias，将docker-hexo当做本地工具。\nalias hexo='docker run -it --rm -p 4000:4000 -v $PWD:/Hexo -v $HOME/.gitconfig:/home/docker/.gitconfig -v $HOME/.ssh:/home/docker/.ssh kirigayakazushin/docker-hexo hexo'\nalias npm='docker run -it --rm -v $PWD:/Hexo kirigayakazushin/docker-hexo npm'\nalias ddnone=&quot;docker images | grep none | awk '{print $3}' |xargs docker rmi&quot;\n然后执行一下命令\nnpm install hexo-generator-sitemap --save &lt;br&gt;\n&amp;&amp; npm install hexo-generator-feed --save &lt;br&gt;\n&amp;&amp; npm install hexo-deployer-git --save\n把以上内容写进rc文件，我是用zsh的，所以写入~/.zshrc。\n&lt;img src=&quot;docker-hexo/zshrc.png&quot; alt=&quot;zshrc&quot;&gt;\n接下来基本演示一下使用方式。\n&lt;img src=&quot;docker-hexo/ys1.png&quot; alt=&quot;ys1&quot;&gt;\n&lt;img src=&quot;docker-hexo/ys2.png&quot; alt=&quot;ys2&quot;&gt;\n&lt;img src=&quot;docker-hexo/ys3.png&quot; alt=&quot;ys3&quot;&gt;\n&lt;img src=&quot;docker-hexo/ys4.png&quot; alt=&quot;ys4&quot;&gt;\n&lt;img src=&quot;docker-hexo/ys5.png&quot; alt=&quot;ys5&quot;&gt;&lt;/p&gt;\n&lt;/blockquote&gt;</p>\n",
        "id": "bb79bd54a86ad1062f997fcb7bcdf370",
        "link": "/2016/07/15/docker-hexo"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "docker-aria2c",
            "subtitle": "docker-aria2c",
            "author": "kirigaya",
            "header-img": "home-bg.jpg",
            "tags": [
                "实验室"
            ],
            "date": "2016-05-31T22:43:54.000Z"
        },
        "body": "<p>&lt;p&gt;该项目是将aria2c封装进docker并提供服务。\ndocker pull kirigayakazushin/docker-aria2c\n&lt;!--more--&gt;\n下载好镜像，然后保存一份运行\ndocker run -p 6800:6800 --name docker-aria2c -d &lt;br&gt;\n-v {下载目录的绝对路径}:/aria2/downloads &lt;br&gt;\nimashiro/docker-aria2c\n打开浏览器，访问&lt;a href=&quot;http://yaaw.qiniudn.com/&quot;&gt;http://yaaw.qiniudn.com/&lt;/a&gt;\n输入\nhttp://token:secret@127.0.0.1:6800/jsonrpc\n注意，暂时还无法处理文件的所有权，目前下载好的文件归属root。&lt;/p&gt;</p>\n",
        "id": "c911e6347b4dd35eb11323557b74a017",
        "link": "/2016/05/31/docker-aria2c"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "sakura",
            "subtitle": "樱花庄的宠物女孩",
            "author": "kirigaya",
            "header-img": "home-bg.jpg",
            "tags": [
                "ACG"
            ],
            "date": "2016-05-29T11:55:20.000Z"
        },
        "body": "<p>&lt;p&gt;&lt;img src=&quot;sakura.jpg&quot; alt=&quot;sakura&quot;&gt;\n这是我比较喜欢的一部动漫。\n&lt;a href=&quot;%22http://baike.baidu.com/link?url=z8biExJdMd0fG7ZdoFfYBak4HQhtLZJIRgZ4bA1PtM1DPQwkBFcbEygmLIMZQKqI-SSfdT6Wwo8yzUNMXrgq_Q0OCP8kPcc83LdJgnDIiCu%22&quot;&gt;《樱花庄的宠物女孩》&lt;/a&gt;\n我的域名也是来自女主角的名字，椎名真白（椎名 ましろ）\n&lt;!--more--&gt;\n这部番怎么说呢，对我个人的影响是很大的，当年喜欢编程可能是因为《高达seed》的基拉大和说自己精通编程，然后我就打开了新世界的大门。现在喜欢游戏开发，可能就是因为男主角。\n我也喜欢和朋友们一起奋斗，留下美好的回忆。\n我也担心会失败，既然做了，就想要做到最好。\n其实就在眼前，明明就在伸手可及的地方，但那距离却总让人觉得像是永远。\n我发现了，无聊的不是这段时光，而是和别人相似的自己\n是啊 果然和别人一起创作是最开心的，虽然有时会令人沮丧，但那是无法避免的，因为我没有技术和经验。丽塔和椎名在一起了十年，虽然椎名的才能是压倒性的 但她还是继续努力着，与她相比 我和椎名见面才不过半年，明明还什么都没做，就沮丧失去自信实在是太厚脸皮了。没关系的 一定能成功。集合了樱花庄全员的力量，一定能成为一部了不起的作品，椎名已经不是一个人了，是怀有相同目标并一同前进着的伙伴。我也要 尽力去做自己能做到的事，即使只是一点点也好 为了去接近真白。\n无论普通人多么努力却无法超过那些天才，天才们只要无意的一个举动就能获得别人万分辛苦都得不到的东西。\n对啊，有很多人都有我从未拥有过的东西，可能那就是别人的天赋吧，而我的自己天赋就是没有天赋。天赋这东西是自己拥有别人不拥有的，可是我却不知道我拥有什么。想一想我的二十年人生可真是失败，连普通都算不上，知识没有储存那么多，还天真的以为自己能做些什么。这个世界的框架早已固定，而我就是被刷下来的人。\n给自己定下的目标，几乎都没有完成，总是半途放弃。前阵子还想通过游戏开发去快点赚些钱，可是家里说让我先奋斗奋斗，不要找眼前会赚很多钱的工作。我相信这是前辈总结出来的经验。\n人生还是太浮躁了，这个社会也是浮躁的，如果不能冷静下来，最后还是会脱离框架。\n&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=300 src=&quot;http://music.163.com/outchain/player?type=0&amp;id=391004793&amp;auto=1&amp;height=430&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;</p>\n",
        "id": "2d3bd4702c61a3d190bd0caa6f6a50f1",
        "link": "/2016/05/29/sakura"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "linux下安装vmware及archlinux的安装和配置",
            "subtitle": "我的linux日常",
            "date": "2016-04-10T17:02:51.000Z",
            "author": "kirigaya",
            "header-img": "home-bg.jpg",
            "tags": [
                "教程"
            ]
        },
        "body": "<p>&lt;p&gt;视频中给出了vmware的下载地址和安装过程，系统的下载我也会演示一遍。\n这篇教程会一篇完成，从安装到配置和美化，顺便也总结一下我的成果。\n由于我已经安装过一次vmware了，所以有个脚本的地方没有出现，输入界面上的提示信息即可。\n宿舍太乱，所以就没有录麦克风，操作我会尽量慢一些，然后打字讲述。\n这次大更。。gtk主题还没更新上来，所以界面好丑。  = =。\n安装完成以后安装源里面的vmware-patch。&lt;/p&gt;</p>\n",
        "id": "eb7c963306c2f37d3f7a5de7cccd0963",
        "link": "/2016/04/10/linux下安装vmware及archlinux的安装和配置"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "Archlinux 添加漂亮的字体",
            "subtitle": "想要漂亮的字体吗",
            "date": "2016-04-08T16:54:26.000Z",
            "author": "kirigaya",
            "header-img": "home-bg.jpg",
            "tags": [
                "教程"
            ]
        },
        "body": "<p>&lt;p&gt;该教程不能保证适用于所有人的情况。\n字体也不是配置，而是补充了字体。使用的是第三方的源。\n&lt;!--more--&gt;\n打开/etc/pacman.conf文件，添加以下内容到最底部。\n[infinality-bundle]\nSigLevel = Never\nServer = http://bohoomil.com/repo/$arch\n[infinality-bundle-multilib]\nSigLevel = Never\nServer = http://bohoomil.com/repo/multilib/$arch\n[infinality-bundle-fonts]\nSigLevel = Never\nServer = http://bohoomil.com/repo/fonts\n执行安装命令:\nsudo pacman -S infinality-bundle infinality-bundle-multilib ibfonts-meta-extended  #（用于64位系统）\nsudo pacman -S infinality-bundle ibfonts-meta-extended #（用于32位系统）\n如果有遇到错误，可以手动添加hosts：\n188.226.219.173 bohoomil.com\n会出现很多冲突，选择Y，然后安装。如果中断了，重新执行安装命令。\n来自：[如何给任意一款 Linux 发行版添加漂亮的字体-桌面应用|Linux.中国-开源社区][1]\n[1]: https://linux.cn/article-3019-1.html &quot;如何给任意一款 Linux 发行版添加漂亮的字体-桌面应用|Linux.中国-开源社区&quot;&lt;/p&gt;</p>\n",
        "id": "7d6dbecb651d0aaa7c1a7026d81977e3",
        "link": "/2016/04/08/Archlinux添加漂亮的字体"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "My Life",
            "subtitle": "我的linux日常",
            "date": "2016-03-25T11:56:08.000Z",
            "author": "kirigaya",
            "header-img": "my-life.jpg",
            "tags": [
                "日常"
            ]
        },
        "body": "<p>&lt;p&gt;这是我用markdown写的第一篇文章(水文)，先来个自我介绍吧，我是小竹，对没错，是小竹，不是竹子，不是竹酱，更不是竹基。\n&lt;!--more--&gt;\n我玩linux应该有五六年了吧，初二的时候接触的，不过很多年都保持在换各种发行版上，并没有真正意义的玩。上了大学以后，接触的更多了，玩的也更嗨了。\n现在也用上arch+btrfs+uefi了，各种叼炸天。\nirc里面也经常学习【看别人装逼。\n依旧是英语渣渣，数学渣渣，看到win32api，我直接放弃win编程了，我的智商也就玩玩wpf了。\n下面就贴几张我的日常截图。\n&lt;strong&gt;My Computer info&lt;/strong&gt;\n&lt;pre&gt;&lt;code&gt;\nkirigayaloveyousei@linuser\nOS: Arch Linux\nKernel: x86_64 Linux 4.4.5-1-ARCH\nackages: 1092\nShell: zsh 5.2\nResolution: 1366x768\nWM: Mutter(DeepinGala)\nWM Theme: Adwaita\nGTK Theme: Arc-OSX [GTK2/3]\nIcon Theme: deepin\nFont: Noto Sans CJK SC Regular 10\nCPU: Intel Core i5-4210U CPU @ 2.7GHz\nRAM: 1980MiB / 3861MiB\n&lt;/code&gt;&lt;/pre&gt;\n&lt;img src=&quot;my-life/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160403224356.png&quot; alt=&quot;pic1&quot;&gt;\n&lt;img src=&quot;my-life/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160403224410.png&quot; alt=&quot;pic1&quot;&gt;\n&lt;img src=&quot;my-life/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160403224524.png&quot; alt=&quot;pic1&quot;&gt;\n&lt;img src=&quot;my-life/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160403224634.png&quot; alt=&quot;pic1&quot;&gt;\n&lt;img src=&quot;my-life/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160403233112.png&quot; alt=&quot;pic1&quot;&gt;\n&lt;img src=&quot;my-life/%E6%B7%B1%E5%BA%A6%E6%88%AA%E5%9B%BE20160403233229.png&quot; alt=&quot;pic1&quot;&gt;&lt;/p&gt;</p>\n",
        "id": "7a035ffa5fb383e745d96d14b5ab109a",
        "link": "/2016/03/25/MyLife"
    },
    {
        "attributes": {
            "layout": "post",
            "title": "标题",
            "subtitle": "字幕",
            "date": "2016-03-25T00:00:00.000Z",
            "author": "kirigaya",
            "header-img": "模板",
            "tags": [
                "模板"
            ]
        },
        "body": "<p>&lt;p&gt;&lt;!--more--&gt;&lt;/p&gt;</p>\n",
        "id": "e35b73785af203bc9dd708890406fffd",
        "link": "/2016/03/25/标题"
    }
]